.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "IT_CONVOLUTIONAL_CODE_ENCODE_SYMBOLIC" "3" "01 August 2006" "" ""

.SH NAME
it_convolutional_code_encode_symbolic \- convolutional encoding (symbolic)
.SH SYNOPSIS
.sp
\fB#include <it/convcode.h>
.sp
ivec it_convolutional_code_encode_symbolic ( it_convolutional_code_t *it_this, ivec b
);
\fR
.SH "DESCRIPTION"
.PP
This function encodes the discrete vector \fIb\fR with the convolutional code specified in \fIcode\fR\&. Each symbol in \fIb\fR is 2^k-ary whereas symbols of the returns encoded vector are 2^n-ary, where k:n is the rate of the convolutional code.  
.SH "RETURN VALUE"
.PP
The sequence encoded with the convolutional code
.SH "EXAMPLE"

.nf

#include <convcode.h>

\&...

/* the matrix of generator polynomials */
imat generator = imat_new(2, 3); 
int feedback = 0; /* an optional feedback polynomial for recursive codes */

generator[0][0] = 023; /* generator polynomials using the C octal notation */
generator[0][1] = 035;
generator[0][2] =   0;
generator[1][0] =   0;
generator[1][1] =  05;
generator[1][2] = 013;

/* create the convolutional code */
it_convolutional_code_t *code = it_convolutional_code_new(generator, feedback);

/* some input message */
ivec input = ivec_new_string("0 3 2 0 1 0 3");

/* encode the sequence with the convolutional code */
ivec output = it_cc_encode(code, input);
.fi
.SH "AUTHOR"
.PP
This manual page was written by Herve Jegou <Herve.Jegou@irisa.fr>\&.
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free
Documentation License, Version 1.1 or any later version
published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts and no Back-Cover Texts.
