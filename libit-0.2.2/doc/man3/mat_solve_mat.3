.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "MAT_SOLVE_MAT" "3" "01 August 2006" "" ""

.SH NAME
mat_solve_mat \- outputs X such that AX=B
.SH SYNOPSIS
.sp
\fB#include <it/linalg.h>
.sp
mat mat_solve_mat ( mat A, mat B
);
\fR
.SH "DESCRIPTION"
.PP
This function uses LU decomposition to repeatedly solve A*X_i = X_i. The b_i are the columns of matrix \fIB\fR\&. The first step of computing LU decomposition is O(n^3), but solving every equation takes O(n^2). The matrix \fIA\fR must be square. 
See \fBmat_solve_vec\fR\&.  
.SH "RETURN VALUE"
.PP
matrix X such that AX=B
.SH "EXAMPLE"

.nf

#include <linalg.h>

\&...

mat a = mat_new( 2, 2 ); 
mat b = mat_new( 2, 2 );
vec b = vec_new( 2 ); 

a[0][0] = 1; a[0][1] = 3; 
a[1][0] = 5; a[1][1] = 3; 

b[0][0] = 3; b[0][1] = 1; 
b[1][0] = 1; b[1][1] = 3; 

mat x = mat_solve_mat( a, b ); /* x = [-.5 .5 ; 1.666666667 .166666667] */ 
.fi
.SH "AUTHOR"
.PP
This manual page was written by Francois Cayre <cayre@inpg.fr>\&.
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free
Documentation License, Version 1.1 or any later version
published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts and no Back-Cover Texts.
