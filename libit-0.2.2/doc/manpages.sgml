





<!-- channel_awgn -->

<refentry id=man.channel-awgn>
  <refmeta>
    <refentrytitle>channel_awgn</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>channel_awgn</refname>
    <refpurpose>AWGN channel simulation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/channel.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>channel_awgn</function></funcdef>
        <paramdef> vec v, double sigma
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function simulates the transmission of a vector over an additive white Gaussian noise (AWGN) channel. An independent Gaussian noise of standard deviation <parameter>sigma</parameter> is added to the vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The noisy signal
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;channel.h&gt;

...

vec message = vec_new_string("-1 1 1 1 -1 -1 1");

/* send over an AWGN channel of standard deviation 0.5 */ 
vec received = channel_awgn(message, 0.5);
  
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- channel_bsc -->

<refentry id=man.channel-bsc>
  <refmeta>
    <refentrytitle>channel_bsc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>channel_bsc</refname>
    <refpurpose>BSC channel simulation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/channel.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>channel_bsc</function></funcdef>
        <paramdef> bvec v, double crossover_proba
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function simulates the transmission of a binary vector <parameter>v</parameter> over an binary symmetric channel (BSC). The cross-over probability of this channel is given by the <parameter>crossover_proba</parameter> argument.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The noisy sequence of bits
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;channel.h&gt;

...

bvec message = bvec_new_string("0 1 1 0 0 0 1");

/* send over a BSC channel of cross-over probability 0.1 */ 
bvec received = channel_bsc(message, 0.1);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_to_imat -->

<refentry id=man.mat-to-imat>
  <refmeta>
    <refentrytitle>mat_to_imat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_to_imat</refname>
    <refpurpose>convert a matrix of double into a integer matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/channel.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_to_imat</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_to_mat</function> casts a matrix of integers into a matrix of double floating point values. It results in a new matrix. Note that this may result in a loss of precision. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix of integers
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;channel.h&gt;

...

mat m1 = mat_new_set (0.4,2,2); /* m1 = [[0.4 0.4]
                                         [0.4 0.4]]  */

imat m2 = mat_to_imat (m1);     /* m2 = [[0 0]
                                         [0 0]]  */


</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- modulate_bpsk -->

<refentry id=man.modulate-bpsk>
  <refmeta>
    <refentrytitle>modulate_bpsk</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>modulate_bpsk</refname>
    <refpurpose>BPSK modulation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/channel.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>modulate_bpsk</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function modulates the binary vector <parameter>v</parameter> to a real vector using binary phase shift keying (BPSK) modulation. The 0 bit is represented with the real value -1, whereas the 1 bit is represented with the real value +1. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sequence of bits modulated
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;channel.h&gt;

...

bvec message = bvec_new_string("0 1 1 0 0 0 1");

/* modulate the message using BPSK */
vec modulated = modulate_bpsk(output);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_convolutional_code_encode -->

<refentry id=man.it-convolutional-code-encode>
  <refmeta>
    <refentrytitle>it_convolutional_code_encode</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_convolutional_code_encode</refname>
    <refpurpose>convolutional encoding</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/convcode.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>it_convolutional_code_encode</function></funcdef>
        <paramdef> it_convolutional_code_t *code, bvec b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function encodes the binary vector <parameter>b</parameter> with the convolutional code specified in <parameter>code</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The encoded sequence
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;convcode.h&gt;

...

/* the matrix of generator polynomials */
imat generator = imat_new(1, 2); 
int feedback = 0; /* an optional feedback polynomial for recursive codes */

generator[0][0] = 0133; /* generator polynomials using the C octal notation */
generator[0][1] = 0171;

/* create the convolutional code */
it_convolutional_code_t *code = it_convolutional_code_new(generator, feedback);

/* some input message */
bvec input = bvec_new_string("0 1 1 0 0 0 1");

/* encode the sequence with the convolutional code */
bvec output = it_cc_encode(code, input);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_convolutional_code_encode_symbolic -->

<refentry id=man.it-convolutional-code-encode-symbolic>
  <refmeta>
    <refentrytitle>it_convolutional_code_encode_symbolic</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_convolutional_code_encode_symbolic</refname>
    <refpurpose>convolutional encoding (symbolic)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/convcode.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>it_convolutional_code_encode_symbolic</function></funcdef>
        <paramdef> it_convolutional_code_t *it_this, ivec b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function encodes the discrete vector <parameter>b</parameter> with the convolutional code specified in <parameter>code</parameter>. Each symbol in <parameter>b</parameter> is 2^k-ary whereas symbols of the returns encoded vector are 2^n-ary, where k:n is the rate of the convolutional code.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sequence encoded with the convolutional code
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;convcode.h&gt;

...

/* the matrix of generator polynomials */
imat generator = imat_new(2, 3); 
int feedback = 0; /* an optional feedback polynomial for recursive codes */

generator[0][0] = 023; /* generator polynomials using the C octal notation */
generator[0][1] = 035;
generator[0][2] =   0;
generator[1][0] =   0;
generator[1][1] =  05;
generator[1][2] = 013;

/* create the convolutional code */
it_convolutional_code_t *code = it_convolutional_code_new(generator, feedback);

/* some input message */
ivec input = ivec_new_string("0 3 2 0 1 0 3");

/* encode the sequence with the convolutional code */
ivec output = it_cc_encode(code, input);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_convolutional_code_new -->

<refentry id=man.it-convolutional-code-new>
  <refmeta>
    <refentrytitle>it_convolutional_code_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_convolutional_code_new</refname>
    <refpurpose>convolutional code constructor</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/convcode.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_convolutional_code_new</function></funcdef>
        <paramdef> imat generators, int feedback
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>it_convolutional_code_new</function> function creates a new convolutional code object from the matrix of generator polynomials <parameter>generators</parameter>. The rate of the code is k:n where k is the number of rows and n is the number of columns in <parameter>generators</parameter>. Each generator polynomial is given as an integer representing the bits to be considered and xored in the shift register.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The newly allocated convolutional code object
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;convcode.h&gt;

...

/* the matrix of generator polynomials */
imat generator = imat_new(1, 2); 

int feedback = 0; /* an optional feedback polynomial for recursive codes */
generator[0][0] = 0133; /* generator polynomial using the C octal notation */
generator[0][1] = 0171;

/* create the convolutional code */
it_convolutional_code_t *code = it_convolutional_code_new(generator, feedback);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_viterbi_decode -->

<refentry id=man.it-viterbi-decode>
  <refmeta>
    <refentrytitle>it_viterbi_decode</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_viterbi_decode</refname>
    <refpurpose>Viterbi decoding of convolutional codes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/convcode.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>it_viterbi_decode</function></funcdef>
        <paramdef> it_convolutional_code_t *code, mat metrics
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the maximum a posteriori (MAP) sequence maximizing the total metric among all possible paths in the trellis of the convolution code <parameter>code</parameter>. The branch metrics of this trellis are given in the <parameter>metrics</parameter> matrix, where each row in 0..2^n-1 corresponds to a branch label and each column corresponds to an index in the received sequence, for a code of rate k:n. The metric m[i][j] corresponds to the logarithm of the probability of observing the set of n bits represented by i at time j. These metrics are dependent on the modulation and channel used for transmission.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The decoded sequence
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_viterbi_decode_symbolic -->

<refentry id=man.it-viterbi-decode-symbolic>
  <refmeta>
    <refentrytitle>it_viterbi_decode_symbolic</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_viterbi_decode_symbolic</refname>
    <refpurpose>Viterbi decoding of convolutional codes (symbolic)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/convcode.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>it_viterbi_decode_symbolic</function></funcdef>
        <paramdef> it_convolutional_code_t *code, mat metrics
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the maximum a posteriori (MAP) sequence maximizing the total metric among all possible paths in the trellis of the convolution code <parameter>code</parameter>. The branch metrics of this trellis are given in the <parameter>metrics</parameter> matrix, where each row in 0..2^n-1 corresponds to a branch label and each column corresponds to an index in the received sequence, for a code of rate k:n. The metric m[i][j] corresponds to the logarithm of the probability of observing the symbol i at time j. These metrics are dependent on the modulation and channel used for transmission.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The decoded sequence
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cadd -->

<refentry id=man.cadd>
  <refmeta>
    <refentrytitle>cadd</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cadd</refname>
    <refpurpose>Addition of two complex numbers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cadd</function></funcdef>
        <paramdef> cplx a, cplx b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cadd</function> returns the complex <parameter>a</parameter>+<parameter>b</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The complex sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx b = cplx(2,3);
cplx c = cadd(a, b);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cdiv -->

<refentry id=man.cdiv>
  <refmeta>
    <refentrytitle>cdiv</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cdiv</refname>
    <refpurpose>Division of two complex numbers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cdiv</function></funcdef>
        <paramdef> cplx a, cplx b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cdiv</function> divides the complex number <parameter>a</parameter> by the complex number <parameter>b</parameter>  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The result of the division
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx b = cplx(2,3);
cplx c = cdiv(a, b);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ceq -->

<refentry id=man.ceq>
  <refmeta>
    <refentrytitle>ceq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ceq</refname>
    <refpurpose>Check if two complex numbers are equal</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ceq</function></funcdef>
        <paramdef> cplx a, cplx b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ceq</function> check if the two complex numbers are identical.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    0 if the complexes are equal, otherwise a value different from 0
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx b = cplx(2,3);
if(ceq(a, b))
  printf("a and b are equal
");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmul -->

<refentry id=man.cmul>
  <refmeta>
    <refentrytitle>cmul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmul</refname>
    <refpurpose>Multiply two complex numbers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cmul</function></funcdef>
        <paramdef> cplx a, cplx b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmul</function> computes and returns the product of the complex numbers <parameter>a</parameter> and <parameter>b</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The result of the multiplication of the two vectors
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx b = cplx(2,3);
cplx c = cmul(a, b);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cneg -->

<refentry id=man.cneg>
  <refmeta>
    <refentrytitle>cneg</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cneg</refname>
    <refpurpose>Opposite of a complex number</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cneg</function></funcdef>
        <paramdef> cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cneg</function> returns the opposite of the complex number <parameter>a</parameter>  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The opposite value of the complex
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx c = cneg(a);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cnorm -->

<refentry id=man.cnorm>
  <refmeta>
    <refentrytitle>cnorm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cnorm</refname>
    <refpurpose>modulus of a complex number</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>cnorm</function></funcdef>
        <paramdef> cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cnorm</function> returns the modulus of the complex <parameter>a</parameter>, i.e. the square root of the sum of the square of the real and imaginary parts.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The module of the complex
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
double n = cnorm(a, b);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cinv -->

<refentry id=man.cinv>
  <refmeta>
    <refentrytitle>cinv</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cinv</refname>
    <refpurpose>Inverse a complex number</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cinv</function></funcdef>
        <paramdef> cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cinv</function> returns the inverse of <parameter>a</parameter>, if it exists.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The inverse of the complex
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx c = cinv(a);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cconj -->

<refentry id=man.cconj>
  <refmeta>
    <refentrytitle>cconj</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cconj</refname>
    <refpurpose>Conjuguate of a complex number</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cconj</function></funcdef>
        <paramdef> cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cconj</function> returns the complex conjuguate of the complex <parameter>a</parameter>. Hence, if <parameter>a</parameter> is of the form b+c*i, where i is the square root of -1, the function returns the complex b-c*i.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The conjuguate value of the complex
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx c = cconj(a);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- csub -->

<refentry id=man.csub>
  <refmeta>
    <refentrytitle>csub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>csub</refname>
    <refpurpose>Substract two complex numbers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/cplx.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>csub</function></funcdef>
        <paramdef> cplx a, cplx b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>csub</function> returns the difference between <parameter>a</parameter> and <parameter>b</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The substracted complex number
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;cplx.h&gt;

...

cplx a = cplx(1,1);
cplx b = cplx(2,3);
cplx c = csub(a, b);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_distance_mse -->

<refentry id=man.mat-distance-mse>
  <refmeta>
    <refentrytitle>mat_distance_mse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_distance_mse</refname>
    <refpurpose>mean square error between two images</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_distance_mse</function></funcdef>
        <paramdef> mat v1, mat v2, double rec_value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the mean square error (MSE) between two matrices <parameter>m1</parameter> and  <parameter>m2</parameter>. This error is defined as the average of the square of the difference between each element of <parameter>v1</parameter> and the corresponding element of <parameter>v2</parameter>. If the matrices are not of the same size, the missing elements are assumed to be equal to the value <parameter>rec_value</parameter> when computing the MSE.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The mean square error
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

mat m1 = mat_new(2,2);
mat m2 = mat_new(2,2);
m1[0][0] = 3.5;
m1[0][1] = 6.8;
m1[1][0] = 2.2;
m1[1][1] = 5.1;
m2[0][0] = 5.5;
m2[0][1] = 2.3;
m2[1][0] = 7.7;
m2[1][1] = 0.6;
/* compute the MSE between v1 and v2 */
double mse = mat_distance_mse(v1, v2, 0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_distance_mse -->

<refentry id=man.imat-distance-mse>
  <refmeta>
    <refentrytitle>imat_distance_mse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_distance_mse</refname>
    <refpurpose>mean square error between two images</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>imat_distance_mse</function></funcdef>
        <paramdef> imat m1, imat m2, double rec_value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the mean square error (MSE) between two matrices <parameter>m1</parameter> and  <parameter>m2</parameter>. This error is defined as the average of the square of the difference between each element of <parameter>v1</parameter> and the corresponding element of <parameter>v2</parameter>. If the matrices are not of the same size, the missing elements are assumed to be equal to the value <parameter>rec_value</parameter> when computing the MSE.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The mean square error
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

imat m1 = imat_new(2,2);
imat m2 = imat_new(2,2);
m1[0][0] = 3;
m1[0][1] = 6;
m1[1][0] = 2;
m1[1][1] = 5;
m2[0][0] = 5;
m2[0][1] = 2;
m2[1][0] = 7;
m2[1][1] = 0;
/* compute the MSE between v1 and v2 */
double mse = imat_distance_mse(v1, v2, 0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_distance_norm -->

<refentry id=man.mat-distance-norm>
  <refmeta>
    <refentrytitle>mat_distance_norm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_distance_norm</refname>
    <refpurpose>norm distance between two matrices</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_distance_norm</function></funcdef>
        <paramdef> mat m1, mat m2, double norm
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the distance between the two matrices <parameter>m1</parameter> and <parameter>m2</parameter> corresponding to the norm <parameter>norm</parameter>. This norm is defined as the sum of the absolute differences between elements of <parameter>m1</parameter> and the corresponding elements of <parameter>m2</parameter> raised to the power of <parameter>norm</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The distance derived from the norm
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

mat m1 = mat_new(2,2);
mat m2 = mat_new(2,2);
m1[0][0] = 3.5;
m1[0][1] = 6.8;
m1[1][0] = 2.2;
m1[1][1] = 5.1;
m2[0][0] = 5.5;
m2[0][1] = 2.3;
m2[1][0] = 7.7;
m2[1][1] = 0.6;
/* compute the Euclidean distance between the two matrices */
double distance = mat_distance_norm(m1, m2, 2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_distance_hamming -->

<refentry id=man.vec-distance-hamming>
  <refmeta>
    <refentrytitle>vec_distance_hamming</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_distance_hamming</refname>
    <refpurpose>Hamming distance between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_distance_hamming</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_distance_hamming</function> returns the Hamming distance between two sequences, i.e. the number of positions such that the component of <parameter>v1</parameter> is not equal to the one of <parameter>v2</parameter>. 
The Hamming distance is only defined between two sequences of the same length. In the proposed implementation, the function returns an integer for sequences of different length. This value is computing assuming that the vector <parameter>v1</parameter> is the reference. If the sequences are not of the same length, there are two cases: either the sequence <parameter>v2</parameter> is shorter than the sequence <parameter>v1</parameter>. In that case missing symbols are assumed to be in error. If the sequence <parameter>v2</parameter> is longer, extra-symbols are discarded but do not increase the distance. Hence, if <parameter>v1</parameter> is a prefix of <parameter>v2</parameter>, then this function returns 0.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The Hamming distance
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

vec v1 = vec_new_string("0.5 3.7 0.3 1.6");
vec v2 = vec_new_string("0.5 1.2 0.3 2.2");
/* compute the hamming distance between v1 and v2 */
int distance = vec_distance_hamming(v1, v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_distance_hamming -->

<refentry id=man.ivec-distance-hamming>
  <refmeta>
    <refentrytitle>ivec_distance_hamming</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_distance_hamming</refname>
    <refpurpose>Hamming distance between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_distance_hamming</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_distance_hamming</function> returns the Hamming distance between two sequences, i.e. the number of positions such that the component of <parameter>v1</parameter> is not equal to the one of <parameter>v2</parameter>. 
The Hamming distance is only defined between two sequences of the same length. In the proposed implementation, the function returns an integer for sequences of different length. This value is computed assuming that the vector <parameter>v1</parameter> is the reference. If the sequences are not of the same length, there are two cases: either the sequence <parameter>v2</parameter> is shorter than the sequence <parameter>v1</parameter>. In that case missing symbols are assumed to be in error. If the sequence <parameter>v2</parameter> is longer, extra symbols are discarded but do not increase the distance. Hence, if <parameter>v1</parameter> is a prefix of <parameter>v2</parameter>, then this function returns 0.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The Hamming distance
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

ivec v1 = ivec_new_string("0 3 0 1");
ivec v2 = ivec_new_string("0 1 0 2");
/* compute the hamming distance between v1 and v2 */
int distance = ivec_distance_hamming(v1, v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_distance_hamming -->

<refentry id=man.bvec-distance-hamming>
  <refmeta>
    <refentrytitle>bvec_distance_hamming</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_distance_hamming</refname>
    <refpurpose>Hamming distance between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_distance_hamming</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_distance_hamming</function> returns the Hamming distance between two sequences, i.e. the number of positions such that the component of <parameter>v1</parameter> is not equal to the one of <parameter>v2</parameter>. 
The Hamming distance is only defined between two sequences of the same length. In the proposed implementation, the function returns an integer for sequences of different length. This value is computed assuming that the vector <parameter>v1</parameter> is the reference. If the sequences are not of the same length, there are two cases: either the sequence <parameter>v2</parameter> is shorter than the sequence <parameter>v1</parameter>. In that case missing symbols are assumed to be in error. If the sequence <parameter>v2</parameter> is longer, extra symbols are discarded but do not increase the distance. Hence, if <parameter>v1</parameter> is a prefix of <parameter>v2</parameter>, then this function returns 0.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The Hamming distance
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

bvec v1 = bvec_new_string("0 0 0 1");
bvec v2 = bvec_new_string("0 1 1 0");
/* compute the hamming distance between v1 and v2 */
int distance = bvec_distance_hamming(v1, v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_distance_kullback_leibler -->

<refentry id=man.vec-distance-kullback-leibler>
  <refmeta>
    <refentrytitle>vec_distance_kullback_leibler</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_distance_kullback_leibler</refname>
    <refpurpose>Kullback-Leibler distance</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_distance_kullback_leibler</function></funcdef>
        <paramdef> vec pdf1, vec pdf2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the Kullback-Leibler distance between two discrete distributions <parameter>pdf1</parameter> and <parameter>pdf2</parameter>. As this function is not symmetric, the term "distance" is inappropriate, therefore it is sometimes refered to as "relative entropy". It corresponds to the excess rate needed for coding the source described by <parameter>pdf1</parameter> using the distribution <parameter>pdf2</parameter> instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The Kullback-Leibler distance
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

/* the probability distribution function of the source        */
vec pdf = vec_new_string( "0.6 0.4" );           /* pdf = [ 0.6 0.4 ]        */
/* a uniform p.d.f. */
vec uni = vec_new_set(2, 1.0/2.0);               /* uni = [ 0.5 0.5 ]        */
/* compute the relative entropy */
double r = vec_distance_kullback_leibler( pdf, uni );   /* r = 0.029         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_distance_levenshtein -->

<refentry id=man.ivec-distance-levenshtein>
  <refmeta>
    <refentrytitle>ivec_distance_levenshtein</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_distance_levenshtein</refname>
    <refpurpose>Levenshtein distance between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_distance_levenshtein</function></funcdef>
        <paramdef> ivec v1, ivec v2, int cost_ins, int cost_del, int cost_sub
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_distance_levenshtein</function> returns the Levenshtein distance (also called editing distance) between two sequences, i.e. the number of positions such that the component of <parameter>v1</parameter> is not equal to the one of <parameter>v2</parameter>. 
Note that the complexity of this function is proportionnal to the product of length. If the sequence are of the same order of length, this leads to a computing time which is a quadratic function of the length.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The Levenshtein distance
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

ivec v1 = ivec_new_string("1 2 3");            /* v1 = [ 1 2 3 ]        */
ivec v2 = ivec_new_string("0 1 2 3");          /* v2 = [ 0 2 2 3 ]      */
/* compute the Levenshtein distance between v1 and v3 (deletion+subst. =&gt; 2) */
int distance = ivec_distance_levenshtein(v1, v3, 1, 1, 1);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_distance_mse -->

<refentry id=man.vec-distance-mse>
  <refmeta>
    <refentrytitle>vec_distance_mse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_distance_mse</refname>
    <refpurpose>mean square error between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_distance_mse</function></funcdef>
        <paramdef> vec v1, vec v2, double rec_value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the mean square error (MSE) between two sequences <parameter>v1</parameter> and  <parameter>v2</parameter>. This error is defined as the average of the square of the difference between each element of <parameter>v1</parameter> and the corresponding element of <parameter>v2</parameter>. If the vectors are not of the same length, the shortest vector is padded with the value <parameter>rec_value</parameter> from its end up to the length of the longest vector before computing the MSE.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The mean square error
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

vec v1 = vec_new_string("0.4 1.0 4.3 3.4");
vec v2 = vec_new_string("1.3 5.0 4.4 6.8");
/* compute the MSE between v1 and v2 */
double mse = vec_distance_mse(v1, v2, 0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_distance_mse -->

<refentry id=man.ivec-distance-mse>
  <refmeta>
    <refentrytitle>ivec_distance_mse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_distance_mse</refname>
    <refpurpose>mean square error between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>ivec_distance_mse</function></funcdef>
        <paramdef> ivec v1, ivec v2, double rec_value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the mean square error (MSE) between two sequences <parameter>v1</parameter> and  <parameter>v2</parameter>. This error is defined as the average of the square of the difference between each element of <parameter>v1</parameter> and the corresponding element of <parameter>v2</parameter>. If the vectors are not of the same length, the shortest vector is padded with the value <parameter>rec_value</parameter> from its end up to the length of the longest vector before computing the MSE.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The mean square error
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

ivec v1 = ivec_new_string("0 1 0 3");
ivec v2 = ivec_new_string("1 5 4 6");
/* compute the MSE between v1 and v2 */
double mse = ivec_distance_mse(v1, v2, 0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_distance_norm -->

<refentry id=man.vec-distance-norm>
  <refmeta>
    <refentrytitle>vec_distance_norm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_distance_norm</refname>
    <refpurpose>norm distance between two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_distance_norm</function></funcdef>
        <paramdef> vec v1, vec v2, double norm
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the distance between the two vectors <parameter>v1</parameter> and <parameter>v2</parameter> corresponding to the norm <parameter>norm</parameter>. This norm is defined as the sum of the absolute differences between elements of <parameter>v1</parameter> and the corresponding elements of <parameter>v2</parameter> raised to the power of <parameter>norm</parameter>. The <parameter>norm</parameter> argument is usually set to 2, which corresponds to the classical Euclidean norm.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The distance derived from the norm
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

vec v1 = vec_new_string("6.5 6.2 3.5");
vec v2 = vec_new_string("6.5 6.2 3.5");
/* compute the Euclidean distance between the two vectors */
double distance = vec_distance_norm(v1, v2, 2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_ber -->

<refentry id=man.bvec-ber>
  <refmeta>
    <refentrytitle>bvec_ber</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_ber</refname>
    <refpurpose>bit error rate between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>bvec_ber</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the bit error rate (BER) between two binary sequences <parameter>v1</parameter> and <parameter>v2</parameter>. This corresponds to the Hamming distance between <parameter>v1</parameter> and <parameter>v2</parameter> divided by the length of <parameter>v1</parameter>, which is taken as the reference in case the vectors lengths do not match. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The bit error rate
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

bvec v1 = bvec_new_string("0 1 1 1 0 0");
bvec v2 = bvec_new_string("0 1 1 0 0 0");
/* compute the BER between v1 and v2 */
double ber = bvec_ber(v1, v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_ser -->

<refentry id=man.vec-ser>
  <refmeta>
    <refentrytitle>vec_ser</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_ser</refname>
    <refpurpose>symbol error rate between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_ser</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the symbol error rate (SER) between two sequences <parameter>v1</parameter> and <parameter>v2</parameter>. This corresponds to the Hamming distance between <parameter>v1</parameter> and <parameter>v2</parameter> divided by the length of <parameter>v1</parameter>, which is taken as the reference in case the vectors lengths do not match. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The symbol error rate
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

vec v1 = vec_new_string("1 5 6 6 4");
vec v2 = vec_new_string("2 4 5 6 7");
/* compute the SER between v1 and v2 */
double ser = vec_ser(v1, v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_ser -->

<refentry id=man.ivec-ser>
  <refmeta>
    <refentrytitle>ivec_ser</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_ser</refname>
    <refpurpose>symbol error rate between two sequences</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/distance.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>ivec_ser</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the symbol error rate (SER) between two sequences <parameter>v1</parameter> and <parameter>v2</parameter>. This corresponds to the Hamming distance between <parameter>v1</parameter> and <parameter>v2</parameter> divided by the length of <parameter>v1</parameter>, which is taken as the reference in case the vectors lengths do not match. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The symbol Error Rate
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;distance.h&gt;

...

ivec v1 = ivec_new_string("1 5 6 6 4");
ivec v2 = ivec_new_string("2 4 5 6 7");
/* compute the SER between v1 and v2 */
double ser = ivec_ser(v1, v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_dft -->

<refentry id=man.it-dft>
  <refmeta>
    <refentrytitle>it_dft</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_dft</refname>
    <refpurpose>discrete Fourier transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/fourier.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>it_dft</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the discrete Fourier transform of the complex vector <parameter>v</parameter>. The first element of the returned vector corresponds to the lowest frequency (DC value). For a complex vector <parameter>v</parameter> that is actually a real vector (i.e. when all elements of <parameter>v</parameter> have a null imaginary part), the output vector will be conjugate symmetric, that is V[N-i] = V[i]*, where V is the output vector of length N equal to the length of the input vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of discrete Fourier coefficients
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;fourier.h&gt;

...

cvec v = cvec_new_string("1.0 4.0 1.0 -2.0");
/* analyse the vector using the discrete Fourier transform */
cvec vt = it_dft(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_idft -->

<refentry id=man.it-idft>
  <refmeta>
    <refentrytitle>it_idft</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_idft</refname>
    <refpurpose>inverse discrete Fourier transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/fourier.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>it_idft</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the inverse discrete Fourier transform of the complex vector <parameter>v</parameter>. The first element of this vector corresponds to the lowest frequency (DC value). If <parameter>v</parameter> is conjugate symmetric, that is if v[N-i] = v[i]*, where N is the length of <parameter>v</parameter>, the output will be a real vector (that is, all elements of the complex output vector will have a null imaginary part).  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of the inverse discrete Fourier transform
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;fourier.h&gt;

...

cvec vt = cvec_new_string("1 1+i 0 1-i");
/* reconstruct the vector using the inverse discrete Fourier transform */
cvec v = it_idft(vt);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_fourier_new -->

<refentry id=man.it-fourier-new>
  <refmeta>
    <refentrytitle>it_fourier_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_fourier_new</refname>
    <refpurpose>Fourier transform constructor</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/fourier.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void * <function>it_fourier_new</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>it_fourier_new</function> function creates a new Fourier transform object. This object can later be used as an it_transform_t to perform discrete Fourier transform or inverse Fourier transform on a complex vector using the <function>it_transform</function> or <function>it_itransform</function> method respectively.</para>
<para> Creating this transform object and using the <function>it_transform</function> method is prefered to using <function>it_dft</function> when multiple transform on vectors of the same size are to be done. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new fourier transform object
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;fourier.h&gt;

...

it_fourier_t *fourier = it_fourier_new();
cvec v = cvec_new_string("[ 0.3 1.5 2.5 ]");
cvec vt;
vt = (cvec) it_transform(fourier, (Vec) v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_pgm_read -->

<refentry id=man.mat-pgm-read>
  <refmeta>
    <refentrytitle>mat_pgm_read</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_pgm_read</refname>
    <refpurpose>Read an image (PGM) file as a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_pgm_read</function></funcdef>
        <paramdef> const char* filename
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_pgm_read</function> read the PGM file of type <parameter>5</parameter> whose name is <parameter>filename</parameter> and returns a matrix of double. Since a PGM file store a gray-scaled images, each component of the matrix defines a pixel luminance.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix corresponding to the values of the pixel
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

mat m = mat_pgm_read("image.pgm");  /* read the image      */
mat_transpose(m);                   /* transpose the image */
mat_pgm_write(m, "image.pgm");      /* write the image     */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_pgm_read -->

<refentry id=man.imat-pgm-read>
  <refmeta>
    <refentrytitle>imat_pgm_read</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_pgm_read</refname>
    <refpurpose>Read an image (PGM) file as a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_pgm_read</function></funcdef>
        <paramdef> const char* filename
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_pgm_read</function> read the PGM file of type <parameter>5</parameter> whose name is <parameter>filename</parameter> and returns a matrix of integers. Since a PGM file store a gray-scaled images, each component of the matrix defines a pixel luminance.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix corresponding to the values of the pixel
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

imat m = imat_pgm_read("image.pgm");  /* read the image      */
imat_transpose(m);                    /* transpose the image */
imat_pgm_write(m, "image.pgm");       /* write the image     */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_pgm_write -->

<refentry id=man.mat-pgm-write>
  <refmeta>
    <refentrytitle>mat_pgm_write</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_pgm_write</refname>
    <refpurpose>Write an integer matrix as an image (PGM)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_pgm_write</function></funcdef>
        <paramdef> const char* filename, mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_pgm_write</function> write a matrix into a PGM file.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    1 if the function was able to open the file
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

mat m = mat_pgm_read("image.pgm");  /* read the image      */
mat_transpose(m);                   /* transpose the image */
mat_pgm_write(m, "image.pgm");      /* write the image     */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_pgm_write -->

<refentry id=man.imat-pgm-write>
  <refmeta>
    <refentrytitle>imat_pgm_write</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_pgm_write</refname>
    <refpurpose>Write an integer matrix as an image (PGM)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_pgm_write</function></funcdef>
        <paramdef> const char* filename, imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_pgm_write</function> write a matrix into a PGM file. Hence the matrix is assumed to be an image whose components stands between 0 and 255.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    1 if the function was able to open the file
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

imat m = imat_pgm_read("image.pgm"); /* read the image      */
imat_transpose(m);                   /* transpose the image */
imat_pgm_write(m, "image.pgm");      /* write the image     */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_wav_read -->

<refentry id=man.mat-wav-read>
  <refmeta>
    <refentrytitle>mat_wav_read</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_wav_read</refname>
    <refpurpose>Read a wav file into a multi-channel matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_wav_read</function></funcdef>
        <paramdef> const char* filename
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_wav_read</function> reads a WAV file named <parameter>filename</parameter> and returns a matrix of doubles. Each row of this matrix corresponds to a channel in the WAV file. For example, a mono WAV file will result in a matrix with one row, whereas a stereo WAV file will result in a matrix with two rows. Each row is a vector representing the samples of the sound for each instant. The range used to represent each sample and sampling frequency depend on the actual WAV file and can be retrieved via <function>wav_info</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix containing a row per channel
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

mat m;
m = mat_wav_read("sound.wav");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_wav_read -->

<refentry id=man.imat-wav-read>
  <refmeta>
    <refentrytitle>imat_wav_read</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_wav_read</refname>
    <refpurpose>Read a wav file into a multi-channel matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_wav_read</function></funcdef>
        <paramdef> const char* filename
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_wav_read</function> reads a WAV file named <parameter>filename</parameter> and returns a matrix of integers. Each row of this matrix corresponds to a channel in the WAV file. For example, a mono WAV file will result in a matrix with one row, whereas a stereo WAV file will result in a matrix with two rows. Each row is a vector representing the samples of the sound for each instant. The number of bits used to represent each sample and sampling frequency depend on the actual WAV file and can be retrieved via <function>wav_info</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix containing a row per channel
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

imat m;
m = imat_wav_read("sound.wav");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_wav_write -->

<refentry id=man.mat-wav-write>
  <refmeta>
    <refentrytitle>mat_wav_write</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_wav_write</refname>
    <refpurpose>Write a wav sound file</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_wav_write</function></funcdef>
        <paramdef> const char* filename, mat m, int srate, int depth
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_wav_write</function> writes a WAV file named <parameter>filename</parameter> from a matrix <parameter>m</parameter> representing a multi-channel sound. Each row of this matrix corresponds to a channel in the WAV file. For example, a mono WAV file will be produced froma matrix with one row, whereas a stereo WAV file will be produced from a matrix with two rows. Each row is a vector representing the samples of the sound for each instant. The number of bits used to represent each sample is specified in <parameter>depth</parameter> whereas the sampling frequency is specified in <parameter>srate</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

mat m = mat_new(2, 44100);
int i;
/* create a pure A during 1 sec at 44100Hz in stereo */
for(i = 0; i &lt; 44100; i++) {
  m[0][i] = sin(2*M_PI*440*i / 44100) * 32767; /* channel 0 (left)  */
  m[1][i] = cos(2*M_PI*440*i / 44100) * 32767; /* channel 1 (right) */
}
mat_wav_write(m, "sound.wav", 44100, 16); /* write the sound */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_wav_write -->

<refentry id=man.imat-wav-write>
  <refmeta>
    <refentrytitle>imat_wav_write</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_wav_write</refname>
    <refpurpose>Write a wav sound file</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_wav_write</function></funcdef>
        <paramdef> const char* filename, imat m, int srate, int depth
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_wav_write</function> writes a WAV file named <parameter>filename</parameter> from a matrix <parameter>m</parameter> representing a multi-channel sound. Each row of this matrix corresponds to a channel in the WAV file. For example, a mono WAV file will be produced froma matrix with one row, whereas a stereo WAV file will be produced from a matrix with two rows. Each row is a vector representing the samples of the sound for each instant. The number of bits used to represent each sample is specified in <parameter>depth</parameter> whereas the sampling frequency is specified in <parameter>srate</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

imat m = imat_new(2, 44100);
int i;
/* create a pure A during 1 sec at 44100Hz in stereo */
for(i = 0; i &lt; 44100; i++) {
  m[0][i] = (int) (sin(2*M_PI*440*i / 44100) * 32767); /* channel 0 (left)  */
  m[1][i] = (int) (cos(2*M_PI*440*i / 44100) * 32767); /* channel 1 (right) */
}
imat_wav_write(m, "sound.wav", 44100, 16); /* write the sound */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- pnm_info -->

<refentry id=man.pnm-info>
  <refmeta>
    <refentrytitle>pnm_info</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>pnm_info</refname>
    <refpurpose>Get information from a PNM image file</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>pnm_info</function></funcdef>
        <paramdef> const char * filename, char * p_pnm_type, int * p_width, int * p_height, int * p_max_val, char * comments, int length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function reads the width, height, type, maximum value and comments from a PNM image file specified by <parameter>filename</parameter>. The values of these informations are stored in the corresponding pointers. The <parameter>length</parameter> argument gives the maximum size of the <parameter>comments</parameter> buffer in which the comments are stored.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    0 if the function was unable to open the file, otherwise 0
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

int width, height, maxval, type;
char comment[1000];
pnm_info("image.pgm", &#38;type, &#38;width, &#38;height, &#38;maxval, comments, 1000);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- pnm_type -->

<refentry id=man.pnm-type>
  <refmeta>
    <refentrytitle>pnm_type</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>pnm_type</refname>
    <refpurpose>Type of a pnm file</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char <function>pnm_type</function></funcdef>
        <paramdef> const char * filename
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function the PNM type character from a PNM image file specified by <parameter>filename</parameter>. The only supported filetype by libit is currently type <parameter>5</parameter>. This function can therefore be used to verify a PNM can be read by libit.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The type of the PNM file:
'1' binary image in text format
'2' grayscale image in text format
'3' rgb image in text format
'4' binary image in raw (binary) format
'5' grayscale image in raw format -&gt; the only format supported by libit
'6' rgb image in raw format
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

char type = pnm_type("image.pgm");
if(type != '5')
  it_error("Unsupported type %c in %s", type, "image.pgm");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_error -->

<refentry id=man.it-error>
  <refmeta>
    <refentrytitle>it_error</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_error</refname>
    <refpurpose>print an error</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_error</function></funcdef>
        <paramdef> char *fmt, ...
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function prints an error to the standard error output (stderr) preceded by "## IT Error ##".  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

double v = 3.1415;
it_error("Unexpected value %f", v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_fprintf -->

<refentry id=man.it-fprintf>
  <refmeta>
    <refentrytitle>it_fprintf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_fprintf</refname>
    <refpurpose>formatted output to a stream</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_fprintf</function></funcdef>
        <paramdef> FILE * output, char *fmt, ...
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>it_fprintf</function> extends the standard C <function>fprintf</function> function and provides an output according to the <parameter>format</parameter> string. Being an extension <function>fprintf</function>,
it supports all its types and modifiers. See the <function>it_printf</function> function for details on the extensions. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

ivec v = ivec_new_ones(10); /* a new vector with elements set to 1 */
/* output the vector to the standard error stream */
it_fprintf(stderr, "$d
", v);
ivec_delete(v);             /* free the vector */
cmat m = cmat_new_ones(3,4); /* create a new matrix of complex */
/* output the matrix to the standard error stream */
it_fprintf(stderr, "#z
", m);
cmat_delete(m);              /* free the matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_printf -->

<refentry id=man.it-printf>
  <refmeta>
    <refentrytitle>it_printf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_printf</refname>
    <refpurpose>formatted output</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_printf</function></funcdef>
        <paramdef> char *fmt, ...
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>it_printf</function> extends the standard C <function>printf</function> function and provides an output according to the <parameter>format</parameter> string. Being an extension <function>printf</function>, it supports all its types and modifiers.</para>
<refsect2>
    <title>Additional format string conversion specification</title>
    <para>The following extra escape characters can be using to print a vector or a matrix. To output the actual character instead, it must be doubled in the format string.</para>
    <variablelist>
    <varlistentry>
      <term>$</term>
      <listitem>
      <para>
         The following conversion specifier and modifiers apply to
         the elements of the vector argument.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>#</term>
      <listitem>
      <para>
         The following conversion specifier and modifiers apply to
         the elements of the matrix argument.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>
<refsect2>
    <title>Additional conversion specifier</title>
    <variablelist>
    <varlistentry>
      <term>z</term>
      <listitem>
      <para>
         The <parameter>cplx</parameter> argument is output as "a + b * i"
         where a and b are the real and imaginary part respectively,
         output in floating point decimal notation.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
    <variablelist>
    <varlistentry>
      <term>v</term>
      <listitem>
      <para>
         The <parameter>double</parameter> element in a vector is output in
         floating point decimal notation, with a fixed number of decimals.
         By default this conversion specifier is equivalent to .3f.
         It can be changed with the <function>it_set_vec_default_fmt</function> function.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
    <variablelist>
    <varlistentry>
      <term>m</term>
      <listitem>
      <para>
         The <parameter>double</parameter> element in a matrix is output in
         floating point decimal notation, with a fixed number of decimals.
         By default this conversion specifier is equivalent to 9.3g.
         It can be changed with the <function>it_set_mat_default_fmt</function> function.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

ivec v = ivec_new_ones(10); /* a new vector with elements set to 1 */
it_printf("$d
", v);       /* output the vector */
ivec_delete(v);             /* free the vector */
cmat m = cmat_new_ones(3,4); /* create a new matrix of complex */
it_printf("#z
", m);        /* output the matrix */
cmat_delete(m);              /* free the matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_double -->

<refentry id=man.it-read-double>
  <refmeta>
    <refentrytitle>it_read_double</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_double</refname>
    <refpurpose>read a real value from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_double</function></funcdef>
        <paramdef> char * s, double * p_val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets the real value at the address pointed by <parameter>p_val</parameter> to the one described by the string <parameter>s</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

double f;
it_read_double("5.3", &#38;f); /* f = 5.3 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_int -->

<refentry id=man.it-read-int>
  <refmeta>
    <refentrytitle>it_read_int</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_int</refname>
    <refpurpose>read an integer from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_int</function></funcdef>
        <paramdef> char * s, int * p_val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets the integer at the address pointed by <parameter>p_val</parameter> to the one described by the string <parameter>s</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read in the buffer
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

int d;
it_read_double("5", &#38;d); /* d = 5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_cplx -->

<refentry id=man.it-read-cplx>
  <refmeta>
    <refentrytitle>it_read_cplx</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_cplx</refname>
    <refpurpose>read a complex from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_cplx</function></funcdef>
        <paramdef> char * s, cplx * p_val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets the complex at the address pointed by <parameter>p_val</parameter> to the one described by the string <parameter>s</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read in the buffer
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

cplx z;
it_read_cplx("5.3+4.6*i", &#38;z); /* z = 5.3 + 4.6 * i */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_vec -->

<refentry id=man.it-read-vec>
  <refmeta>
    <refentrytitle>it_read_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_vec</refname>
    <refpurpose>read a real vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_vec</function></funcdef>
        <paramdef> char * s, vec * v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets an existing real vector at the address pointed by <parameter>v</parameter> to the one described by the string <parameter>s</parameter>. This string contains the values of each element of the vector, separated by a space or comma. This list of elements may additionally be enclosed in brackets for increased compatibility with various software.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read in the buffer
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

vec v = vec_new(0);
it_read_vec("[ 4.43, 5 1, -2.5]", &#38;v); /* v = [ 4.43 5 1 -2.5 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_ivec -->

<refentry id=man.it-read-ivec>
  <refmeta>
    <refentrytitle>it_read_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_ivec</refname>
    <refpurpose>read an integer vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_ivec</function></funcdef>
        <paramdef> char * s, ivec * v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets an existing integer vector at the address pointed by <parameter>v</parameter> to the one described by the string <parameter>s</parameter>. This string contains the values of each element of the vector, separated by a space or comma. This list of elements may additionally be enclosed in brackets for increased compatibility with various software.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read in the buffer
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

ivec v = ivec_new(0);
it_read_ivec("[ 4, 5 1, -2]", &#38;v); /* v = [ 4 5 1 -2 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_bvec -->

<refentry id=man.it-read-bvec>
  <refmeta>
    <refentrytitle>it_read_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_bvec</refname>
    <refpurpose>read a byte vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_bvec</function></funcdef>
        <paramdef> char * s, bvec * v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets an existing binary vector at the address pointed by <parameter>v</parameter> to the one described by the string <parameter>s</parameter>. This string contains the values of each element of the vector, separated by a space or comma. This list of elements may additionally be enclosed in brackets for increased compatibility with various software.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read in the buffer
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

bvec v = bvec_new(0);
it_read_bvec("[4 254 2 +4, 2 ]", &#38;v); /* v = [ 4 254 2 4 2 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_read_cvec -->

<refentry id=man.it-read-cvec>
  <refmeta>
    <refentrytitle>it_read_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_read_cvec</refname>
    <refpurpose>read a complex vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>it_read_cvec</function></funcdef>
        <paramdef> char * s, cvec * v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This functions sets an existing complex vector at the address pointed by <parameter>v</parameter> to the one described by the string <parameter>s</parameter>. This string contains the values of each element of the vector, separated by a space or comma. This list of elements may additionally be enclosed in brackets for increased compatibility with various software.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A pointer on the next position of to be read in the buffer
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

cvec v = cvec_new(0);
it_read_cvec("[4+i 5 i, 2.2 ]", &#38;v); /* v = [ 4.0+1.0*i 5.0 i 2.2 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_set_mat_default_fmt -->

<refentry id=man.it-set-mat-default-fmt>
  <refmeta>
    <refentrytitle>it_set_mat_default_fmt</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_set_mat_default_fmt</refname>
    <refpurpose>set the default format string for matrices</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_set_mat_default_fmt</function></funcdef>
        <paramdef> char * fmt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the default format string for matrix row vectors when the formatting character character "m" is used. The default format is initially set to "$9.3lf".  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

mat m = mat_new_ones(2, 2);
it_printf("#m", m);     /* prints [[ 1.000 1.000 ]
                                   [ 1.000 1.000 ] */
it_set_mat_default_fmt("$.6lf");
it_printf("#m", m);     /* prints [[ 1.000000 1.000000 ]
                                   [ 1.000000 1.000000 ]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_set_vec_default_fmt -->

<refentry id=man.it-set-vec-default-fmt>
  <refmeta>
    <refentrytitle>it_set_vec_default_fmt</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_set_vec_default_fmt</refname>
    <refpurpose>set the default format string for vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_set_vec_default_fmt</function></funcdef>
        <paramdef> char * fmt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the default format string for vector elements when the formatting character character "v" is used. The default format is initially set to "%.3lf".  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

vec v = vec_new_ones(2);
it_printf("$v", v);     /* prints [ 1.000 1.000 ] */
it_set_vec_default_fmt("%.6lf");
it_printf("$v", v);     /* prints [ 1.000000 1.000000 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_vfprintf -->

<refentry id=man.it-vfprintf>
  <refmeta>
    <refentrytitle>it_vfprintf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_vfprintf</refname>
    <refpurpose>formatted output to a stream, variable args</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_vfprintf</function></funcdef>
        <paramdef> FILE * output, char *fmt, va_list ap
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>it_vfprintf</function> extends the standard C <function>vfprintf</function> function and provides an output according to the <parameter>format</parameter> string. Being an extension of <function>vfprintf</function>, it supports all its types and modifiers. See the <function>it_printf</function> function for details on the extensions.</para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

void my_it_printf( char *fmt, ... ) {
  va_list ap;
  va_start(ap, fmt);
  it_vfprintf(stdout, fmt, ap);
  va_end(ap);
}
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_vprintf -->

<refentry id=man.it-vprintf>
  <refmeta>
    <refentrytitle>it_vprintf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_vprintf</refname>
    <refpurpose>formatted output, variable args</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_vprintf</function></funcdef>
        <paramdef> char *fmt, va_list args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>it_vprintf</function> extends the standard C <function>vprintf</function> function and provides an output according to the <parameter>format</parameter> string. Being an extension fprintf it supports all its types and modifiers. See the <function>it_printf</function>
function for details on the extensions. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

void my_it_printf( char *fmt, ... ) {
  va_list ap;
  va_start(ap, fmt);
  it_vprintf(fmt, ap);
  va_end(ap);
}
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_warning -->

<refentry id=man.it-warning>
  <refmeta>
    <refentrytitle>it_warning</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_warning</refname>
    <refpurpose>print an warning</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_warning</function></funcdef>
        <paramdef> char *fmt, ...
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function prints an error to the standard error output (stderr) preceded by "## IT Warning ##".  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

double v = 3.1415;
it_warning("Unexpected value %f", v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_string -->

<refentry id=man.vec-new-string>
  <refmeta>
    <refentrytitle>vec_new_string</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_string</refname>
    <refpurpose>Create a vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_string</function></funcdef>
        <paramdef> char * s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_string</function> creates a vector from the string <parameter>s</parameter>. The string is parsed and uses the following characters as element separators: space and comma. 
The function allocates some memory.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

vec v1 = vec_new_string("0 1 2 3");     /* Vector [0 1 2 3] */
vec v2 = vec_new_string("[2,1,2,1]");   /* Vector [2 1 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_string -->

<refentry id=man.ivec-new-string>
  <refmeta>
    <refentrytitle>ivec_new_string</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_string</refname>
    <refpurpose>Create a vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_string</function></funcdef>
        <paramdef> char * s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_string</function> creates a vector from the string <parameter>s</parameter>. The string is parsed and uses the following characters as element separators: space and comma. 
The function allocates some memory.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

ivec v1 = ivec_new_string("0 1 2 3");     /* Vector [0 1 2 3] */
ivec v2 = ivec_new_string("[2,1,2,1]");   /* Vector [2 1 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_string -->

<refentry id=man.bvec-new-string>
  <refmeta>
    <refentrytitle>bvec_new_string</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_string</refname>
    <refpurpose>Create a vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_string</function></funcdef>
        <paramdef> char * s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_new_string</function> creates a vector from the string <parameter>s</parameter>. The string is parsed and uses the following characters as element separators: space and comma. 
The function allocates some memory.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

bvec v1 = bvec_new_string("0 1 2 3");     /* Vector [0 1 2 3] */
bvec v2 = bvec_new_string("[2,1,2,1]");   /* Vector [2 1 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_string -->

<refentry id=man.cvec-new-string>
  <refmeta>
    <refentrytitle>cvec_new_string</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_string</refname>
    <refpurpose>Create a vector from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_string</function></funcdef>
        <paramdef> char * s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_new_string</function> creates a vector from the string <parameter>s</parameter>. The string is parsed and uses the following characters as element separators: space and comma. 
The function allocates some memory. 
Note that the complex numbers must be in a compact form, i.e. they must not contain any space character.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

cvec v1 = cvec_new_string("0 i +2 3");     /* Vector [0 i 2 3]   */
cvec v2 = cvec_new_string("[2,i+2 2,1]");  /* Vector [2 i+2 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- wav_info -->

<refentry id=man.wav-info>
  <refmeta>
    <refentrytitle>wav_info</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>wav_info</refname>
    <refpurpose>Get information from a WAV sound file</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/io.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>wav_info</function></funcdef>
        <paramdef> const char * filename, int * p_channels, int *p_srate, int *p_depth, int *p_length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function reads the length, sampling rate, number of channels and sample bit depth from a WAV sound file specified by <parameter>filename</parameter>. The values of these informations are stored in the corresponding pointers <parameter>p_length</parameter>, <parameter>p_srate</parameter>, <parameter>p_channels</parameter> and <parameter>p_depth</parameter> respectively.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    1 if the function achieved to open the file, otherwise 0
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;io.h&gt;

...

int length, srate, channels, depth;
wav_info("sound.wav", &#38;channels, &#38;srate, &#38;depth, &#38;length);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_det -->

<refentry id=man.mat-det>
  <refmeta>
    <refentrytitle>mat_det</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_det</refname>
    <refpurpose>computes the determinant of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_det</function></funcdef>
        <paramdef> mat a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_det</function> computes the determinant of the matrix <parameter>a</parameter> using LU decomposition. Singular matrices have determinant equal to zero.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    determinant of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat m1 = mat_new( 3, 3 ); 
double d; 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

d = mat_det (m1);        /* d = 29.000000 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_eig -->

<refentry id=man.mat-eig>
  <refmeta>
    <refentrytitle>mat_eig</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_eig</refname>
    <refpurpose>computes eigen decomposition of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>mat_eig</function></funcdef>
        <paramdef> mat a, cmat evec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_eig</function> performs eigen-decomposition of a real matrix <parameter>a</parameter>. Eigenvectors are stored in <parameter>evec</parameter>. Be sure to make proper memory allocation beforehand. Eigenvalues are the output of the function.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    complex vector of eigenvalues
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat m1 = mat_new( 3, 3 ); 
cmat evec = mat_new (3, 3); 
cvec eval; 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

eval = mat_eig ( m1, evec ); 

/*
eval = [10.639722 -1.054185 -2.585537]
evec = 
[[0.439543 0.933471 0.627446]
 [0.569608 -0.346546 -0.631927]
 [0.694513 -0.092396 0.454952]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_eig_sym -->

<refentry id=man.mat-eig-sym>
  <refmeta>
    <refentrytitle>mat_eig_sym</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_eig_sym</refname>
    <refpurpose>computes eigen decomposition of a symmetrix matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_eig_sym</function></funcdef>
        <paramdef> mat a, mat evec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_eig_sym</function> performs eigen-decomposition of a real symmetric matrix <parameter>a</parameter>. Eigenvectors are stored in input matrix <parameter>evec</parameter>. Make sure to make proper memory allocation beforehand. Eigenvalues are output of the function. 

This function is borrowed from the JAMA Java public-domain package. 
See: http://math.nist.gov/javanumerics/jama/  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    vector of eigenvalues
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

m1 = mat_new( 3, 3 ); 
mat evec = mat_new (3, 3);
vec eval; 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 5;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 2;   m1[2][1] = 5;   m1[2][2] = 3; 

eval = mat_eig_sym (a, evec);

/*
eval = [10.639189 -3.715090 0.075900]
evec = 
[[0.469034 0.607644 0.640918]
 [0.677681 -0.712979 0.180026]
 [0.566353 0.349900 -0.746200]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_gs -->

<refentry id=man.mat-gs>
  <refmeta>
    <refentrytitle>mat_gs</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_gs</refname>
    <refpurpose>performs Gram-Schmidt orthogonalization of matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_gs</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_gs</function> performs in-place orthogonalization of the columns of the matrix <parameter>A</parameter> using the Gram-Schmidt algorithm. When possible (i.e. when #rows > #cols), we automatically performs normalization of the columns.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

int j; 
vec v1, v2; 
mat m1 = mat_new( 3, 3 ); 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

mat_gs( m1 ); 

for ( j= 0; j&lt; mat_width(m2); j++ ) {
  v1 = mat_get_col( m1, j ); 
  v2 = mat_get_col( m1, (j+1)%mat_width(m1) ); 

  printf( "&lt;m1(:,%d)|m1(:,%d)&gt;=%e\tnorm(m1(:,%d))=%e\n", j, (j+1)%mat_width(m1), vec_inner_product(v1, v2), j, vec_norm(v1, 2.) );

  vec_delete( v1 );
  vec_delete( v2 );
}


/*

&lt;m2(:,0)|m2(:,1)&gt;=1.776357e-15  norm(m2(:,0))=3.741657e+00
&lt;m2(:,1)|m2(:,2)&gt;=-2.275957e-15 norm(m2(:,1))=3.139609e+00
&lt;m2(:,2)|m2(:,0)&gt;=0.000000e+00  norm(m2(:,2))=2.468644e+00

*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_cholesky -->

<refentry id=man.mat-cholesky>
  <refmeta>
    <refentrytitle>mat_cholesky</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_cholesky</refname>
    <refpurpose>performs in-place Cholesky decomposition</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_cholesky</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_cholesky</function> performs in-place Cholesky decomposition of a symmetric positive-definite (spd) matrix. We do not check whether <parameter>A</parameter> is spd or not. Cholesky decomposition is similar to LU but returns a lower triangular matrix L such that A=LL^t.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat a= mat_new (2,2); 

a[0][0] = 12.;   a[0][1] = 2.; 
a[1][0] = 2.;   a[1][1] = 11.; 

mat_cholesky( a ); /* a=[3.464 0.000 ; 0.577 3.266] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_ls -->

<refentry id=man.mat-ls>
  <refmeta>
    <refentrytitle>mat_ls</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_ls</refname>
    <refpurpose>solves Least-Square system AX=B</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_ls</function></funcdef>
        <paramdef> mat A, mat B
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_ls</function> uses QR decomposition to solve the least-square problem AX=B.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    solution X of LS problem AX=B
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_lu -->

<refentry id=man.mat-lu>
  <refmeta>
    <refentrytitle>mat_lu</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_lu</refname>
    <refpurpose>performs in-place LU decomposition of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_lu</function></funcdef>
        <paramdef> mat A, ivec piv
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_lu</function> performs LU decomposition such that A = LU, L being lower triangular and U being upper triangular. This function is in-place: matrix <parameter>A</parameter> gets overwritten with L and U stored in compact form. We use Doolittle constraint so L is unit lower triangular (it has only ones on the diagonal, which are therefore not stored). Input integer vector <parameter>piv</parameter> must be initialized before calling <function>mat_lu</function>. It is used to store the row permutation matrix in compact form. We return the determinant of the matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    determinant of input matrix
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_inv -->

<refentry id=man.mat-new-inv>
  <refmeta>
    <refentrytitle>mat_new_inv</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_inv</refname>
    <refpurpose>computes the inverse of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_inv</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_inv</function> outputs a newly created matrix containing the inverse of matrix <parameter>m</parameter> when it exists. Otherwise if returns NULL. 

See: <function>mat_inv</function> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    NULL if input matrix is singular, new inverse matrix otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

See: &lt;function&gt;mat_inv&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_inv -->

<refentry id=man.cmat-new-inv>
  <refmeta>
    <refentrytitle>cmat_new_inv</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_inv</refname>
    <refpurpose>computes the inverse of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_inv</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_new_inv</function> is the complex-analogon for <function>mat_new_inv</function>. It has currently the same behaviour as <function>cmat_inv</function> except that it outputs a newly created matrix when possible.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    newly created inverse of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

See: &lt;function&gt;mat_inv&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_norm2 -->

<refentry id=man.mat-norm2>
  <refmeta>
    <refentrytitle>mat_norm2</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_norm2</refname>
    <refpurpose>computes the 2-norm of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_norm2</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_norm2</function> returns the 2-norm of matrix <parameter>A</parameter>. Since it is the value of the largest singular value, we proceed to a SVD.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    2-norm of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat m1 = mat_new( 3, 3 ); 
double n2; 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

n2 = mat_norm2 (m1);      /* n2 = 11.176343 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_inv -->

<refentry id=man.mat-inv>
  <refmeta>
    <refentrytitle>mat_inv</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_inv</refname>
    <refpurpose>computes the inverse of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_inv</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_inv</function> computes the in-place inverse of the matrix <parameter>m</parameter> using LU decomposition. If the matrix is singular, the output is set to NULL, otherwise the output is a pointer to the (modified) input matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    NULL is matrix is singular, non-NULL otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat m1 = mat_new( 3, 3 ); 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

mat_inv (m1); 

/*
m1=
[[   -0.897    -0.034     0.655]
 [    0.310    -0.103    -0.034]
 [    0.172     0.276    -0.241]]
*/

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_inv -->

<refentry id=man.cmat-inv>
  <refmeta>
    <refentrytitle>cmat_inv</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_inv</refname>
    <refpurpose>computes inverse of complex matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_inv</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_inv</function> is the complex-analogon for <function>mat_inv</function>, except that it: 
- returns a void matrix instead of NULL when <parameter>m</parameter> is singular
- does not use complex LU decomposition </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void matrix is input is matrix singular, complex inverse otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

See: &lt;function&gt;mat_inv&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_cond -->

<refentry id=man.mat-cond>
  <refmeta>
    <refentrytitle>mat_cond</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_cond</refname>
    <refpurpose>computes the condition number of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_cond</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_cond</function> returns the condition number of the matrix <parameter>A</parameter>. Since it is the ratio between the two extremal singular values, we therefore proceed to a SVD beforehand.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    condition number of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat m1 = mat_new( 3, 3 ); 
double c; 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

c = mat_cond (m1);         /* c = 13.185340 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_qr -->

<refentry id=man.mat-qr>
  <refmeta>
    <refentrytitle>mat_qr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_qr</refname>
    <refpurpose>performs in-place QR decomposition of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_qr</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_qr</function> performs in-place QR decomposition of the matrix <parameter>A</parameter>. A matrix can be decomposed into A=QR where Q is square and orthogonal and R upper trapezoidal. We output the diagonal of matrix R.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    diagonal elements of matrix R
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_rank -->

<refentry id=man.mat-rank>
  <refmeta>
    <refentrytitle>mat_rank</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_rank</refname>
    <refpurpose>computes the rank of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_rank</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_rank</function> returns the rank of the input matrix <parameter>A</parameter>. To do this, we of course perform a SVD.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the rank of the input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

m1 = mat_new( 3, 3 ); 
int r; 

m1[0][0] = 1;   m1[0][1] = 5;   m1[0][2] = 2; 
m1[1][0] = 2;   m1[1][1] = 3;   m1[1][2] = 5; 
m1[2][0] = 3;   m1[2][1] = 7;   m1[2][2] = 3; 

r = mat_rank (m1);     /* r = 3 */ 
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_solve_mat -->

<refentry id=man.mat-solve-mat>
  <refmeta>
    <refentrytitle>mat_solve_mat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_solve_mat</refname>
    <refpurpose>outputs X such that AX=B</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_solve_mat</function></funcdef>
        <paramdef> mat A, mat B
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function uses LU decomposition to repeatedly solve A*X_i = X_i. The b_i are the columns of matrix <parameter>B</parameter>. The first step of computing LU decomposition is O(n^3), but solving every equation takes O(n^2). The matrix <parameter>A</parameter> must be square. 

See <function>mat_solve_vec</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    matrix X such that AX=B
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat a = mat_new( 2, 2 ); 
mat b = mat_new( 2, 2 );
vec b = vec_new( 2 ); 

a[0][0] = 1; a[0][1] = 3; 
a[1][0] = 5; a[1][1] = 3; 

b[0][0] = 3; b[0][1] = 1; 
b[1][0] = 1; b[1][1] = 3; 

mat x = mat_solve_mat( a, b ); /* x = [-.5 .5 ; 1.666666667 .166666667] */ 
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_solve_vec -->

<refentry id=man.mat-solve-vec>
  <refmeta>
    <refentrytitle>mat_solve_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_solve_vec</refname>
    <refpurpose>returns x such that Ax=b</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_solve_vec</function></funcdef>
        <paramdef> mat A, vec b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function uses LU decomposition to solve Ax=b. It performs dimensions check before proceeding. Matrix <parameter>A</parameter> must be square. LU decomposition takes O(n^3) time. 

See <function>mat_solve_mat</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    vector x such that Ax=b
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat a = mat_new( 2, 2 ); 
vec b = vec_new( 2 ); 

a[0][0] = 1; a[0][1] = 3; 
a[1][0] = 5; a[1][1] = 3; 

b[0] = 3; 
b[1] = 1; 

vec x = mat_solve_vec( a, b ); /* x = [-.5 ; 1.666666667] */ 
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_svd -->

<refentry id=man.mat-svd>
  <refmeta>
    <refentrytitle>mat_svd</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_svd</refname>
    <refpurpose>computes the SVD of the input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_svd</function></funcdef>
        <paramdef> mat M, mat U, mat V
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_svd</function> computes the singular value decomposition of the matrix <parameter>M</parameter>. If singular subspaces are not needed, simply set <parameter>U</parameter> and/or <parameter>V</parameter> to NULL. If <parameter>U</parameter> and/or <parameter>V</parameter> are needed, be sure to make proper memory allocation beforehand. 

This function is borrowed from the JAMA Java puyblic-domain package. 
See: http://math.nist.gov/javanumerics/jama/  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    vector of singular values
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat m = mat_new( 3, 3 ); 
mat u = mat_new( 3, 3 ); 
mat v = mat_new( 3, 3 ); 

vec sv; 

m[0][0] = 1;   m[0][1] = 5;   m[0][2] = 2; 
m[1][0] = 2;   m[1][1] = 3;   m[1][2] = 5; 
m[2][0] = 3;   m[2][1] = 7;   m[2][2] = 3; 

sv = mat_svd (m1, u, v); 

/* 
sv = [11.176 3.061 0.848] 
u =  
[[    0.477     0.338    -0.811]
 [    0.498    -0.865    -0.067]
 [    0.724     0.372     0.581]]
v = 
[[    0.326    -0.090     0.941]
 [    0.801     0.555    -0.224]
 [    0.503    -0.827    -0.253]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_is_symmetric -->

<refentry id=man.mat-is-symmetric>
  <refmeta>
    <refentrytitle>mat_is_symmetric</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_is_symmetric</refname>
    <refpurpose>tests whether input matrix is symmetric or not</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/linalg.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_is_symmetric</function></funcdef>
        <paramdef> mat A
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_is_symmetric</function> returns 1 if <parameter>A</parameter> is symmetric, otherwise it returns 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    1 if symmetric, 0 otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;linalg.h&gt;

...

mat a= mat_new (2,2); 
int s; 

a[0][0] = 12.;   a[0][1] = 2.; 
a[1][0] = 2.;   a[1][1] = 11.; 

s = mat_is_symmetric( a ); /* s = 1 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_add -->

<refentry id=man.mat-add>
  <refmeta>
    <refentrytitle>mat_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_add</refname>
    <refpurpose>add a matrix to another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_add</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <parameter>mat_add</parameter> adds the matrix <parameter>m2</parameter> to <parameter>m1</parameter> and stores the result in <parameter>m1</parameter>. Hence, this function is inplace.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new_ones (2,2);
mat m2 = mat_new_ones (2,2);
mat_add (m1, m2);               /* m1 = [[2 2]  */
                                         [2 2]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_add -->

<refentry id=man.imat-add>
  <refmeta>
    <refentrytitle>imat_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_add</refname>
    <refpurpose>add a matrix to another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_add</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <parameter>imat_add</parameter> adds the matrix <parameter>m2</parameter> to <parameter>m1</parameter> and stores the result in <parameter>m1</parameter>. Hence, this function is inplace.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m1 = imat_new_ones (2,2);
imat m2 = imat_new_ones (2,2);
imat_add (m1, m2);               /* m1 = [[2 2]  */
                                          [2 2]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_apply_function -->

<refentry id=man.mat-apply-function>
  <refmeta>
    <refentrytitle>mat_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_apply_function</refname>
    <refpurpose>Apply a function element-wise to input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_apply_function</function></funcdef>
        <paramdef> mat m, it_function_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_apply_function</function> applies <parameter>function</parameter> to every element of matrix <parameter>m</parameter>, given parameters <parameter>args</parameter> to <parameter>function</parameter>. If no argument shall be given to <parameter>function</parameter>, set <parameter>args</parameter> to NULL.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_apply_function -->

<refentry id=man.imat-apply-function>
  <refmeta>
    <refentrytitle>imat_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_apply_function</refname>
    <refpurpose>apply a function to every element of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_apply_function</function></funcdef>
        <paramdef> imat v, it_ifunction_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_diag -->

<refentry id=man.mat-diag>
  <refmeta>
    <refentrytitle>mat_diag</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_diag</refname>
    <refpurpose>Set a matrix to a diagonal matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_diag</function></funcdef>
        <paramdef> mat m, vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_diag</function> sets a matrix <parameter>m</parameter> to a diagonal matrix, i.e. a matrix whose elements are equals to 0 excepted the diagonal which is defined by the vector parameter <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None, as the function is inplace
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones (2,2);   /* m = [[1 1]  */
                              /*      [1 1]  */

vec d = vec_new_set (3,2);    /* d = [2 2]   */

mat_diag (m, v);              /* m = [[3 0]  */
                              /*      [0 3]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_diag -->

<refentry id=man.imat-diag>
  <refmeta>
    <refentrytitle>imat_diag</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_diag</refname>
    <refpurpose>Set a matrix to a diagonal matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_diag</function></funcdef>
        <paramdef> imat m, ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_diag</function> sets a matrix <parameter>m</parameter> to a diagonal matrix, i.e. a matrix whose elements are equals to 0 excepted the diagonal which is defined by the vector parameter <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None, as the function is inplace
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones (2,2); /* m = [[1 1]  */
                              /*      [1 1]  */

ivec d = ivec_new_set (3,2);  /* d = [2 2]   */

imat_diag (m, v);             /* m = [[3 0]  */
                              /*      [0 3]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_diag -->

<refentry id=man.bmat-diag>
  <refmeta>
    <refentrytitle>bmat_diag</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_diag</refname>
    <refpurpose>Set a matrix to a diagonal matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_diag</function></funcdef>
        <paramdef> bmat m, bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_diag</function> sets a matrix <parameter>m</parameter> to a diagonal matrix, i.e. a matrix whose elements are equals to 0 excepted the diagonal which is defined by the vector parameter <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None, as the function is inplace
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_ones (2,2);  * m = [[1 1]  */
                              /*      [1 1]  */

bvec d = bvec_new_set (3,2);  /* d = [2 2]   */

bmat_diag (m, v);             /* m = [[3 0]  */
                              /*      [0 3]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_delete -->

<refentry id=man.-mat-delete>
  <refmeta>
    <refentrytitle>Mat_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_delete</refname>
    <refpurpose>Free a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>Mat_delete</function></funcdef>
        <paramdef> Mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>Mat_delete</function> frees the memory associated to the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_delete -->

<refentry id=man.mat-delete>
  <refmeta>
    <refentrytitle>mat_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_delete</refname>
    <refpurpose>Free a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_delete</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_delete</function> frees the memory associated to the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (3,3); 

mat_delete (m);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_delete -->

<refentry id=man.imat-delete>
  <refmeta>
    <refentrytitle>imat_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_delete</refname>
    <refpurpose>Free a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_delete</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_delete</function> frees the memory associated to the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new (3,3);

imat_delete (m);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_delete -->

<refentry id=man.bmat-delete>
  <refmeta>
    <refentrytitle>bmat_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_delete</refname>
    <refpurpose>Free a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_delete</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_delete</function> frees the memory associated to the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_zeros (3,3);

bmat_delete (m);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_delete -->

<refentry id=man.cmat-delete>
  <refmeta>
    <refentrytitle>cmat_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_delete</refname>
    <refpurpose>Free a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_delete</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_delete</function> frees the memory associated to the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_zeros (3,3);

cmat_delete (m);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_decr -->

<refentry id=man.mat-decr>
  <refmeta>
    <refentrytitle>mat_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_decr</refname>
    <refpurpose>Decrease the elements of a matrix by a constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_decr</function></funcdef>
        <paramdef> mat m, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_decr</function> substracts the value <parameter>a</parameter> from every element of <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_zeros (2,2); 

mat_decr (m,2.);

/*
m = 
[[ -2   -2 ]
 [ -2   -2 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_decr -->

<refentry id=man.imat-decr>
  <refmeta>
    <refentrytitle>imat_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_decr</refname>
    <refpurpose>Decrease the elements of a matrix by a constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_decr</function></funcdef>
        <paramdef> imat m, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_decr</function> substracts the value <parameter>a</parameter> from every element of <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_zeros (2,2);

imat_decr (m,-2);

/*
m = 
[[ 2   2 ]
 [ 2   2 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_div_by -->

<refentry id=man.mat-div-by>
  <refmeta>
    <refentrytitle>mat_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_div_by</refname>
    <refpurpose>Divide elements of input matrix by some value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_div_by</function></funcdef>
        <paramdef> mat m, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_div_by</function> divides every elements of <parameter>m</parameter> by <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2);

mat_set (m,2.); 

mat_div_by (m,2.);

/*
m = 
[[ 1   1 ]
 [ 1   1 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_div_by -->

<refentry id=man.imat-div-by>
  <refmeta>
    <refentrytitle>imat_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_div_by</refname>
    <refpurpose>Divide elements of input matrix by some value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_div_by</function></funcdef>
        <paramdef> imat m, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_div_by</function> divides every elements of <parameter>m</parameter> by <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_div_by&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_elem_add -->

<refentry id=man.mat-elem-add>
  <refmeta>
    <refentrytitle>mat_elem_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_elem_add</refname>
    <refpurpose>Performs matrix addition</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_elem_add</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_elem_add</function> adds every elements of <parameter>m2</parameter> to the corresponding elements of <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new_zeros (2,2);
mat m2 = mat_new (2,2);

mat_set (m2,3.); 

mat_elem_add (m1,m2); 

/*
m1 = 
[[ 3   3 ]
 [ 3   3 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_elem_add -->

<refentry id=man.imat-elem-add>
  <refmeta>
    <refentrytitle>imat_elem_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_elem_add</refname>
    <refpurpose>Performs matrix addition</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_elem_add</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_elem_add</function> adds two matrices and stores the result in the <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_elem_add&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_elem_div -->

<refentry id=man.mat-elem-div>
  <refmeta>
    <refentrytitle>mat_elem_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_elem_div</refname>
    <refpurpose>Performs element-wise matrix division</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_elem_div</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_elem_div</function> divides element (i,j) of <parameter>m1</parameter> by element (i,j) of <parameter>m2</parameter> and stores the result in <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new(2,2);
mat m2; 

m1[0][0] = 1.; m1[0][1] = 3.;
m1[1][0] = 2.; m1[1][1] = 4.; 

m2 = mat_clone (m1); 

mat_elem_div (m1,m2); 

/*
m1 = 
[[ 1   1 ]
 [ 1   1 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_elem_div -->

<refentry id=man.imat-elem-div>
  <refmeta>
    <refentrytitle>imat_elem_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_elem_div</refname>
    <refpurpose>Performs element-wise matrix division</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_elem_div</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_elem_div</function> divides element (i,j) of <parameter>m1</parameter> by element (i,j) of <parameter>m2</parameter> and stores the result in <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_elem_div&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_elem_mul -->

<refentry id=man.mat-elem-mul>
  <refmeta>
    <refentrytitle>mat_elem_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_elem_mul</refname>
    <refpurpose>Performs element-wise matrix multiplication</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_elem_mul</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_elem_mul</function> multiplies element (i,j) of <parameter>m1</parameter> by element (i,j) of <parameter>m2</parameter> and stores the result in <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new(2,2);
mat m2; 

m1[0][0] = 1.; m1[0][1] = 3.;
m1[1][0] = 2.; m1[1][1] = 4.; 

m2 = mat_clone (m1); 

mat_elem_div (m1,m2); 

/*
m1 = 
[[ 1   9 ]
 [ 4   16 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_elem_mul -->

<refentry id=man.imat-elem-mul>
  <refmeta>
    <refentrytitle>imat_elem_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_elem_mul</refname>
    <refpurpose>Performs element-wise matrix multiplication</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_elem_mul</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_elem_mul</function> multiplies element (i,j) of <parameter>m1</parameter> by element (i,j) of <parameter>m2</parameter> and stores the result in <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_elem_mul&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_elem_sub -->

<refentry id=man.mat-elem-sub>
  <refmeta>
    <refentrytitle>mat_elem_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_elem_sub</refname>
    <refpurpose>Performs element-wise matrix substraction</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_elem_sub</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_elem_sub</function> substracts element (i,j) of <parameter>m2</parameter> from element (i,j) of <parameter>m1</parameter> and stores the result in <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new(2,2);
mat m2; 

m1[0][0] = 1.; m1[0][1] = 3.;
m1[1][0] = 2.; m1[1][1] = 4.; 

m2 = mat_clone (m1); 

mat_elem_div (m1,m2); 

/*
m1 = 
[[ 0   0 ]
 [ 0   0 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_elem_sub -->

<refentry id=man.imat-elem-sub>
  <refmeta>
    <refentrytitle>imat_elem_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_elem_sub</refname>
    <refpurpose>Performs element-wise matrix substraction</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_elem_sub</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_elem_sub</function> substracts element (i,j) of <parameter>m2</parameter> from element (i,j) of <parameter>m1</parameter> and stores the result in <parameter>m1</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_elem_sub&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_eq -->

<refentry id=man.mat-eq>
  <refmeta>
    <refentrytitle>mat_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_eq</refname>
    <refpurpose>Test matrices for equality</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_eq</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_eq</function> tests if <parameter>m1</parameter> and <parameter>m2</parameter> are equal and return a non-zero integer if <parameter>m1</parameter>==<parameter>m2</parameter>, or zero otherwise.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Zero if 'm1'!='m2', a non-zero integer otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1, m2;
m1 = mat_new_zeros(2,2);
m2 = mat_new_ones(2,2);
if(mat_eq(m1, m2))
  printf("the matrices are equal");
else
  printf("the matrices are not equal");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_eq -->

<refentry id=man.imat-eq>
  <refmeta>
    <refentrytitle>imat_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_eq</refname>
    <refpurpose>Test matrices for equality</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_eq</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_eq</function> tests if <parameter>m1</parameter> and <parameter>m2</parameter> are equal and return a non-zero integer if <parameter>m1</parameter>==<parameter>m2</parameter>, or zero otherwise.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Zero if 'm1'!='m2' or a non-zero integer otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m1, m2;
m1 = imat_new_zeros(2,2);
m2 = imat_new_ones(2,2);
if(imat_eq(m1, m2))
  printf("the matrices are equal");
else
  printf("the matrices are not equal");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_eq -->

<refentry id=man.bmat-eq>
  <refmeta>
    <refentrytitle>bmat_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_eq</refname>
    <refpurpose>Test matrices for equality</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bmat_eq</function></funcdef>
        <paramdef> bmat m1, bmat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_eq</function> tests if <parameter>m1</parameter> and <parameter>m2</parameter> are equal and return a non-zero integer if <parameter>m1</parameter>==<parameter>m2</parameter>, or zero otherwise.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Zero if 'm1'!='m2', or a non-zero integer otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m1, m2;
m1 = bmat_new_zeros(2,2);
m2 = bmat_new_ones(2,2);
if(bmat_eq(m1, m2))
  printf("the matrices are equal");
else
  printf("the matrices are not equal");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_eq -->

<refentry id=man.cmat-eq>
  <refmeta>
    <refentrytitle>cmat_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_eq</refname>
    <refpurpose>Test matrices for equality</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cmat_eq</function></funcdef>
        <paramdef> cmat m1, cmat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_eq</function> tests if <parameter>m1</parameter> and <parameter>m2</parameter> are equal and return a non-zero integer if <parameter>m1</parameter>==<parameter>m2</parameter>, or zero otherwise.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Zero if 'm1'!='m2', or a non-zero integer otherwise
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m1, m2;
m1 = cmat_new_zeros(2,2);
m2 = cmat_new_ones(2,2);
if(cmat_eq(m1, m2))
  printf("the matrices are equal");
else
  printf("the matrices are not equal");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_eye -->

<refentry id=man.mat-eye>
  <refmeta>
    <refentrytitle>mat_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_eye</refname>
    <refpurpose>Set a matrix to identity</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_eye</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_eye</function> set the matrix <parameter>m</parameter> to the identity matrix. Note that this function may also work if the matrix <parameter>m</parameter> is not square. In that case the diagonal starting from the top left element of the matrix is set to 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_zeros(3,5); /* Matrix [[0 0 0 0 0]
                                       [0 0 0 0 0]
                                       [0 0 0 0 0]] */
mat_eye(m);                 /* m =    [[1 0 0 0 0]
                                       [0 1 0 0 0]
                                       [0 0 1 0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_eye -->

<refentry id=man.imat-eye>
  <refmeta>
    <refentrytitle>imat_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_eye</refname>
    <refpurpose>Set a matrix to identity</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_eye</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_eye</function> set the matrix <parameter>m</parameter> to the identity matrix. Note that this function may also work if the matrix <parameter>m</parameter> is not square. In that case the diagonal starting from the top left element of the matrix is set to 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_zeros(3,5); /* Matrix [[0 0 0 0 0]
                                         [0 0 0 0 0]
                                         [0 0 0 0 0]] */
imat_eye(m);                  /* m =    [[1 0 0 0 0]
                                         [0 1 0 0 0]
                                         [0 0 1 0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_eye -->

<refentry id=man.bmat-eye>
  <refmeta>
    <refentrytitle>bmat_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_eye</refname>
    <refpurpose>Set a matrix to identity</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_eye</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_eye</function> set the matrix <parameter>m</parameter> to the identity matrix. Note that this function may also work if the matrix <parameter>m</parameter> is not square. In that case the diagonal starting from the top left element of the matrix is set to 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_zeros(3,5); /* Matrix [[0 0 0 0 0]
                                         [0 0 0 0 0]
                                         [0 0 0 0 0]] */
bmat_eye(m);                  /* m =    [[1 0 0 0 0]
                                         [0 1 0 0 0]
                                         [0 0 1 0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_eye -->

<refentry id=man.cmat-eye>
  <refmeta>
    <refentrytitle>cmat_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_eye</refname>
    <refpurpose>Set a matrix to identity</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_eye</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_eye</function> set the matrix <parameter>m</parameter> to the identity matrix. Note that this function may also work if the matrix <parameter>m</parameter> is not square. In that case the diagonal starting from the top left element of the matrix is set to 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_zeros(3,5); /* Matrix [[0 0 0 0 0]
                                         [0 0 0 0 0]
                                         [0 0 0 0 0]] */
cmat_eye(m);                  /* m =    [[1 0 0 0 0]
                                         [0 1 0 0 0]
                                         [0 0 1 0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_get_col -->

<refentry id=man.mat-get-col>
  <refmeta>
    <refentrytitle>mat_get_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_get_col</refname>
    <refpurpose>Get new vector from given column of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_get_col</function></funcdef>
        <paramdef> mat m, idx_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_get_col</function> returns a new vector containing the elements of column number <parameter>c</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Specified column as a vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 
vec c1; 

m[0][0] = 1; m[0][1] = 3;
m[1][0] = 2; m[1][1] = 4;

c1 = mat_get_col (m,1);     /* c1 = [ 1  2 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_get_col -->

<refentry id=man.imat-get-col>
  <refmeta>
    <refentrytitle>imat_get_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_get_col</refname>
    <refpurpose>Get new vector from given column of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>imat_get_col</function></funcdef>
        <paramdef> imat m, idx_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_get_col</function> returns a new vector containing elements of column <parameter>c</parameter> of matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector corresponding to the desired column
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_col&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_get_col -->

<refentry id=man.bmat-get-col>
  <refmeta>
    <refentrytitle>bmat_get_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_get_col</refname>
    <refpurpose>Get new vector from given column of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bmat_get_col</function></funcdef>
        <paramdef> bmat m, idx_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_get_col</function> creates a new vector containing elements of column <parameter>c</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Desired column as a new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_col&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_get_col -->

<refentry id=man.cmat-get-col>
  <refmeta>
    <refentrytitle>cmat_get_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_get_col</refname>
    <refpurpose>Get new vector from given column of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cmat_get_col</function></funcdef>
        <paramdef> cmat m, idx_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_get_col</function> creates a new vectors containing the elements of column <parameter>c</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new vector corresponding to the desired column of the matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_col&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_get_row -->

<refentry id=man.mat-get-row>
  <refmeta>
    <refentrytitle>mat_get_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_get_row</refname>
    <refpurpose>Get new vector from given row of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_get_row</function></funcdef>
        <paramdef> mat m, idx_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_get_row</function> creates a new vector containing the element of row <parameter>r</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The desired row as a new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 
vec r1; 

m[0][0] = 1; m[0][1] = 3;
m[1][0] = 2; m[1][1] = 4;

r1 = mat_get_row (m,1);     /* r1 = [ 1  3 ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_get_row -->

<refentry id=man.imat-get-row>
  <refmeta>
    <refentrytitle>imat_get_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_get_row</refname>
    <refpurpose>Get new vector from given row of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>imat_get_row</function></funcdef>
        <paramdef> imat m, idx_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_get_row</function> creates a new vector containing the elements of row <parameter>r</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector which is a copy of the desired row
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_row&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_get_row -->

<refentry id=man.bmat-get-row>
  <refmeta>
    <refentrytitle>bmat_get_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_get_row</refname>
    <refpurpose>Get new vector from given row of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bmat_get_row</function></funcdef>
        <paramdef> bmat m, idx_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_get_row</function> creates a new vector containing the elements of row <parameter>r</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new vector containing desired row
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_row&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_get_row -->

<refentry id=man.cmat-get-row>
  <refmeta>
    <refentrytitle>cmat_get_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_get_row</refname>
    <refpurpose>Get new vector from given row of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cmat_get_row</function></funcdef>
        <paramdef> cmat m, idx_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_get_row</function> creates a new vector containing elements of row <parameter>r</parameter> of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector corresponding to the desired row of the matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_row&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_get_submatrix -->

<refentry id=man.mat-get-submatrix>
  <refmeta>
    <refentrytitle>mat_get_submatrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_get_submatrix</refname>
    <refpurpose>Extract submatrix from input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_get_submatrix</function></funcdef>
        <paramdef> mat m, idx_t r1, idx_t c1, idx_t r2, idx_t c2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_get_submatrix</function> creates a new matrix containing elements of <parameter>m</parameter> in range [<parameter>r1</parameter>,<parameter>c1</parameter>]x[<parameter>r2</parameter>,<parameter>c2</parameter>].  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Desired submatrix from input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (3,3); 
mat s; 

m[0][0] = 1; m[1][1] = 4; m[2][2] = 7; 
m[0][0] = 2; m[1][1] = 5; m[2][2] = 8; 
m[0][0] = 3; m[1][1] = 6; m[2][2] = 9; 

s = mat_get_submatrix (m,1,2,2,2); 

/*
s = 
[[ 8 ]
 [ 9 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_get_submatrix -->

<refentry id=man.imat-get-submatrix>
  <refmeta>
    <refentrytitle>imat_get_submatrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_get_submatrix</refname>
    <refpurpose>Extract submatrix from input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_get_submatrix</function></funcdef>
        <paramdef> imat m, idx_t r1, idx_t c1, idx_t r2, idx_t c2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_get_submatrix</function> creates a new matrix containing elements of <parameter>m</parameter> in range [<parameter>r1</parameter>,<parameter>c1</parameter>]x[<parameter>r2</parameter>,<parameter>c2</parameter>].  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Desired submatrix from input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_submatrix&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_get_submatrix -->

<refentry id=man.bmat-get-submatrix>
  <refmeta>
    <refentrytitle>bmat_get_submatrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_get_submatrix</refname>
    <refpurpose>Extract submatrix from input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_get_submatrix</function></funcdef>
        <paramdef> bmat m, idx_t r1, idx_t c1, idx_t r2, idx_t c2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_get_submatrix</function> creates a new matrix containing elements of <parameter>m</parameter> in range [<parameter>r1</parameter>,<parameter>c1</parameter>]x[<parameter>r2</parameter>,<parameter>c2</parameter>].  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Desired submatrix from input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_get_submatrix&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_height -->

<refentry id=man.mat-height>
  <refmeta>
    <refentrytitle>mat_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_height</refname>
    <refpurpose>get the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_height</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the height of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new(5, 7);
int h = mat_height(m); /* h = 5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_height -->

<refentry id=man.imat-height>
  <refmeta>
    <refentrytitle>imat_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_height</refname>
    <refpurpose>get the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_height</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the height of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new(5, 7);
int h  = imat_height(m); /* h = 5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_height -->

<refentry id=man.bmat-height>
  <refmeta>
    <refentrytitle>bmat_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_height</refname>
    <refpurpose>get the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bmat_height</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the height of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new(5, 7);
int h  = bmat_height(m); /* h = 5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_height -->

<refentry id=man.cmat-height>
  <refmeta>
    <refentrytitle>cmat_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_height</refname>
    <refpurpose>Get the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cmat_height</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the height of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new(5, 7);
int h  = cmat_height(m); /* h = 5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_height -->

<refentry id=man.-mat-height>
  <refmeta>
    <refentrytitle>Mat_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_height</refname>
    <refpurpose>Get the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>Mat_height</function></funcdef>
        <paramdef> Mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the height of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

Mat m = Mat_new(float, 5, 7);
int h = Mat_height(m); /* h = 5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_height_max -->

<refentry id=man.mat-height-max>
  <refmeta>
    <refentrytitle>mat_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_height_max</refname>
    <refpurpose>Get current maximum height of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_height_max</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_height_max</function> returns the maximum height of a matrix. By maximum height, it means the height to which the matrix can be set without calling a free/malloc function.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Current maximum height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (123,123);

int hmax = mat_height_max (m);  /* hmax = 123 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_height_max -->

<refentry id=man.imat-height-max>
  <refmeta>
    <refentrytitle>imat_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_height_max</refname>
    <refpurpose>Get current maximum height of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_height_max</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_height_max</function> returns the maximum height of a matrix. By maximum height, it means the height to which the matrix can be set without calling a free/malloc function.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Current maximum height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_height_max&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_height_max -->

<refentry id=man.bmat-height-max>
  <refmeta>
    <refentrytitle>bmat_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_height_max</refname>
    <refpurpose>Get current maximum height of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bmat_height_max</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_height_max</function> returns the maximum height of a matrix. By maximum height, it means the height to which the matrix can be set without calling a free/malloc function.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Current maximum height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_height_max&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_height_max -->

<refentry id=man.cmat-height-max>
  <refmeta>
    <refentrytitle>cmat_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_height_max</refname>
    <refpurpose>Get current maximum height of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cmat_height_max</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_height_max</function> returns the maximum height of a matrix. By maximum height, it means the height to which the matrix can be set without calling a free/malloc function.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Current maximum height of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_height_max&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_clone -->

<refentry id=man.mat-clone>
  <refmeta>
    <refentrytitle>mat_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_clone</refname>
    <refpurpose>Creates a new matrix with elements of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_clone</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_clone</function> creates a new matrix with same dimensions as <parameter>m</parameter> and copies elements of <parameter>m</parameter> in the newly created matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Cloned matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new_zeros (2,2); 
mat m2 = mat_clone (2,2); 

/*
m2 = 
[[ 0  0 ]
 [ 0  0 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_clone -->

<refentry id=man.imat-clone>
  <refmeta>
    <refentrytitle>imat_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_clone</refname>
    <refpurpose>Creates a new matrix with elements of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_clone</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_clone</function> creates a new matrix with same dimensions as <parameter>m</parameter> and copies elements of <parameter>m</parameter> in the newly created matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Cloned matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_clone&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_clone -->

<refentry id=man.bmat-clone>
  <refmeta>
    <refentrytitle>bmat_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_clone</refname>
    <refpurpose>Creates a new matrix with elements of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_clone</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_clone</function> creates a new matrix with same dimensions as <parameter>m</parameter> and copies elements of <parameter>m</parameter> in the newly created matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Cloned matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m1 = bmat_new_ones(5,5);
bmat m2 = bmat_clone(m2);        /* m2 is a copy of m1 */
m2[3][1] = 2;                    /* Now, m2 is different from m1 */

...

bmat_delete(m1);
bmat_delete(m2);                 /* A cloned matrix has to be free separately */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_clone -->

<refentry id=man.cmat-clone>
  <refmeta>
    <refentrytitle>cmat_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_clone</refname>
    <refpurpose>Creates a new matrix with elements of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_clone</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_clone</function> creates a new matrix with same dimensions as <parameter>m</parameter> and copies elements of <parameter>m</parameter> in the newly created matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Cloned matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_clone&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_max -->

<refentry id=man.mat-max>
  <refmeta>
    <refentrytitle>mat_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_max</refname>
    <refpurpose>Return the maximum value of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_max</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_max</function> returns the maximum value of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Maximum value of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 
double mx; 

m[0][0] = 1.; m[0][1] = 3.;
m[1][0] = 2.; m[1][1] = 4.;

mx = mat_max (m);       /* mx = 4. */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_max -->

<refentry id=man.imat-max>
  <refmeta>
    <refentrytitle>imat_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_max</refname>
    <refpurpose>Return the maximum value of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_max</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_max</function> returns the maximum value of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Maximum value of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_mean -->

<refentry id=man.mat-mean>
  <refmeta>
    <refentrytitle>mat_mean</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_mean</refname>
    <refpurpose>Returns the mean of the input matrix elements</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_mean</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mean</function> returns the arithmetic mean of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Arithmetic mean of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 
double mm; 

m[0][0] = 1.; m[0][1] = 3.; 
m[1][0] = 2.; m[1][1] = 4.; 

mm = mat_mean (m);     /* mm = 2.5 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_mean -->

<refentry id=man.imat-mean>
  <refmeta>
    <refentrytitle>imat_mean</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_mean</refname>
    <refpurpose>Returns the mean of the input matrix elements</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>imat_mean</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mean</function> returns the arithmetic mean of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Arithmetic mean of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_mean&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_mean -->

<refentry id=man.cmat-mean>
  <refmeta>
    <refentrytitle>cmat_mean</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_mean</refname>
    <refpurpose>Returns the mean of the input matrix elements</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cmat_mean</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mean</function> returns the arithmetic mean of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Arithmetic mean of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_mean&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_min -->

<refentry id=man.mat-min>
  <refmeta>
    <refentrytitle>mat_min</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_min</refname>
    <refpurpose>Return the minimum value of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_min</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_min</function> returns the minimum value of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Minimum value of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_string ("[[2 1][-1 5]]");
double min = mat_min (m);                      /* min = -1 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_min -->

<refentry id=man.imat-min>
  <refmeta>
    <refentrytitle>imat_min</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_min</refname>
    <refpurpose>Return the minimum value of input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_min</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_min</function> returns the minimum value of matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Minimum value of input matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_string ("[[2 1][-1 5]]");
int min = imat_min (m);                      /* min = -1 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_mul -->

<refentry id=man.mat-mul>
  <refmeta>
    <refentrytitle>mat_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_mul</refname>
    <refpurpose>matrix multiplication with memory allocation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_mul</function></funcdef>
        <paramdef> mat out, mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mul</function> multiplies the matrix <parameter>m1</parameter> by the matrix <parameter>m2</parameter> and stores the results in the matrix <parameter>out</parameter>. Note that this latter should be previously allocated and have the proper size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_mul_transpose_left -->

<refentry id=man.mat-mul-transpose-left>
  <refmeta>
    <refentrytitle>mat_mul_transpose_left</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_mul_transpose_left</refname>
    <refpurpose>matrix multiplication with memory allocation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_mul_transpose_left</function></funcdef>
        <paramdef> mat out, mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mul_transpose_left</function> transpose the matrix <parameter>m1</parameter> and multplies it by the matrix <parameter>m2</parameter> and stores the results in the matrix <parameter>out</parameter>. Note that this latter should be previously allocated and have the proper size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_mul_transpose_leftright -->

<refentry id=man.mat-mul-transpose-leftright>
  <refmeta>
    <refentrytitle>mat_mul_transpose_leftright</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_mul_transpose_leftright</refname>
    <refpurpose>matrix multiplication with memory allocation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_mul_transpose_leftright</function></funcdef>
        <paramdef> mat out, mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mul_transpose_right</function> multiplies the matrix <parameter>m1</parameter> by the transposition of the matrix <parameter>m2</parameter> and stores the results in the matrix <parameter>out</parameter>. Note that this latter should be previously allocated and have the proper size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_mul_transpose_right -->

<refentry id=man.mat-mul-transpose-right>
  <refmeta>
    <refentrytitle>mat_mul_transpose_right</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_mul_transpose_right</refname>
    <refpurpose>matrix multiplication with memory allocation</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_mul_transpose_right</function></funcdef>
        <paramdef> mat out, mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mul_transpose_leftright</function> transposes the matrix <parameter>m1</parameter> and multiplies it by the tranposed matrix <parameter>m2</parameter>. The result is stored in the matrix <parameter>out</parameter>. Note that this latter should be previously allocated and have the proper size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_mul_by -->

<refentry id=man.mat-mul-by>
  <refmeta>
    <refentrytitle>mat_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_mul_by</refname>
    <refpurpose>Performs element-wise matrix multiplication</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_mul_by</function></funcdef>
        <paramdef> mat m, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_mul_by</function> multiplies every element of matrix <parameter>m</parameter> by value <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 

m[0][0] = 1; m[0][1] = 3; 
m[1][0] = 2; m[1][1] = 4; 

mat_mul_by (m,2.); 

/*
m = 
[[ 2   6 ]
 [ 4   8 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_mul_by -->

<refentry id=man.imat-mul-by>
  <refmeta>
    <refentrytitle>imat_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_mul_by</refname>
    <refpurpose>Performs element-wise matrix multiplication</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_mul_by</function></funcdef>
        <paramdef> imat m, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_mul_by</function> multiplies all the values of the matrix <parameter>m</parameter> by the same factor <parameter>a</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_mul_by&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_new -->

<refentry id=man.-mat-new>
  <refmeta>
    <refentrytitle>Mat_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_new</refname>
    <refpurpose>create a new matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Mat <function>Mat_new</function></funcdef>
        <paramdef> size_t elem_size, size_t h, size_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>Mat_new</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of type <parameter>type_t</parameter>, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. See also the specialized functions <function>mat_new</function>, <function>cmat_new</function>, <function>imat_new</function>, and <function>bmat_new</function> which are defined for the most common use of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new -->

<refentry id=man.mat-new>
  <refmeta>
    <refentrytitle>mat_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new</refname>
    <refpurpose>Create a new matrix of doubles</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>mat_new</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of double, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. New matrix elements have indetermined value.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Newly created maxtrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 

mat_zeros (m); 

/*
m = 
[[ 0   0 ]
 [ 0   0 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new -->

<refentry id=man.imat-new>
  <refmeta>
    <refentrytitle>imat_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new</refname>
    <refpurpose>create a new matrix of integers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>imat_new</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of integers, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. New matrix elements have indetermined value.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Newly created maxtrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_new&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new -->

<refentry id=man.bmat-new>
  <refmeta>
    <refentrytitle>bmat_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new</refname>
    <refpurpose>Create a new matrix of bits</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bmat_new</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bits, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. New matrix elements have indetermined value.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Newly created maxtrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_new&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new -->

<refentry id=man.cmat-new>
  <refmeta>
    <refentrytitle>cmat_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new</refname>
    <refpurpose>Create a new matrix of complexes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cmat_new</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of complex, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. New matrix elements have indetermined value.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Newly created maxtrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_new&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_new_alloc -->

<refentry id=man.-mat-new-alloc>
  <refmeta>
    <refentrytitle>Mat_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_new_alloc</refname>
    <refpurpose>create a matrix and specify the maximum dimensions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Mat <function>Mat_new_alloc</function></funcdef>
        <paramdef> elem_size, h, w, hmax, wmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>Mat_new_alloc</function> creates a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, but allocate the memory for a matrix of size <parameter>hmax</parameter>x<parameter>wmax</parameter>. This will allow the matrix to grow up to this size without any re-allocation of the matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_alloc -->

<refentry id=man.mat-new-alloc>
  <refmeta>
    <refentrytitle>mat_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_alloc</refname>
    <refpurpose>create a matrix and specify the maximum dimensions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_alloc</function></funcdef>
        <paramdef> size_t h, size_t w, size_t hmax, size_t wmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_alloc</function> creates a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, but allocate the memory for a matrix of size <parameter>hmax</parameter>x<parameter>wmax</parameter>. This will allow the matrix to grow up to this size without any re-allocation of the matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m  = mat_new_alloc (1,2,3,4);    /* m of size 1x2  */

int h  = mat_height (m);             /* h = 1          */
int w  = mat_width (m);              /* w = 2          */
int hm = mat_height_max (m);         /* hm = 3         */
int wm = mat_width_max (m);          /* wm = 4         */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_alloc -->

<refentry id=man.imat-new-alloc>
  <refmeta>
    <refentrytitle>imat_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_alloc</refname>
    <refpurpose>create a matrix and specify the maximum dimensions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_alloc</function></funcdef>
        <paramdef> size_t h, size_t w, size_t hmax, size_t wmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_alloc</function> creates a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, but allocate the memory for a matrix of size <parameter>hmax</parameter>x<parameter>wmax</parameter>. This will allow the matrix to grow up to this size without any re-allocation of the matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_alloc (1,2,3,4);   /* m of size 1x2  */

int h  = imat_height (m);            /* h = 1          */
int w  = imat_width (m);             /* w = 2          */
int hm = imat_height_max (m);        /* hm = 3         */
int wm = imat_width_max (m);         /* wm = 4         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_alloc -->

<refentry id=man.bmat-new-alloc>
  <refmeta>
    <refentrytitle>bmat_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_alloc</refname>
    <refpurpose>create a matrix and specify the maximum dimensions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_alloc</function></funcdef>
        <paramdef> size_t h, size_t w, size_t hmax, size_t wmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_new_alloc</function> creates a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, but allocate the memory for a matrix of size <parameter>hmax</parameter>x<parameter>wmax</parameter>. This will allow the matrix to grow up to this size without any re-allocation of the matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_alloc (1,2,3,4);   /* m of size 1x2  */

int h  = bmat_height (m);            /* h = 1          */
int w  = bmat_width (m);             /* w = 2          */
int hm = bmat_height_max (m);        /* hm = 3         */
int wm = bmat_width_max (m);         /* wm = 4         */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_alloc -->

<refentry id=man.cmat-new-alloc>
  <refmeta>
    <refentrytitle>cmat_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_alloc</refname>
    <refpurpose>create a matrix and specify the maximum dimensions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_alloc</function></funcdef>
        <paramdef> size_t h, size_t w, size_t hmax, size_t wmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_new_alloc</function> creates a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, but allocate the memory for a matrix of size <parameter>hmax</parameter>x<parameter>wmax</parameter>. This will allow the matrix to grow up to this size without any re-allocation of the matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_alloc (1,2,3,4);   /* m of size 1x2  */

int h  = cmat_height (m);            /* h = 1          */
int w  = cmat_width (m);             /* w = 2          */
int hm = cmat_height_max (m);        /* hm = 3         */
int wm = cmat_width_max (m);         /* wm = 4         */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_apply_function -->

<refentry id=man.mat-new-apply-function>
  <refmeta>
    <refentrytitle>mat_new_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_apply_function</refname>
    <refpurpose>matrix from element-wise function to input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_apply_function</function></funcdef>
        <paramdef> mat v, it_function_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_apply_function</function> applies <parameter>function</parameter> to every element of matrix <parameter>m</parameter>, given parameters <parameter>args</parameter> to <parameter>function</parameter>. If no argument shall be given to <parameter>function</parameter>, set <parameter>args</parameter> to NULL.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_apply_function -->

<refentry id=man.imat-new-apply-function>
  <refmeta>
    <refentrytitle>imat_new_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_apply_function</refname>
    <refpurpose>matrix from element-wise function to input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_apply_function</function></funcdef>
        <paramdef> imat v, it_ifunction_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_apply_function</function> applies <parameter>function</parameter> to every element of matrix <parameter>m</parameter>, given parameters <parameter>args</parameter> to <parameter>function</parameter>. If no argument shall be given to <parameter>function</parameter>, set <parameter>args</parameter> to NULL.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_diag -->

<refentry id=man.mat-new-diag>
  <refmeta>
    <refentrytitle>mat_new_diag</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_diag</refname>
    <refpurpose>Creates a diagonal matrix from input vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_diag</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_diag</function> creates a diagonal matrix from the parameter vector <parameter>v</parameter>. The returned matrix is a square matrix whose diagonal correspond to the elements of <parameter>v</parameter>. Note that the width and the heigth of the returned matrix are equal to the length of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    New matrix with element of input vector on the diagonal
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

vec v = vec_new (2); 
mat m; 

v[0] = 2; v[1] = 3; 

m = mat_new_diag (v); 

/*
m = 
[[ 2   0 ]
 [ 0   3 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_diag -->

<refentry id=man.imat-new-diag>
  <refmeta>
    <refentrytitle>imat_new_diag</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_diag</refname>
    <refpurpose>Creates a diagonal matrix from input vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_diag</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_diag</function> creates a diagonal matrix from the parameter vector <parameter>v</parameter>. The returned matrix is a square matrix whose diagonal correspond to the elements of <parameter>v</parameter>. Note that the width and the heigth of the returned matrix are equal to the length of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    New matrix with element of input vector on the diagonal
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

ivec v = ivec_new_string("1 2 3 4 5");   /* Vector [1 2 3 4 5 ]  */
imat m = imat_new_diag(v);               /* Matrix [[1 0 0 0 0]
                                                    [0 2 0 0 0]
                                                    [0 0 3 0 0]
                                                    [0 0 0 4 0]
                                                    [0 0 0 0 5]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_diag -->

<refentry id=man.bmat-new-diag>
  <refmeta>
    <refentrytitle>bmat_new_diag</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_diag</refname>
    <refpurpose>Creates a diagonal matrix from input vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_diag</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bmat_new_diag</function> function is used to create a new diagonal matrix. The elements of the diagonal correspond the ones of the vector <parameter>v</parameter>, the other elements are set to 0. The dimension (width and height) of this matrix are equal to the length of the vector <parameter>v</parameter>. 
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    New matrix with element of input vector on the diagonal
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_new_diag&lt;function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_eye -->

<refentry id=man.mat-new-eye>
  <refmeta>
    <refentrytitle>mat_new_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_eye</refname>
    <refpurpose>Return the identity matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_eye</function></funcdef>
        <paramdef> idx_t n
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_eye</function> returns the identity matrix of size <parameter>n</parameter>x<parameter>n</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Identity matrix of size 'n'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_eye(5);   /* Matrix [[1 0 0 0 0]
                                     [0 1 0 0 0]
                                     [0 0 1 0 0]
                                     [0 0 0 1 0]
                                     [0 0 0 0 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_eye -->

<refentry id=man.imat-new-eye>
  <refmeta>
    <refentrytitle>imat_new_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_eye</refname>
    <refpurpose>Return the identity matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_eye</function></funcdef>
        <paramdef> idx_t n
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_eye</function> returns the identity matrix of size <parameter>n</parameter>x<parameter>n</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Identity matrix of size 'n'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_eye(5);   /* Matrix [[1 0 0 0 0]
                                       [0 1 0 0 0]
                                       [0 0 1 0 0]
                                       [0 0 0 1 0]
                                       [0 0 0 0 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_eye -->

<refentry id=man.bmat-new-eye>
  <refmeta>
    <refentrytitle>bmat_new_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_eye</refname>
    <refpurpose>Return the identity matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_eye</function></funcdef>
        <paramdef> idx_t n
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_new_eye</function> returns the identity matrix of size <parameter>n</parameter>x<parameter>n</parameter>. This matrix is square.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Identity matrix of size 'n'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_eye(5);   /* Matrix [[1 0 0 0 0]
                                       [0 1 0 0 0]
                                       [0 0 1 0 0]
                                       [0 0 0 1 0]
                                       [0 0 0 0 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_eye -->

<refentry id=man.cmat-new-eye>
  <refmeta>
    <refentrytitle>cmat_new_eye</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_eye</refname>
    <refpurpose>Return the identity matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_eye</function></funcdef>
        <paramdef> idx_t n
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_new_eye</function> returns the identity matrix of size <parameter>n</parameter>x<parameter>n</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Identity matrix of size 'n'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_eye(5);   /* Matrix [[1 0 0 0 0]
                                       [0 1 0 0 0]
                                       [0 0 1 0 0]
                                       [0 0 0 1 0]
                                       [0 0 0 0 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_mul -->

<refentry id=man.mat-new-mul>
  <refmeta>
    <refentrytitle>mat_new_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_mul</refname>
    <refpurpose>Performs matrix multiplication</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_mul</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_mul</function> creates a new matrix containing the result of <parameter>m1</parameter>x<parameter>m2</parameter>. It performs to dimension checking.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Resulting matrix of 'm1'x'm2'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new (2,2);
mat m2 = mat_new (2,2);
mat m3; 

m1[0][0] = 1.; m1[0][1] = 3.; 
m1[1][0] = 2.; m1[1][1] = 4.; 

m2[0][0] = 1.; m2[0][1] = 3.; 
m2[1][0] = 2.; m2[1][1] = 4.; 

m3 = mat_new_mul (m1, m2); 

/*
m3 = 
[[ 7   15 ]
 [ 10  20 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_mul -->

<refentry id=man.imat-new-mul>
  <refmeta>
    <refentrytitle>imat_new_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_mul</refname>
    <refpurpose>Performs matrix multiplication</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_mul</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_mul</function> creates a new matrix containing the result of <parameter>m1</parameter>x<parameter>m2</parameter>. It performs to dimension checking.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Resulting matrix of 'm1'x'm2'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_new_mul&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_ones -->

<refentry id=man.mat-new-ones>
  <refmeta>
    <refentrytitle>mat_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_ones</refname>
    <refpurpose>Return a matrix of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_ones</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_ones</function> returns a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, where <parameter>h</parameter> and <parameter>w</parameter> are respectively the height and the width of the return matrix. All the elements are set to one.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new matrix containing ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones(5);   /* Matrix [[1 1 1 1 1]
                                      [1 1 1 1 1]
                                      [1 1 1 1 1]
                                      [1 1 1 1 1]
                                      [1 1 1 1 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_ones -->

<refentry id=man.imat-new-ones>
  <refmeta>
    <refentrytitle>imat_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_ones</refname>
    <refpurpose>Return a new matrix of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_ones</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>imat_new_ones</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new matrix of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones(5);   /* Matrix [[1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_ones -->

<refentry id=man.bmat-new-ones>
  <refmeta>
    <refentrytitle>bmat_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_ones</refname>
    <refpurpose>Return new matrix of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_ones</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bmat_new_ones</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new matrix of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_ones(5);   /* Matrix [[1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_ones -->

<refentry id=man.cmat-new-ones>
  <refmeta>
    <refentrytitle>cmat_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_ones</refname>
    <refpurpose>new matrix of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_ones</function></funcdef>
        <paramdef> idx_t h, idx_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cmat_new_ones</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new matrix of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_ones(5);   /* Matrix [[1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]
                                        [1 1 1 1 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_set -->

<refentry id=man.mat-new-set>
  <refmeta>
    <refentrytitle>mat_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_set</refname>
    <refpurpose>Return a matrix initialized with a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_set</function></funcdef>
        <paramdef> double val, int h, int w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_set</function> returns a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, where <parameter>h</parameter> and <parameter>w</parameter> are respectively the height and the width of the return matrix. All the elements are set to the parameter value <parameter>val</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_set (4, 2, 3);   /* m = [[4 4 4]
                                         [4 4 4]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_set -->

<refentry id=man.imat-new-set>
  <refmeta>
    <refentrytitle>imat_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_set</refname>
    <refpurpose>new matrix of integers set to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_set</function></funcdef>
        <paramdef> int val, int h, int w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_set</function> returns a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, where <parameter>h</parameter> and <parameter>w</parameter> are respectively the height and the width of the return matrix. All the elements are set to the parameter value <parameter>val</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (4, 2, 3);   /* m = [[4 4 4]
                                           [4 4 4]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_set -->

<refentry id=man.bmat-new-set>
  <refmeta>
    <refentrytitle>bmat_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_set</refname>
    <refpurpose>new matrix whose elements are set to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_set</function></funcdef>
        <paramdef> byte val, int h, int w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bmat_new_set</function> function is used to create a new matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value <parameter>val</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_set (4, 2, 3);   /* m = [[4 4 4]
                                           [4 4 4]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_set -->

<refentry id=man.cmat-new-set>
  <refmeta>
    <refentrytitle>cmat_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_set</refname>
    <refpurpose>new matrix with a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_set</function></funcdef>
        <paramdef> cplx val, int h, int w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_new_set</function> returns a matrix of size <parameter>h</parameter>x<parameter>w</parameter>, where <parameter>h</parameter> and <parameter>w</parameter> are respectively the height and the width of the return matrix. All the elements are set to the parameter value <parameter>val</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_set (4, 2, 3);   /* m = [[4 4 4]
                                           [4 4 4]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_transpose -->

<refentry id=man.mat-new-transpose>
  <refmeta>
    <refentrytitle>mat_new_transpose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_transpose</refname>
    <refpurpose>Return the transpose of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_transpose</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_transpose</function> return a matrix which is the transpose of the matrix <parameter>m</parameter>, i.e. the matrix such that the rows and the columns are inverted.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The transposed matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_string ("[[1 2 3][4 5 6]]");  /* m = [[1 2 3]
                                                      [4 5 6]]  */

mat t = mat_new_transpose (m);                /* t = [[1 4]
                                                      [2 5]]    */
                                                      [3 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_transpose -->

<refentry id=man.imat-new-transpose>
  <refmeta>
    <refentrytitle>imat_new_transpose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_transpose</refname>
    <refpurpose>return the transposed matrix of a given matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_transpose</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_transpose</function> returns the matrix which is the transpose of the matrix <parameter>m</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The transposed matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_string ("[[1 2 3][4 5 6]]");  /* m = [[1 2 3]
                                                        [4 5 6]]  */

imat t = imat_new_transpose (m);                /* t = [[1 4]
                                                        [2 5]]    */
                                                        [3 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_transpose -->

<refentry id=man.bmat-new-transpose>
  <refmeta>
    <refentrytitle>bmat_new_transpose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_transpose</refname>
    <refpurpose>Return the transpose of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_transpose</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_new_transpose</function> return a matrix which is the transpose of the matrix <parameter>m</parameter>, i.e. the matrix such that the rows and the columns are inverted.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The transposed matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_string ("[[1 2 3][4 5 6]]");  /* m = [[1 2 3]
                                                        [4 5 6]]  */

bmat t = bmat_new_transpose (m);                /* t = [[1 4]
                                                        [2 5]]    */
                                                        [3 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_void -->

<refentry id=man.mat-new-void>
  <refmeta>
    <refentrytitle>mat_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_void</refname>
    <refpurpose>Return a new void matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_void</function> returns a void matrix, i.e. a matrix that contains no elements.  The size of the matrix is 1x0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_void;   /* m = [[]]                  */
...
mat_delete (m);         /* the matrix has to be free */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_void -->

<refentry id=man.imat-new-void>
  <refmeta>
    <refentrytitle>imat_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_void</refname>
    <refpurpose>Return a new void matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_new_void</function> returns a void matrix, i.e. a matrix that contains no elements.  The size of the matrix is 1x0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_void;   /* m = [[]]  */
...
imat_delete (m);         /* the matrix has to be free */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_void -->

<refentry id=man.bmat-new-void>
  <refmeta>
    <refentrytitle>bmat_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_void</refname>
    <refpurpose>New void matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_new_void</function> returns a void matrix, i.e. a matrix that contains no elements.  The size of the matrix is 1x0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_void;   /* m = [[]]  */
...
bmat_delete (m);         /* the matrix has to be free */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_void -->

<refentry id=man.cmat-new-void>
  <refmeta>
    <refentrytitle>cmat_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_void</refname>
    <refpurpose>Allocate a void matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_new_void</function> returns a void matrix, i.e. a matrix that contains no elements.  The size of the matrix is 1x0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_void;   /* m = [[]]  */
...
cmat_delete (m);         /* the matrix has to be free */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_new_zeros -->

<refentry id=man.mat-new-zeros>
  <refmeta>
    <refentrytitle>mat_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_new_zeros</refname>
    <refpurpose>Return a matrix of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_new_zeros</function></funcdef>
        <paramdef> size_t h, size_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_new_zeros</function> return a mull matrix of size <parameter>h</parameter>x<parameter>w</parameter>, where <parameter>h</parameter> and <parameter>w</parameter> are respectively the height and the width of the return matrix  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_zeros(5,4);   /* Matrix [[0 0 0 0]
                                         [0 0 0 0]
                                         [0 0 0 0]
                                         [0 0 0 0]
                                         [0 0 0 0]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_new_zeros -->

<refentry id=man.imat-new-zeros>
  <refmeta>
    <refentrytitle>imat_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_new_zeros</refname>
    <refpurpose>New matrix of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_new_zeros</function></funcdef>
        <paramdef> size_t h, size_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>imat_new_zeros</function> function is used to create a new null matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value 0.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_zeros(5,4);   /* Matrix [[0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_new_zeros -->

<refentry id=man.bmat-new-zeros>
  <refmeta>
    <refentrytitle>bmat_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_new_zeros</refname>
    <refpurpose>New matrix of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_new_zeros</function></funcdef>
        <paramdef> size_t h, size_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bmat_new_zeros</function> function is used to create a new null matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value 0.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_zeros(5,4);   /* Matrix [[0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_new_zeros -->

<refentry id=man.cmat-new-zeros>
  <refmeta>
    <refentrytitle>cmat_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_new_zeros</refname>
    <refpurpose>New matrix of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_new_zeros</function></funcdef>
        <paramdef> size_t h, size_t w
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cmat_new_zeros</function> function is used to create a new null matrix of size <parameter>h</parameter>x<parameter>w</parameter> elements of bytes, where <parameter>h</parameter> and <parameter>w</parameter> respectively denote the number of rows and columns. All the elements of this matrix are set to the value 0.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_zeros(5,4);   /* Matrix [[0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]
                                           [0 0 0 0]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_normalize -->

<refentry id=man.mat-normalize>
  <refmeta>
    <refentrytitle>mat_normalize</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_normalize</refname>
    <refpurpose>Normalisation of the matrix (sum=1)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_normalize</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_normalize</function> normalizes the matrix so that the sum of the element of the matrix is equal to 1. Note that you would prefer to use the function <function>mat_cols_normalize</function> instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones (2,2);     /* m =[[1 1]
                                       [1 1]]  */

mat_normalize (m);              /* m =[[0.25 0.25]
                                       [0.25 0.25]]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_norm_1 -->

<refentry id=man.mat-norm-1>
  <refmeta>
    <refentrytitle>mat_norm_1</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_norm_1</refname>
    <refpurpose>return the norm 1 of a given matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_norm_1</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_norm_1</function> returns the norm 1 of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The value of the norm 1
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Romain Tavenar &lt;romain.tavenard@ecl2006.ec-lyon.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_norm_inf -->

<refentry id=man.mat-norm-inf>
  <refmeta>
    <refentrytitle>mat_norm_inf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_norm_inf</refname>
    <refpurpose>return the infinity norm of a given matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_norm_inf</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_norm_inf</function> returns the infinity norm of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The value of the infinity norm
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Romain Tavenar &lt;romain.tavenard@ecl2006.ec-lyon.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_incr -->

<refentry id=man.mat-incr>
  <refmeta>
    <refentrytitle>mat_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_incr</refname>
    <refpurpose>add a value to the elements of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_incr</function></funcdef>
        <paramdef> mat m, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_incr</function> adds <parameter>a</parameter> to all the elements of the matrix <parameter>m</parameter>. This function is inplace.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new_ones (2,2);
mat_incr (m1, 1);               /* m1 = [[2 2]  */
                                         [2 2]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_incr -->

<refentry id=man.imat-incr>
  <refmeta>
    <refentrytitle>imat_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_incr</refname>
    <refpurpose>add a value to the elements of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_incr</function></funcdef>
        <paramdef> imat m, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_incr</function> adds <parameter>a</parameter> to all the elements of the matrix <parameter>m</parameter>. This function is inplace.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m1 = imat_new_ones (2,2);
imat_incr (m1, 1);               /* m1 = [[2 2]  */
                                          [2 2]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_init -->

<refentry id=man.mat-init>
  <refmeta>
    <refentrytitle>mat_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_init</refname>
    <refpurpose>init a matrix from a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_init</function></funcdef>
        <paramdef> mat m, double * buf, size_t w, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_init</function> copies the elements of the buffer into the matrix, row per row.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_init -->

<refentry id=man.imat-init>
  <refmeta>
    <refentrytitle>imat_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_init</refname>
    <refpurpose>init a matrix from a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_init</function></funcdef>
        <paramdef> imat m, int * buf, size_t w, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_init</function> copies the elements of the buffer into the matrix, row per row.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_init -->

<refentry id=man.bmat-init>
  <refmeta>
    <refentrytitle>bmat_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_init</refname>
    <refpurpose>Init a matrix from a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_init</function></funcdef>
        <paramdef> bmat m, byte * buf, size_t w, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_init</function> copies the elements of the buffer into the matrix, row per row.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_init -->

<refentry id=man.cmat-init>
  <refmeta>
    <refentrytitle>cmat_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_init</refname>
    <refpurpose>init a matrix from a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_init</function></funcdef>
        <paramdef> cmat m, cplx * buf, size_t w, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_init</function> copies the elements of the buffer into the matrix, row per row.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_cols_sum -->

<refentry id=man.mat-cols-sum>
  <refmeta>
    <refentrytitle>mat_cols_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_cols_sum</refname>
    <refpurpose>summation of the columns of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_cols_sum</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_cols_sum</function> computes the sums of all the column of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector containing the sums
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_string ("[[1 2 3][4 5 6]]");  /* m = [[1 2 3]   
                                                      [4 5 6]]  */
vec s = mat_cols_sum (m);                     /* s =  [5 7 9]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_cols_sum -->

<refentry id=man.imat-cols-sum>
  <refmeta>
    <refentrytitle>imat_cols_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_cols_sum</refname>
    <refpurpose>summation of the columns of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>imat_cols_sum</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_cols_sum</function> computes the sums of all the column of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector containing the sums
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_string ("[[1 2 3][4 5 6]]");  /* m = [[1 2 3]   
                                                        [4 5 6]]  */
ivec s = imat_cols_sum (m);                     /* s =  [5 7 9]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_cols_sum -->

<refentry id=man.cmat-cols-sum>
  <refmeta>
    <refentrytitle>cmat_cols_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_cols_sum</refname>
    <refpurpose>summation of the columns of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cmat_cols_sum</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_cols_sum</function> computes the sums of all the column of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector containing the sums
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_string ("[[i 2 3][4 5 6]]");  /* m = [[i 2 3]   
                                                        [4 5 6]]  */
cvec s = cmat_cols_sum (m);                     /* s =  [i+4 7 9] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_col_decr -->

<refentry id=man.mat-col-decr>
  <refmeta>
    <refentrytitle>mat_col_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_col_decr</refname>
    <refpurpose>substract a value to elements of a given column</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_col_decr</function></funcdef>
        <paramdef> mat m, size_t col, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_col_decr</function> substracts <parameter>a</parameter> to all the elements of the column <parameter>col</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_string ("[[1 2 3][4 5 6]]");   /* m = [[1 2 3]   
                                                       [4 5 6]]  */
mat_col_decr (m);                              /* m = [[0 1 2]   
                                                       [3 4 5]]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_col_decr -->

<refentry id=man.imat-col-decr>
  <refmeta>
    <refentrytitle>imat_col_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_col_decr</refname>
    <refpurpose>substract a value to elements of a given column</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_col_decr</function></funcdef>
        <paramdef> imat m, size_t col, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_col_decr</function> substracts <parameter>a</parameter> to all the elements of the column <parameter>col</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_string ("[[1 2 3][4 5 6]]");  /* m = [[1 2 3]   
                                                        [4 5 6]]  */
imat_col_decr (m);                              /* m = [[0 1 2]   
                                                        [3 4 5]]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_col_div_by -->

<refentry id=man.mat-col-div-by>
  <refmeta>
    <refentrytitle>mat_col_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_col_div_by</refname>
    <refpurpose>divide the elements of a column by a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_col_div_by</function></funcdef>
        <paramdef> mat m, size_t col, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_col_div_by</function> divides all the elements of the column <parameter>col</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);     /* m = [[3 3]
                                           [3 3]]    */

imat_col_div_by (m, 1, 2);         /* m = [[3 1.5]
                                           [3 1.5]]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_col_div_by -->

<refentry id=man.imat-col-div-by>
  <refmeta>
    <refentrytitle>imat_col_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_col_div_by</refname>
    <refpurpose>divide the elements of a column by a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_col_div_by</function></funcdef>
        <paramdef> imat m, size_t col, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_col_div_by</function> divides all the elements of the column <parameter>col</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);     /* m = [[3 3]
                                           [3 3]]    */

imat_col_div_by (m, 1, 2);         /* m = [[3 1]
                                           [3 1]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_col_mul_by -->

<refentry id=man.mat-col-mul-by>
  <refmeta>
    <refentrytitle>mat_col_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_col_mul_by</refname>
    <refpurpose>multiply the elements of a column by a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_col_mul_by</function></funcdef>
        <paramdef> mat m, size_t col, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_col_mul_by</function> multiplies all the elements of the column <parameter>col</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_set (3,2,2);       /* m = [[3 3]
                                           [3 3]]    */

mat_col_mul_by (m, 1, 2);          /* m = [[3 6]
                                           [3 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_col_mul_by -->

<refentry id=man.imat-col-mul-by>
  <refmeta>
    <refentrytitle>imat_col_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_col_mul_by</refname>
    <refpurpose>multiply a column by a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_col_mul_by</function></funcdef>
        <paramdef> imat m, size_t col, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_col_mul_by</function> multiplies all the elements of the column <parameter>col</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    none, as the function is inplace
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);     /* m = [[3 3]
                                           [3 3]]    */

imat_col_mul_by (m, 1, 2);         /* m = [[3 6]
                                           [3 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_col_incr -->

<refentry id=man.mat-col-incr>
  <refmeta>
    <refentrytitle>mat_col_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_col_incr</refname>
    <refpurpose>add a value to the elements of a given column</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_col_incr</function></funcdef>
        <paramdef> mat m, size_t col, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_col_incr</function> adds <parameter>a</parameter> to all the elements of the column <parameter>col</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_set (3,2,2);       /* m = [[3 3]
                                           [3 3]]    */

mat_col_incr (m, 1);               /* m = [[3 4]
                                           [3 4]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_col_incr -->

<refentry id=man.imat-col-incr>
  <refmeta>
    <refentrytitle>imat_col_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_col_incr</refname>
    <refpurpose>add a value to the elements of a given column</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_col_incr</function></funcdef>
        <paramdef> imat m, size_t col, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_col_incr</function> adds <parameter>a</parameter> to all the elements of the column <parameter>col</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);       /* m = [[3 3]
                                             [3 3]]    */

imat_col_incr (m, 1);                /* m = [[3 4]
                                             [3 4]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_col_set -->

<refentry id=man.mat-col-set>
  <refmeta>
    <refentrytitle>mat_col_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_col_set</refname>
    <refpurpose>Set a column of the matrix to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_col_set</function></funcdef>
        <paramdef> mat m, idx_t col, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_col_set</function> sets all the elements of column 'col of the matrix <parameter>m</parameter> to the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones (2,2);       /* m = [[1 1]
                                          [1 1]]    */

mat_col_set (m, 1, 2);            /* m = [[1 2]
                                          [1 2]]    */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_col_set -->

<refentry id=man.imat-col-set>
  <refmeta>
    <refentrytitle>imat_col_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_col_set</refname>
    <refpurpose>Set a column of the matrix to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_col_set</function></funcdef>
        <paramdef> imat m, idx_t col, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_col_set</function> sets all the elements of column 'col of the matrix <parameter>m</parameter> to the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones (2,2);     /* m = [[1 1]
                                          [1 1]]    */

imat_col_set (m, 1, 2);           /* m = [[1 2]
                                          [1 2]]    */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_col_sum -->

<refentry id=man.mat-col-sum>
  <refmeta>
    <refentrytitle>mat_col_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_col_sum</refname>
    <refpurpose>return the sum of a given column in a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_col_sum</function></funcdef>
        <paramdef> mat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> rThe function <function>mat_col_sum</function> returns the sum of all elements in the column <parameter>c</parameter> of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sum
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Romain Tavenar &lt;romain.tavenard@ecl2006.ec-lyon.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_col_sum -->

<refentry id=man.imat-col-sum>
  <refmeta>
    <refentrytitle>imat_col_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_col_sum</refname>
    <refpurpose>summation of the columns of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_col_sum</function></funcdef>
        <paramdef> imat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_col_sum -->

<refentry id=man.cmat-col-sum>
  <refmeta>
    <refentrytitle>cmat_col_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_col_sum</refname>
    <refpurpose>Compute the summation of a columns of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cmat_col_sum</function></funcdef>
        <paramdef> cmat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_ones -->

<refentry id=man.mat-ones>
  <refmeta>
    <refentrytitle>mat_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_ones</refname>
    <refpurpose>set all the elements of a matrix to 1</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_ones</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_ones -->

<refentry id=man.imat-ones>
  <refmeta>
    <refentrytitle>imat_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_ones</refname>
    <refpurpose>set all the elements of a matrix to 1</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_ones</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_ones -->

<refentry id=man.bmat-ones>
  <refmeta>
    <refentrytitle>bmat_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_ones</refname>
    <refpurpose>Set the elements of a matrix to 1</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_ones</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_ones -->

<refentry id=man.cmat-ones>
  <refmeta>
    <refentrytitle>cmat_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_ones</refname>
    <refpurpose>set all the elements of a matrix to 1</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_ones</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_copy -->

<refentry id=man.mat-copy>
  <refmeta>
    <refentrytitle>mat_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_copy</refname>
    <refpurpose>Copy matrix elements to another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_copy</function></funcdef>
        <paramdef> mat dest, mat orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_copy</function> copies elements from <parameter>orig</parameter> to matrix <parameter>dest</parameter>. Matrix <parameter>dest</parameter> must have same or greater dimensions than <parameter>orig</parameter>. If <parameter>dest</parameter> is bigger than <parameter>orig</parameter>, elements are copied to <parameter>dest</parameter> starting from [0,0].  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m1 = mat_new_zeros (2,2); 
mat m2 = mat_new (3,3);

mat_set (m2,1.); 

mat_copy (m2,m1); 

/*
m2 = 
[[ 0   0   1 ] 
 [ 0   0   1 ]
 [ 1   1   1 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_copy -->

<refentry id=man.imat-copy>
  <refmeta>
    <refentrytitle>imat_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_copy</refname>
    <refpurpose>Copy a matrix from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_copy</function></funcdef>
        <paramdef> imat dest, imat orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_copy</function> copies elements from <parameter>orig</parameter> to matrix <parameter>dest</parameter>. Matrix <parameter>dest</parameter> must have same or greater dimensions than <parameter>orig</parameter>. If <parameter>dest</parameter> is bigger than <parameter>orig</parameter>, elements are copied to <parameter>dest</parameter> starting from [0,0].  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_copy&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_copy -->

<refentry id=man.bmat-copy>
  <refmeta>
    <refentrytitle>bmat_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_copy</refname>
    <refpurpose>Copy a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_copy</function></funcdef>
        <paramdef> bmat dest, bmat orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <parameter>bmat_copy</parameter>copies the content of the matrix <parameter>orig</parameter> into the matrix est. The sizes must be compatible.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m1 = bmat_new_ones(4,3);
bmat m2 = bmat_new(4,3);         /* m2 is allocated but not initialized */
...

bmat_copy(m2,m1);                /* Now, m2 has the same content as m1 */

...

bmat_delete(m1);
bmat_delete(m2);                 /* A cloned matrix has to be free separately */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_copy -->

<refentry id=man.cmat-copy>
  <refmeta>
    <refentrytitle>cmat_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_copy</refname>
    <refpurpose>Copy a matrix from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_copy</function></funcdef>
        <paramdef> cmat dest, cmat orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_copy</function> copies elements from <parameter>orig</parameter> to matrix <parameter>dest</parameter>. Matrix <parameter>dest</parameter> must have same or greater dimensions than <parameter>orig</parameter>. If <parameter>dest</parameter> is bigger than <parameter>orig</parameter>, elements are copied to <parameter>dest</parameter> starting from [0,0].  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_copy&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_copy_col -->

<refentry id=man.mat-copy-col>
  <refmeta>
    <refentrytitle>mat_copy_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_copy_col</refname>
    <refpurpose>Copy the column of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_copy_col</function></funcdef>
        <paramdef> vec v, mat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_copy_col</function> copies the column <parameter>c</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_copy_col -->

<refentry id=man.imat-copy-col>
  <refmeta>
    <refentrytitle>imat_copy_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_copy_col</refname>
    <refpurpose>Copy the column of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_copy_col</function></funcdef>
        <paramdef> ivec v, imat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_copy_col</function> copies the column <parameter>c</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_copy_col -->

<refentry id=man.bmat-copy-col>
  <refmeta>
    <refentrytitle>bmat_copy_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_copy_col</refname>
    <refpurpose>Copy the column of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_copy_col</function></funcdef>
        <paramdef> bvec v, bmat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_copy_col</function> copies the column <parameter>c</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_copy_col -->

<refentry id=man.cmat-copy-col>
  <refmeta>
    <refentrytitle>cmat_copy_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_copy_col</refname>
    <refpurpose>Copy the column of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_copy_col</function></funcdef>
        <paramdef> cvec v, cmat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_copy_col</function> copies the column <parameter>c</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_copy_row -->

<refentry id=man.mat-copy-row>
  <refmeta>
    <refentrytitle>mat_copy_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_copy_row</refname>
    <refpurpose>copy a row of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_copy_row</function></funcdef>
        <paramdef> vec v, mat m, size_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_copy_col</function> copies the row <parameter>r</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_copy_row -->

<refentry id=man.imat-copy-row>
  <refmeta>
    <refentrytitle>imat_copy_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_copy_row</refname>
    <refpurpose>copy a row of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_copy_row</function></funcdef>
        <paramdef> ivec v, imat m, size_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_copy_col</function> copies the row <parameter>r</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_copy_row -->

<refentry id=man.bmat-copy-row>
  <refmeta>
    <refentrytitle>bmat_copy_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_copy_row</refname>
    <refpurpose>copy a row of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bmat_copy_row</function></funcdef>
        <paramdef> bvec v, bmat m, size_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_copy_col</function> copies the row <parameter>r</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_copy_row -->

<refentry id=man.cmat-copy-row>
  <refmeta>
    <refentrytitle>cmat_copy_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_copy_row</refname>
    <refpurpose>copy a row of a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cmat_copy_row</function></funcdef>
        <paramdef> cvec v, cmat m, size_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_copy_col</function> copies the row <parameter>r</parameter> of a matrix <parameter>m</parameter> into a vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_rows_sum -->

<refentry id=man.mat-rows-sum>
  <refmeta>
    <refentrytitle>mat_rows_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_rows_sum</refname>
    <refpurpose>sum of rows of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_rows_sum</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_rows_sum</function> returns the summations of every row of the matrix <parameter>m</parameter>. These summations are stored into a vector, which length correspond to the height of the matrix <parameter>m</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    a vector where each element is the sum of a row
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_rows_sum -->

<refentry id=man.imat-rows-sum>
  <refmeta>
    <refentrytitle>imat_rows_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_rows_sum</refname>
    <refpurpose>sum of rows of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>imat_rows_sum</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_rows_sum</function> returns the summations of every row of the matrix <parameter>m</parameter>. These summations are stored into a vector, which length correspond to the height of the matrix <parameter>m</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    a vector where each element is the sum of a row
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_rows_sum -->

<refentry id=man.cmat-rows-sum>
  <refmeta>
    <refentrytitle>cmat_rows_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_rows_sum</refname>
    <refpurpose>sum of rows of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cmat_rows_sum</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_rows_sum</function> returns the summations of every row of the matrix <parameter>m</parameter>. These summations are stored into a vector, which length correspond to the height of the matrix <parameter>m</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    a vector where each element is the sum of a row
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_row_decr -->

<refentry id=man.mat-row-decr>
  <refmeta>
    <refentrytitle>mat_row_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_row_decr</refname>
    <refpurpose>substract a value to elements of a given row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_row_decr</function></funcdef>
        <paramdef> mat m, size_t row, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_row_decr</function> substracts <parameter>a</parameter> to all the elements of the row <parameter>row</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_string ("[[1 2 3][4 5 6]]");   /* m = [[1 2 3]   
                                                       [4 5 6]]  */
mat_row_decr (m);                              /* m = [[0 1 2]   
                                                       [3 4 5]]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_row_decr -->

<refentry id=man.imat-row-decr>
  <refmeta>
    <refentrytitle>imat_row_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_row_decr</refname>
    <refpurpose>substract a value to elements of a given row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_row_decr</function></funcdef>
        <paramdef> imat m, size_t row, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_row_decr</function> substracts <parameter>a</parameter> to all the elements of the row <parameter>row</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_string ("[[1 2 3][4 5 6]]");   /* m = [[1 2 3]   
                                                         [4 5 6]]  */
imat_row_decr (m);                               /* m = [[0 1 2]   
                                                         [3 4 5]]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_row_div_by -->

<refentry id=man.mat-row-div-by>
  <refmeta>
    <refentrytitle>mat_row_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_row_div_by</refname>
    <refpurpose>multiply the elements of a column by a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_row_div_by</function></funcdef>
        <paramdef> mat m, size_t row, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_row_div_by</function> divides all the elements of the row <parameter>row</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_set (3,2,2);       /* m = [[3 3]
                                           [3 3]]      */

mat_row_div_by (m, 1, 2);          /* m = [[3 3]
                                           [1.5 1.5]]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_row_div_by -->

<refentry id=man.imat-row-div-by>
  <refmeta>
    <refentrytitle>imat_row_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_row_div_by</refname>
    <refpurpose>multiply the elements of a column by a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_row_div_by</function></funcdef>
        <paramdef> imat m, size_t row, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_row_div_by</function> divides all the elements of the row <parameter>row</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);     /* m = [[3 3]
                                           [3 3]]    */

imat_row_div_by (m, 1, 2);         /* m = [[3 3]
                                           [1 1]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_row_mul_by -->

<refentry id=man.mat-row-mul-by>
  <refmeta>
    <refentrytitle>mat_row_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_row_mul_by</refname>
    <refpurpose>multiply a row by a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_row_mul_by</function></funcdef>
        <paramdef> mat m, size_t row, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_row_mul_by</function> multiplies all the elements of the row <parameter>row</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_set (3,2,2);       /* m = [[3 3]
                                           [3 3]]    */

mat_row_mul_by (m, 1, 2);          /* m = [[3 3]
                                           [6 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_row_mul_by -->

<refentry id=man.imat-row-mul-by>
  <refmeta>
    <refentrytitle>imat_row_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_row_mul_by</refname>
    <refpurpose>multiply a row by a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_row_mul_by</function></funcdef>
        <paramdef> imat m, size_t row, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_row_mul_by</function> multiplies all the elements of the row <parameter>row</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);     /* m = [[3 3]
                                           [3 3]]    */

imat_row_mul_by (m, 1, 2);         /* m = [[3 3]
                                           [6 6]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_row_incr -->

<refentry id=man.mat-row-incr>
  <refmeta>
    <refentrytitle>mat_row_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_row_incr</refname>
    <refpurpose>add a value to the elements of a given row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_row_incr</function></funcdef>
        <paramdef> mat m, size_t row, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_row_incr</function> adds <parameter>a</parameter> to all the elements of the row <parameter>row</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_set (3,2,2);       /* m = [[3 3]
                                           [3 3]]    */

mat_row_incr (m, 1);               /* m = [[3 3]
                                           [4 4]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_row_incr -->

<refentry id=man.imat-row-incr>
  <refmeta>
    <refentrytitle>imat_row_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_row_incr</refname>
    <refpurpose>add a value to the elements of a given row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_row_incr</function></funcdef>
        <paramdef> imat m, size_t row, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_row_incr</function> adds <parameter>a</parameter> to all the elements of the row <parameter>row</parameter> in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_set (3,2,2);     /* m = [[3 3]
                                           [3 3]]    */

imat_row_incr (m, 1);              /* m = [[3 3]
                                           [4 4]]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_row_sum -->

<refentry id=man.mat-row-sum>
  <refmeta>
    <refentrytitle>mat_row_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_row_sum</refname>
    <refpurpose>sum of a matrix row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_row_sum</function></funcdef>
        <paramdef> mat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the summation of the elements of the matrix for the specified row
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_row_sum -->

<refentry id=man.imat-row-sum>
  <refmeta>
    <refentrytitle>imat_row_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_row_sum</refname>
    <refpurpose>sum of a matrix row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_row_sum</function></funcdef>
        <paramdef> imat m, size_t r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the summation of the elements of the matrix for the specified row
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_row_sum -->

<refentry id=man.cmat-row-sum>
  <refmeta>
    <refentrytitle>cmat_row_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_row_sum</refname>
    <refpurpose>sum of a matrix row</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cmat_row_sum</function></funcdef>
        <paramdef> cmat m, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the summation of the elements of the matrix for the specified row
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set -->

<refentry id=man.mat-set>
  <refmeta>
    <refentrytitle>mat_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set</refname>
    <refpurpose>Set the elements of a matrix to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_set</function></funcdef>
        <paramdef> mat m, double val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set -->

<refentry id=man.imat-set>
  <refmeta>
    <refentrytitle>imat_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set</refname>
    <refpurpose>Set the elements of a matrix to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_set</function></funcdef>
        <paramdef> imat m, int val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set -->

<refentry id=man.bmat-set>
  <refmeta>
    <refentrytitle>bmat_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set</refname>
    <refpurpose>Set the elements of a matrix to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_set</function></funcdef>
        <paramdef> bmat m, byte val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_set -->

<refentry id=man.cmat-set>
  <refmeta>
    <refentrytitle>cmat_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_set</refname>
    <refpurpose>Set the elements of a matrix to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_set</function></funcdef>
        <paramdef> cmat m, cplx val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set_between -->

<refentry id=man.mat-set-between>
  <refmeta>
    <refentrytitle>mat_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set_between</refname>
    <refpurpose>Set some matrix components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>mat_set_between</function></funcdef>
        <paramdef> mat m, size_t r1, size_t c1, size_t r2, size_t c2, double val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>mat_set_between</function> function sets all the elements of the matrix <parameter>m</parameter> whose position stands in the index interval [<parameter>r1</parameter>,<parameter>r2</parameter>]x[<parameter>c1</parameter>,<parameter>c2</parameter>] to the value <parameter>val</parameter>. 

See also: <function>vec_set_between</function> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_zeros (3,3); 

mat_set_between (m, 1, 1, 2, 2, 1.); 

/*
m = 
[[0   0   0]
 [0   1   1]
 [0   1   1]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set_between -->

<refentry id=man.bmat-set-between>
  <refmeta>
    <refentrytitle>bmat_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set_between</refname>
    <refpurpose>Set some matrix components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>bmat_set_between</function></funcdef>
        <paramdef> bmat m, size_t r1, size_t c1, size_t r2, size_t c2, byte val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bmat_set_between</function> function sets all the elements of the matrix <parameter>m</parameter> whose position stands in the index interval [<parameter>r1</parameter>,<parameter>r2</parameter>]x[<parameter>c1</parameter>,<parameter>c2</parameter>] to the value <parameter>val</parameter>. 

See also: <function>vec_set_between</function> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_set_between&lt;/function&gt;, &lt;function&gt;vec_set_between&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set_between -->

<refentry id=man.imat-set-between>
  <refmeta>
    <refentrytitle>imat_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set_between</refname>
    <refpurpose>Set some matrix components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>imat_set_between</function></funcdef>
        <paramdef> imat m, size_t r1, size_t c1, size_t r2, size_t c2, int val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>imat_set_between</function> function sets all the elements of the matrix <parameter>m</parameter> whose position stands in the index interval [<parameter>r1</parameter>,<parameter>r2</parameter>]x[<parameter>c1</parameter>,<parameter>c2</parameter>] to the value <parameter>val</parameter>. 

See also: <function>vec_set_between</function> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_set_between&lt;/function&gt;, &lt;function&gt;vec_set_between&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_set_between -->

<refentry id=man.cmat-set-between>
  <refmeta>
    <refentrytitle>cmat_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_set_between</refname>
    <refpurpose>Set some matrix components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>cmat_set_between</function></funcdef>
        <paramdef> cmat m, size_t r1, size_t c1, size_t r2, size_t c2, cplx val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cmat_set_between</function> function sets all the elements of the matrix <parameter>m</parameter> whose position stands in the index interval [<parameter>r1</parameter>,<parameter>r2</parameter>]x[<parameter>c1</parameter>,<parameter>c2</parameter>] to the value <parameter>val</parameter>. 

See also: <function>vec_set_between</function> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_set_between&lt;/function&gt;, &lt;function&gt;vec_set_between&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_set_height -->

<refentry id=man.-mat-set-height>
  <refmeta>
    <refentrytitle>Mat_set_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_set_height</refname>
    <refpurpose>set the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>Mat_set_height</function></funcdef>
        <paramdef> Mat m, int height
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the height of the matrix <parameter>m</parameter> to <parameter>height</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

Mat m = Mat_new(float, 5, 5);
Mat_set_height(m, 10); /* m is now a 10-row 5-column matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set_height -->

<refentry id=man.imat-set-height>
  <refmeta>
    <refentrytitle>imat_set_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set_height</refname>
    <refpurpose>set the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_set_height</function></funcdef>
        <paramdef> imat m, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the height of the matrix <parameter>m</parameter> to <parameter>height</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new(5, 5);
imat_set_height(m, 10); /* m is now a 10-row 5-column matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set_height -->

<refentry id=man.bmat-set-height>
  <refmeta>
    <refentrytitle>bmat_set_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set_height</refname>
    <refpurpose>set the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_set_height</function></funcdef>
        <paramdef> bmat m, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the height of the matrix <parameter>m</parameter> to <parameter>height</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new(5, 5);
cmat_set_height(m, 10); /* m is now a 10-row 5-column matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_set_height -->

<refentry id=man.cmat-set-height>
  <refmeta>
    <refentrytitle>cmat_set_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_set_height</refname>
    <refpurpose>set the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_set_height</function></funcdef>
        <paramdef> cmat m, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the height of the matrix <parameter>m</parameter> to <parameter>height</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new(5, 5);
cmat_set_height(m, 10); /* m is now a 10-row 5-column matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set_height -->

<refentry id=man.mat-set-height>
  <refmeta>
    <refentrytitle>mat_set_height</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set_height</refname>
    <refpurpose>set the height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_set_height</function></funcdef>
        <paramdef> mat m, size_t h
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the height of the matrix <parameter>m</parameter> to <parameter>height</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new(5, 5);
mat_set_height(m, 10); /* m is now a 10-row 5-column matrix */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set_height_max -->

<refentry id=man.mat-set-height-max>
  <refmeta>
    <refentrytitle>mat_set_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set_height_max</refname>
    <refpurpose>Change the maximum height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_set_height_max</function></funcdef>
        <paramdef> mat m, size_t hmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set_height_max -->

<refentry id=man.imat-set-height-max>
  <refmeta>
    <refentrytitle>imat_set_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set_height_max</refname>
    <refpurpose>set the maximum height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_set_height_max</function></funcdef>
        <paramdef> imat m, size_t hmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set_height_max -->

<refentry id=man.bmat-set-height-max>
  <refmeta>
    <refentrytitle>bmat_set_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set_height_max</refname>
    <refpurpose>Change the maximum height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_set_height_max</function></funcdef>
        <paramdef> bmat m, size_t hmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_set_height_max -->

<refentry id=man.cmat-set-height-max>
  <refmeta>
    <refentrytitle>cmat_set_height_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_set_height_max</refname>
    <refpurpose>specify the new maximum height of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_set_height_max</function></funcdef>
        <paramdef> cmat m, size_t hmax
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_set_col -->

<refentry id=man.-mat-set-col>
  <refmeta>
    <refentrytitle>Mat_set_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_set_col</refname>
    <refpurpose>modify a column of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>Mat_set_col</function></funcdef>
        <paramdef> Mat m, size_t c, Vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set_col -->

<refentry id=man.mat-set-col>
  <refmeta>
    <refentrytitle>mat_set_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set_col</refname>
    <refpurpose>modify a column of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_set_col</function></funcdef>
        <paramdef> mat m, size_t c, vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set_col -->

<refentry id=man.imat-set-col>
  <refmeta>
    <refentrytitle>imat_set_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set_col</refname>
    <refpurpose>modify a column of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_set_col</function></funcdef>
        <paramdef> imat m, size_t c, ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set_col -->

<refentry id=man.bmat-set-col>
  <refmeta>
    <refentrytitle>bmat_set_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set_col</refname>
    <refpurpose>modify a column of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_set_col</function></funcdef>
        <paramdef> bmat m, size_t c, bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_set_col -->

<refentry id=man.cmat-set-col>
  <refmeta>
    <refentrytitle>cmat_set_col</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_set_col</refname>
    <refpurpose>modify a column of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_set_col</function></funcdef>
        <paramdef> cmat m, size_t c, cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set_row -->

<refentry id=man.mat-set-row>
  <refmeta>
    <refentrytitle>mat_set_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set_row</refname>
    <refpurpose>modify a row of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_set_row</function></funcdef>
        <paramdef> mat m, int row, double value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro sets an entire row <parameter>row</parameter> of the matrix <parameter>m</parameter> to the value <parameter>value</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_zeros(2,2);
vec v = vec_new_ones (2);
mat_set_row(m, 1, v);   /* [ [ 0 1 ]
                             [ 0 1 ] ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set_row -->

<refentry id=man.imat-set-row>
  <refmeta>
    <refentrytitle>imat_set_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set_row</refname>
    <refpurpose>modify a row of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_set_row</function></funcdef>
        <paramdef> imat m, int row, int value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro sets an entire row <parameter>row</parameter> of the matrix <parameter>m</parameter> to the value <parameter>value</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_zeros(2,2);
ivec v = ivec_new_ones (2);
imat_set_row(m, 1, v);       /* [[0 1]
                                  [0 1]] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set_row -->

<refentry id=man.bmat-set-row>
  <refmeta>
    <refentrytitle>bmat_set_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set_row</refname>
    <refpurpose>modify a row of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_set_row</function></funcdef>
        <paramdef> bmat m, int row, byte value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro sets an entire row <parameter>row</parameter> of the matrix <parameter>m</parameter> to the value <parameter>value</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_zeros(2,2);
bvec v = bvec_new_ones (2);
bmat_set_row(m, 0, 1);        /* [ [0 0]
                                   [1 1] ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_set_row -->

<refentry id=man.cmat-set-row>
  <refmeta>
    <refentrytitle>cmat_set_row</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_set_row</refname>
    <refpurpose>modify a row of a matrix with a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_set_row</function></funcdef>
        <paramdef> mat m, int row, cplx value
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro sets an entire row <parameter>row</parameter> of the matrix <parameter>m</parameter> to the value <parameter>value</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_zeros(2,2);
cvec v = cvec_new_ones (2);
cmat_set_row(m, 1, cplx_I);   /* [ [ 0 0 ]
                                   [ 1 1 ] ] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_set_submatrix -->

<refentry id=man.mat-set-submatrix>
  <refmeta>
    <refentrytitle>mat_set_submatrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_set_submatrix</refname>
    <refpurpose>set a submatrix of a matrix with a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_set_submatrix</function></funcdef>
        <paramdef> mat m, mat s, size_t r, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_set_submatrix -->

<refentry id=man.imat-set-submatrix>
  <refmeta>
    <refentrytitle>imat_set_submatrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_set_submatrix</refname>
    <refpurpose>set a submatrix of a matrix with a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_set_submatrix</function></funcdef>
        <paramdef> imat m, imat s, size_t r, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_set_submatrix -->

<refentry id=man.bmat-set-submatrix>
  <refmeta>
    <refentrytitle>bmat_set_submatrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_set_submatrix</refname>
    <refpurpose>set a submatrix of a matrix with a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_set_submatrix</function></funcdef>
        <paramdef> bmat m, bmat s, size_t r, size_t c
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_set_width -->

<refentry id=man.-mat-set-width>
  <refmeta>
    <refentrytitle>Mat_set_width</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_set_width</refname>
    <refpurpose>set the width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>Mat_set_width</function></funcdef>
        <paramdef> Mat m, int width
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function sets the width of the matrix <parameter>m</parameter> to <parameter>width</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

Mat m = Mat_new(float, 5, 5);
Mat_set_width(m, 10); /* m is now a 5-row 10-column matrix */ 
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_sub -->

<refentry id=man.mat-sub>
  <refmeta>
    <refentrytitle>mat_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_sub</refname>
    <refpurpose>Substract a matrix from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_sub</function></funcdef>
        <paramdef> mat m1, mat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_sub</function> substracts the matrix <parameter>m2</parameter> from the matrix <parameter>m1</parameter>. The result is stored in <parameter>m1</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_sub -->

<refentry id=man.imat-sub>
  <refmeta>
    <refentrytitle>imat_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_sub</refname>
    <refpurpose>Substract a matrix from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_sub</function></funcdef>
        <paramdef> imat m1, imat m2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_sub</function> substracts the matrix <parameter>m2</parameter> from the matrix <parameter>m1</parameter>. The result is stored in <parameter>m1</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_sum -->

<refentry id=man.mat-sum>
  <refmeta>
    <refentrytitle>mat_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_sum</refname>
    <refpurpose>Sum of the matrix elements</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_sum</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_sum -->

<refentry id=man.imat-sum>
  <refmeta>
    <refentrytitle>imat_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_sum</refname>
    <refpurpose>Sum of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_sum</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_sum</function> returns the sum of the elements of the matrix <parameter>m</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_sum -->

<refentry id=man.cmat-sum>
  <refmeta>
    <refentrytitle>cmat_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_sum</refname>
    <refpurpose>Sum of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cmat_sum</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_sum</function> returns the sum of the elements of the matrix <parameter>m</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_swap_cols -->

<refentry id=man.mat-swap-cols>
  <refmeta>
    <refentrytitle>mat_swap_cols</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_swap_cols</refname>
    <refpurpose>swaps two columns in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_swap_cols</function></funcdef>
        <paramdef> mat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_swap_cols</function> swaps columns <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 

m[0][0] = 1; m[0][1] = 3;
m[1][0] = 2; m[1][1] = 4; 

mat_swap_cols (m, 0, 1); 

/*
m = 
[[ 3   1
   4   2 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_swap_cols -->

<refentry id=man.bmat-swap-cols>
  <refmeta>
    <refentrytitle>bmat_swap_cols</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_swap_cols</refname>
    <refpurpose>swaps two columns in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_swap_cols</function></funcdef>
        <paramdef> bmat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_swap_cols</function> swaps columns <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_swap_cols&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_swap_cols -->

<refentry id=man.imat-swap-cols>
  <refmeta>
    <refentrytitle>imat_swap_cols</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_swap_cols</refname>
    <refpurpose>swaps two columns in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_swap_cols</function></funcdef>
        <paramdef> imat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_swap_cols</function> swaps columns <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_swap_cols&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_swap_cols -->

<refentry id=man.cmat-swap-cols>
  <refmeta>
    <refentrytitle>cmat_swap_cols</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_swap_cols</refname>
    <refpurpose>swaps two columns in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_swap_cols</function></funcdef>
        <paramdef> cmat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_swap_cols</function> swaps columns <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_swap_cols&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_swap_rows -->

<refentry id=man.imat-swap-rows>
  <refmeta>
    <refentrytitle>imat_swap_rows</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_swap_rows</refname>
    <refpurpose>swaps two rows in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_swap_rows</function></funcdef>
        <paramdef> imat m, idx_t, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_swap_rows</function> swaps rows <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_swap_rows&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_swap_rows -->

<refentry id=man.mat-swap-rows>
  <refmeta>
    <refentrytitle>mat_swap_rows</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_swap_rows</refname>
    <refpurpose>swaps two rows in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_swap_rows</function></funcdef>
        <paramdef> mat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_swap_rows</function> swaps rows <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new (2,2); 

m[0][0] = 1; m[0][1] = 3;
m[1][0] = 2; m[1][1] = 4; 

mat_swap_rows (m, 0, 1); 

/*
m = 
[[ 2   4
   1   3 ]]
*/
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_swap_rows -->

<refentry id=man.bmat-swap-rows>
  <refmeta>
    <refentrytitle>bmat_swap_rows</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_swap_rows</refname>
    <refpurpose>swaps two rows in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_swap_rows</function></funcdef>
        <paramdef> bmat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_swap_rows</function> swaps rows <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_swap_rows&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_swap_rows -->

<refentry id=man.cmat-swap-rows>
  <refmeta>
    <refentrytitle>cmat_swap_rows</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_swap_rows</refname>
    <refpurpose>swaps two rows in input matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_swap_rows</function></funcdef>
        <paramdef> cmat m, idx_t i, idx_t j
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_swap_rows</function> swaps rows <parameter>i</parameter> and <parameter>j</parameter> in matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

See &lt;function&gt;mat_swap_rows&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_to_mat -->

<refentry id=man.imat-to-mat>
  <refmeta>
    <refentrytitle>imat_to_mat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_to_mat</refname>
    <refpurpose>convert a integer matrix to a matrix of double</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>imat_to_mat</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_to_mat</function> casts a matrix of integers into a matrix of double floating point values. Note that it results in a new matrix.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new matrix of double
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m1 = imat_new_set (2,2,2); /* m1 = [[2 2]
                                         [2 2]]  */

mat m2 = imat_to_mat (m1);      /* m2 = [[2 2]
                                         [2 2]]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_to_vec -->

<refentry id=man.mat-to-vec>
  <refmeta>
    <refentrytitle>mat_to_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_to_vec</refname>
    <refpurpose>vectorize a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_to_vec</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_to_vec</function> vectorizes the matrix <parameter>m</parameter> into a vector. In other terms, the resulting vector is the concatenation of all the rows of <parameter>m</parameter>. Its length is then the product of the width by the height of the matrix 'm '. Note that this function is the equivalent of the notation 'm(:)' in Matlab. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_string ("[[1 2][4 3]]");  /* m = [[1 2]  
                                                  [4 3]    */

vec v = mat_to_vec (m);                   /* v = [1 2 4 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_to_ivec -->

<refentry id=man.imat-to-ivec>
  <refmeta>
    <refentrytitle>imat_to_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_to_ivec</refname>
    <refpurpose>vectorize a matrix into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>imat_to_ivec</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_to_ivec</function> vectorizes the matrix <parameter>m</parameter> into a vector. In other terms, the resulting vector is the concatenation of all the rows of <parameter>m</parameter>. Its length is then the product of the width by the height of the matrix 'm '. Note that this function is the equivalent of the notation 'm(:)' in Matlab. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_string ("[[1 2][4 3]]");  /* m = [[1 2]  
                                                    [4 3]    */

ivec v = imat_to_ivec (m);                   /* v = [1 2 4 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_transpose -->

<refentry id=man.mat-transpose>
  <refmeta>
    <refentrytitle>mat_transpose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_transpose</refname>
    <refpurpose>Transpose a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_transpose</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_tranpose</function> tranpose the matrix <parameter>m</parameter>. Note that the pointer corresponding to the matrix <parameter>m</parameter> may be subsequently modified.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_zeros(5,3);   /* Matrix [[0 0 0]
                                         [0 0 0]] */
m[0][1]=1;
m[1][0]=2;
m[1][2]=3;                    /*   m =  [[0 1 0]
                                         [2 0 3]] */
mat_transpose(m);             /*   m =  [[0 2]
                                         [1 0]
                                         [0 3]]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_transpose -->

<refentry id=man.imat-transpose>
  <refmeta>
    <refentrytitle>imat_transpose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_transpose</refname>
    <refpurpose>Transpose a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_transpose</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_tranpose</function> tranpose the matrix <parameter>m</parameter>. Note that the pointer corresponding to the matrix <parameter>m</parameter> may be subsequently modified.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_zeros(5,3); /* Matrix [[0 0 0]
                                         [0 0 0]] */
m[0][1]=1;
m[1][0]=2;
m[1][2]=3;                    /*   m =  [[0 1 0]
                                         [2 0 3]] */
imat_transpose(m);            /*   m =  [[0 2]
                                         [1 0]
                                         [0 3]]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_transpose -->

<refentry id=man.bmat-transpose>
  <refmeta>
    <refentrytitle>bmat_transpose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_transpose</refname>
    <refpurpose>Transpose a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_transpose</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_tranpose</function> tranpose the matrix <parameter>m</parameter>. Note that the pointer corresponding to the matrix <parameter>m</parameter> may be subsequently modified.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_zeros(5,3); /* Matrix [[0 0 0]
                                         [0 0 0]] */
m[0][1]=1;
m[1][0]=2;
m[1][2]=3;                    /*   m =  [[0 1 0]
                                         [2 0 3]] */
bmat_transpose(m);            /*   m =  [[0 2]
                                         [1 0]
                                         [0 3]]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_variance -->

<refentry id=man.mat-variance>
  <refmeta>
    <refentrytitle>mat_variance</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_variance</refname>
    <refpurpose>return the variance of the values in a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mat_variance</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_variance</function> returns the variance of the values in the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The variance
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Romain Tavenar &lt;romain.tavenard@ecl2006.ec-lyon.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_vec_mul -->

<refentry id=man.mat-vec-mul>
  <refmeta>
    <refentrytitle>mat_vec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_vec_mul</refname>
    <refpurpose>return the product of a vector by a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_vec_mul</function></funcdef>
        <paramdef> mat m, vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_vec_mul</function> returns the product of the matrix <parameter>m</parameter> by the vector <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones (3,3);
vec v = vec_new_ones (3);
vec r = mat_vec_mul (m, v);  /* r = [3 3 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_ivec_mul -->

<refentry id=man.mat-ivec-mul>
  <refmeta>
    <refentrytitle>mat_ivec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_ivec_mul</refname>
    <refpurpose>return the product of a vector by a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>mat_ivec_mul</function></funcdef>
        <paramdef> mat m, ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_ivec_mul</function> returns the product of the matrix <parameter>m</parameter> by the vector <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones (3,3);
ivec v = ivec_new_ones (3);
vec r = mat_ivec_mul (m, v);  /* r = [3 3 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_vec_mul -->

<refentry id=man.imat-vec-mul>
  <refmeta>
    <refentrytitle>imat_vec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_vec_mul</refname>
    <refpurpose>return the product of a vector by a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>imat_vec_mul</function></funcdef>
        <paramdef> imat m, vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_vec_mul</function> returns the product of the matrix <parameter>m</parameter> by the vector <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones (3,3);
vec v = vec_new_ones (3);
vec r = imat_vec_mul (m, v);  /* r = [3 3 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_ivec_mul -->

<refentry id=man.imat-ivec-mul>
  <refmeta>
    <refentrytitle>imat_ivec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_ivec_mul</refname>
    <refpurpose>return the product of a vector by a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>imat_ivec_mul</function></funcdef>
        <paramdef> imat m, ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_ivec_mul</function> returns the product of the matrix <parameter>m</parameter> by the vector <parameter>v</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones (3,3);
ivec v = ivec_new_ones (3);
ivec r = imat_ivec_mul (m, v);  /* r = [3 3 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_void -->

<refentry id=man.mat-void>
  <refmeta>
    <refentrytitle>mat_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_void</refname>
    <refpurpose>Set a matrix to void</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_void</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_void</function> sets a matrix to the void matrix, i.e. a matrix containing no element.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones(2,2);  /* Matrix of size 2x2                           */
mat_void( m );              /* Matrix does not contains any element anymore */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_void -->

<refentry id=man.imat-void>
  <refmeta>
    <refentrytitle>imat_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_void</refname>
    <refpurpose>Set a matrix to void</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_void</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>imat_void</function> sets a matrix to the void matrix, i.e. a matrix containing no element.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones(2,2);  /* Matrix of size 2x2                           */
imat_void( m );               /* Matrix does not contains any element anymore */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_void -->

<refentry id=man.bmat-void>
  <refmeta>
    <refentrytitle>bmat_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_void</refname>
    <refpurpose>Set a matrix to void</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_void</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bmat_void</function> sets a matrix to the void matrix, i.e. a matrix containing no element.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_ones(2,2);  /* Matrix of size 2x2                           */
bmat_void( m );               /* Matrix does not contains any element anymore */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_void -->

<refentry id=man.cmat-void>
  <refmeta>
    <refentrytitle>cmat_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_void</refname>
    <refpurpose>Set a matrix to void</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_void</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cmat_void</function> sets a matrix to the void matrix, i.e. a matrix containing no element.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_ones(2,2);  /* Matrix of size 2x2                           */
cmat_void( m );               /* Matrix does not contains any element anymore */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_width -->

<refentry id=man.mat-width>
  <refmeta>
    <refentrytitle>mat_width</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_width</refname>
    <refpurpose>get the width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_width</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the width of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new(5, 7);
int w = mat_width(m); /* w = 7 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_width -->

<refentry id=man.imat-width>
  <refmeta>
    <refentrytitle>imat_width</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_width</refname>
    <refpurpose>get the width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_width</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the width of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new(5, 7);
int w  = imat_width(m); /* w = 7 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_width -->

<refentry id=man.bmat-width>
  <refmeta>
    <refentrytitle>bmat_width</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_width</refname>
    <refpurpose>get the width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bmat_width</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the width of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new(5, 7);
int w  = bmat_width(m); /* w = 7 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_width -->

<refentry id=man.cmat-width>
  <refmeta>
    <refentrytitle>cmat_width</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_width</refname>
    <refpurpose>get the width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cmat_width</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the width of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new(5, 7);
int w  = cmat_width(m); /* w = 7 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Mat_width -->

<refentry id=man.-mat-width>
  <refmeta>
    <refentrytitle>Mat_width</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Mat_width</refname>
    <refpurpose>get the width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>Mat_width</function></funcdef>
        <paramdef> Mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro returns the width of the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

Mat m = Mat_new(float, 5, 7);
int w = Mat_width(m); /* w = 7 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_width_max -->

<refentry id=man.mat-width-max>
  <refmeta>
    <refentrytitle>mat_width_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_width_max</refname>
    <refpurpose>Maximum width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mat_width_max</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the maximum width of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones(5,3);
int width = mat_width_max(m);   /* width=3 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_width_max -->

<refentry id=man.imat-width-max>
  <refmeta>
    <refentrytitle>imat_width_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_width_max</refname>
    <refpurpose>Maximum width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>imat_width_max</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the maximum width of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones(5,3);
int width = imat_width_max(m);   /* width=3 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_width_max -->

<refentry id=man.bmat-width-max>
  <refmeta>
    <refentrytitle>bmat_width_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_width_max</refname>
    <refpurpose>Maximum width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bmat_width_max</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the maximum width of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_ones(5,3);
int width = bmat_width_max(m);   /* width=3 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_width_max -->

<refentry id=man.cmat-width-max>
  <refmeta>
    <refentrytitle>cmat_width_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_width_max</refname>
    <refpurpose>Maximum width of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cmat_width_max</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the maximum width of the matrix <parameter>m</parameter> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum width
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m;
...
int width = cmat_width_max(m);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mat_zeros -->

<refentry id=man.mat-zeros>
  <refmeta>
    <refentrytitle>mat_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mat_zeros</refname>
    <refpurpose>Set the elements of a matrix to 0</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mat_zeros</function></funcdef>
        <paramdef> mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_zeros</function> sets all the elements of the matrix <parameter>m</parameter> to 0. Hence, the size of the matrix <parameter>m</parameter> is not modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

mat m = mat_new_ones (2,2);   /* m = [[1 1]  */
                                      [1 1]  */

mat_zeros (m);                /* m = [[0 0]  */
                                      [0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- imat_zeros -->

<refentry id=man.imat-zeros>
  <refmeta>
    <refentrytitle>imat_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>imat_zeros</refname>
    <refpurpose>Set the elements of a matrix to 0</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>imat_zeros</function></funcdef>
        <paramdef> imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_zeros</function> sets all the elements of the matrix <parameter>m</parameter> to 0. Hence, the size of the matrix <parameter>m</parameter> is not modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

imat m = imat_new_ones (2,2); /* m = [[1 1]  */
                                      [1 1]  */

imat_zeros (m);               /* m = [[0 0]  */
                                      [0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bmat_zeros -->

<refentry id=man.bmat-zeros>
  <refmeta>
    <refentrytitle>bmat_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bmat_zeros</refname>
    <refpurpose>Set the elements of a matrix to 0</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bmat_zeros</function></funcdef>
        <paramdef> bmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_zeros</function> sets all the elements of the matrix <parameter>m</parameter> to 0. Hence, the size of the matrix <parameter>m</parameter> is not modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

bmat m = bmat_new_ones (2,2); /* m = [[1 1]  */
                                      [1 1]  */

bmat_zeros (m);               /* m = [[0 0]  */
                                      [0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cmat_zeros -->

<refentry id=man.cmat-zeros>
  <refmeta>
    <refentrytitle>cmat_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cmat_zeros</refname>
    <refpurpose>set a matrix to 0</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cmat_zeros</function></funcdef>
        <paramdef> cmat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>mat_zeros</function> sets all the elements of the matrix <parameter>m</parameter> to 0. Hence, the size of the matrix <parameter>m</parameter> is not modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

cmat m = cmat_new_ones (2,2); /* m = [[1 1]  */
                                      [1 1]  */

cmat_zeros (m);               /* m = [[0 0]  */
                                      [0 0]  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_mat_mul -->

<refentry id=man.vec-mat-mul>
  <refmeta>
    <refentrytitle>vec_mat_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_mat_mul</refname>
    <refpurpose>return the product of a vector by a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_mat_mul</function></funcdef>
        <paramdef> vec v, mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_mat_mul</function> returns the product of the vector <parameter>v</parameter> by the matrix <parameter>m</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

vec v = vec_new_string ("[1 2]");  /* v = [1 2]     */
mat m = mat_new_ones (2,3);        /* m = [[1 1 1]  
                                           [1 1 1]] */
vec r = vec_mat_mul (v, m);        /* r = [3 3 3]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_imat_mul -->

<refentry id=man.ivec-imat-mul>
  <refmeta>
    <refentrytitle>ivec_imat_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_imat_mul</refname>
    <refpurpose>return the product of a vector by a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_imat_mul</function></funcdef>
        <paramdef> ivec v, imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_imat_mul</function> returns the product of the vector <parameter>v</parameter> by the matrix <parameter>m</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

ivec v = ivec_new_string ("[1 2]");  /* v = [1 2]     */
imat m = imat_new_ones (2,3);        /* m = [[1 1 1]  
                                            [1 1 1]] */
ivec r = ivec_mat_mul (v, m);        /* r = [3 3 3]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_to_mat -->

<refentry id=man.vec-to-mat>
  <refmeta>
    <refentrytitle>vec_to_mat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_to_mat</refname>
    <refpurpose>convert a vector into a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>vec_to_mat</function></funcdef>
        <paramdef> vec v, size_t width
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_to_mat</function> constructs a matrix from a vector <parameter>v</parameter>. The <parameter>width</parameter> first elements of the vector form the first row, the <parameter>width</parameter> next the second  row, and so on. Note that the length of the vector <parameter>v</parameter> should be a multiple of <parameter>width</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

vec v = vec_new_arithm (1, 2, 12); /* v = [1 3 5 7 9 11 13 15 17 19 21 23] */
  
mat m = vec_to_mat (v, 4);        /* m = [[ 1  3  5  7]
                                          [ 9 11 13 15]
                                          [17 19 21 23]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_to_imat -->

<refentry id=man.ivec-to-imat>
  <refmeta>
    <refentrytitle>ivec_to_imat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_to_imat</refname>
    <refpurpose>convert a vector into a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/mat.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>ivec_to_imat</function></funcdef>
        <paramdef> ivec v, size_t width
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_to_imat</function> constructs a matrix from a vector <parameter>v</parameter>. The <parameter>width</parameter> first elements of the vector form the first row, the <parameter>width</parameter> next the second  row, and so on. Note that the length of the vector <parameter>v</parameter> should be a multiple of <parameter>width</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;mat.h&gt;

...

ivec v = ivec_new_arithm (1, 2, 12); /* v = [1 3 5 7 9 11 13 15 17 19 21 23] */
  
imat m = ivec_to_imat (v, 4);        /* m = [[ 1  3  5  7]
                                             [ 9 11 13 15]
                                             [17 19 21 23]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_identity -->

<refentry id=man.itf-identity>
  <refmeta>
    <refentrytitle>itf_identity</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_identity</refname>
    <refpurpose>the identity function</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_identity</function></funcdef>
        <paramdef> double x, void *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>itf_identity</function> function is a very simple it_function which returns the value of the argument <parameter>x</parameter>. It does not have any parameters, therefore, when called directly, <parameter>args</parameter> should be set to NULL. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The same value as 'x'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* this simply returns 2.0 and assign it to x */
double x = itf_identity(2.0, NULL);

/* create the function x-&gt;x^2 by multiplying two identity functions */
it_function_args(itf_mul) mul_args;

/* multiply the identity function with itself */
mul_args.f = itf_identity;
mul_args.f_args = NULL;
mul_args.g = itf_identity;
mul_args.g_args = NULL;

/* compute the value of the product in 1.0 */
itf_mul(1.0, &#38;mul_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_differentiate -->

<refentry id=man.itf-differentiate>
  <refmeta>
    <refentrytitle>itf_differentiate</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_differentiate</refname>
    <refpurpose>differentiation operator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_differentiate</function></funcdef>
        <paramdef> double x, it_function_args(itf_differentiate) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_differentiate</function> defines the differentiate of an it_function_t. The differentiate of the function is approximated by computing the value of the function at <parameter>x</parameter>+delta and <parameter>x</parameter>-delta, and computing the difference divided by two delta. In the current implementation, delta is set to 1e-5, leading to an error in O(1e-10). The differentiation operator has the following parameters, passed through the <parameter>args</parameter> argument.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>function</term>
      <listitem>
      <para>
         The function to differentiate.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>args</term>
      <listitem>
      <para>
         The parameters of the function to differentiate.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The differentiate of the function for a given 'x'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the differentiation parameters */
it_function_args(itf_differentiate) differentiate_args;

/* differentiate the identity function */
differentiate_args.function = itf_identity;
differentiate_args.args = NULL;

/* compute the value of the differentiate at 1.0 */
itf_differentiate(1.0, &#38;differentiate_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_expectation -->

<refentry id=man.itf-expectation>
  <refmeta>
    <refentrytitle>itf_expectation</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_expectation</refname>
    <refpurpose>expectation operator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_expectation</function></funcdef>
        <paramdef> double x, it_function_args(itf_expectation) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_expectation</function> returns the expectation of the an it_function <function>f</function> defined as the integral of t*f(t) over the interval. This is also sometimes called the first moment of the function <function>f</function>. The argument <parameter>x</parameter> corresponds to the upper bound of this integral.  The expectation of the function is approximated by computing the value of the function at various positions between <parameter>a</parameter> and <parameter>x</parameter> and using the Romberg method to compute a fast and accurate approximation. The expectation operator has the following parameters, passed through the <parameter>args</parameter> argument.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>a</term>
      <listitem>
      <para>
         The lower bound of the integral.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>function</term>
      <listitem>
      <para>
         The function on which to compute the expectation.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>args</term>
      <listitem>
      <para>
         The parameters of the function.
      </para>
      </listitem>
    </varlistentry>
     </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    Not really applicable. See the example below.
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the expectation parameters */
it_function_args(itf_expectation) expectation_args;

/* compute the expectation of the identity function,  */
/* limited to the range [0,sqrt(2)]                   */
/* (this defines a valid p.d.f.)                      */
expectation_args.function = itf_identity;
expectation_args.args = NULL;
expectation_args.a = 0.0;
itf_integrate_romberg(sqrt(2.0), &#38;expectation_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_mul -->

<refentry id=man.itf-mul>
  <refmeta>
    <refentrytitle>itf_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_mul</refname>
    <refpurpose>multiplication operator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_mul</function></funcdef>
        <paramdef> double x, it_function_args(itf_sum) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_mul</function> defines the product of two it_function_t. The product of the functions is obtained by computing the value of each function at position <parameter>x</parameter> and returning their product. The product operator has the following parameters, passed through the <parameter>args</parameter> argument.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>f</term>
      <listitem>
      <para>
         The first function to multiply.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>f_args</term>
      <listitem>
      <para>
         The parameters of the first function to multiply.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>g</term>
      <listitem>
      <para>
         The second function to multiply.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>g_args</term>
      <listitem>
      <para>
         The parameters of the second function to multiply.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The product for a given value 'x'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the integration parameters */
it_function_args(itf_mul) mul_args;
/* multiply the identity function with itself */
mul_args.f = itf_identity;
mul_args.f_args = NULL;
mul_args.g = itf_identity;
mul_args.g_args = NULL;
/* compute the value of the product in 1.0 */
itf_mul(1.0, &#38;mul_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_integrate -->

<refentry id=man.itf-integrate>
  <refmeta>
    <refentrytitle>itf_integrate</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_integrate</refname>
    <refpurpose>integration operator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_integrate</function></funcdef>
        <paramdef> double x, it_function_args(itf_integrate) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_integrate</function> defines the integral of an it_function_t. The argument <parameter>x</parameter> corresponds to the upper bound of the integral.  The integral of the function is approximated by computing the value of the function at various positions between <parameter>a</parameter> and <parameter>x</parameter> and using the Romberg method to compute a fast and accurate approximation. The integration operator has the following parameters, passed through the <parameter>args</parameter> argument.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>a</term>
      <listitem>
      <para>
         The lower bound of the integral.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>function</term>
      <listitem>
      <para>
         The function to integrate.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>args</term>
      <listitem>
      <para>
         The parameters of the function to integrate.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The integral for a given value 'x'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the integration parameters */
it_function_args(itf_integrate) integrate_args;

/* integrate the identity function, starting from 0.0 */
integrate_args.function = itf_identity;
integrate_args.args = NULL;
integrate_args.a = 0.0;

/* compute the value of the integral of x between [0,1] */
itf_integrate(1.0, &#38;integrate_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_integrate_romberg -->

<refentry id=man.itf-integrate-romberg>
  <refmeta>
    <refentrytitle>itf_integrate_romberg</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_integrate_romberg</refname>
    <refpurpose>integration operator (Romberg)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_integrate_romberg</function></funcdef>
        <paramdef> double x, it_function_args(itf_integrate_romberg) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_integrate_romberg</function> defines the integral of an it_function_t. The argument <parameter>x</parameter> corresponds to the upper bound of the integral.  The integral of the function is approximated by computing the value of the function at various positions between <parameter>a</parameter> and <parameter>x</parameter> and using the Romberg method to compute a fast and accurate approximation. The integration operator has the following parameters, passed through the <parameter>args</parameter> argument. The precision of this method is given by O(((x-a)/N)^(2p+2)) where the coefficient depends on the (2p+2)-th derivative of the function to integrate.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>a</term>
      <listitem>
      <para>
         The lower bound of the integral.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>function</term>
      <listitem>
      <para>
         The function to integrate.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>args</term>
      <listitem>
      <para>
         The parameters of the function to integrate.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>N</term>
      <listitem>
      <para>
        Number of intervals.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>p</term>
      <listitem>
      <para>
        Precision order.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The integral
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the integration parameters */
it_function_args(itf_integrate_romberg) integrate_args;
/* integrate the identity function, starting from 0.0 */
/* using 20 intervals and a precision order of 10     */
integrate_args.function = itf_identity;
integrate_args.args = NULL;
integrate_args.a = 0.0;
integrate_args.N = 20;
integrate_args.p = 10;
/* compute the value of the integral of x between [0,1] */
itf_integrate_romberg(1.0, &#38;integrate_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_integrate_trapezoid -->

<refentry id=man.itf-integrate-trapezoid>
  <refmeta>
    <refentrytitle>itf_integrate_trapezoid</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_integrate_trapezoid</refname>
    <refpurpose>integration operator (trapezoid)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_integrate_trapezoid</function></funcdef>
        <paramdef> double x, it_function_args(itf_integrate_trapezoid) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_integrate_trapezoid</function> defines the integral of an it_function_t. The argument <parameter>x</parameter> corresponds to the upper bound of the integral.  The integral of the function is approximated by computing the value of the function at various positions between <parameter>a</parameter> and <parameter>x</parameter> and using the trapezoid method to compute a fast approximation. The integration operator has the following parameters, passed through the <parameter>args</parameter> argument. The precision of this method is given by O(((x-a)/N)^2) where the coefficient depends on the second derivative of the function to integrate.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>a</term>
      <listitem>
      <para>
         The lower bound of the integral.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>function</term>
      <listitem>
      <para>
         The function to integrate.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>args</term>
      <listitem>
      <para>
         The parameters of the function to integrate.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>N</term>
      <listitem>
      <para>
        Number of intervals.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The integral
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the integration parameters */
it_function_args(itf_integrate_trapezoid) integrate_args;
/* integrate the identity function, starting from 0.0 */
/* using 20 intervals.                                */
integrate_args.function = itf_identity;
integrate_args.args = NULL;
integrate_args.a = 0.0;
integrate_args.N = 20;
/* compute the value of the integral of x between [0,1] */
itf_integrate_trapezoid(1.0, &#38;integrate_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_compose -->

<refentry id=man.itf-compose>
  <refmeta>
    <refentrytitle>itf_compose</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_compose</refname>
    <refpurpose>function composition</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_compose</function></funcdef>
        <paramdef> double x, it_function_args(itf_compose) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_compose</function> defines the composition of two it_function_t. The composition of the functions is obtained by computing the value of the function <function>g</function> at position <parameter>x</parameter> and the value of the function <function>f</function> at the position <parameter>g(x)</parameter>. The composition operator has the following parameters, passed through the <parameter>args</parameter> argument.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>f</term>
      <listitem>
      <para>
         The function called last.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>f_args</term>
      <listitem>
      <para>
         The  parameters of the function called last.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>g</term>
      <listitem>
      <para>
         The function called first.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>g_args</term>
      <listitem>
      <para>
         The parameters of the function called first.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The value of the composed function for a given 'x'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the integration parameters */
it_function_args(itf_compose) compose_args;
/* compose the identity function with itself */
compose_args.f = itf_identity;
compose_args.f_args = NULL;
compose_args.g = itf_identity;
compose_args.g_args = NULL;
/* compute the value of the composition in 1.0 */
itf_compose(1.0, &#38;compose_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- itf_sum -->

<refentry id=man.itf-sum>
  <refmeta>
    <refentrytitle>itf_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>itf_sum</refname>
    <refpurpose>sum operator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/math.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>itf_sum</function></funcdef>
        <paramdef> double x, it_function_args(itf_sum) *args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The function <function>itf_sum</function> defines the sum of two it_function_t. The sum of the functions is obtained by computing the value of each function at position <parameter>x</parameter> and returning their sum. The sum operator has the following parameters, passed through the <parameter>args</parameter> argument.</para>
<refsect2>
    <title>Function parameters</title>
    <variablelist>
    <varlistentry>
      <term>f</term>
      <listitem>
      <para>
         The first function to sum.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>f_args</term>
      <listitem>
      <para>
         The parameters of the first function to sum.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>g</term>
      <listitem>
      <para>
         The second function to sum.
      </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>g_args</term>
      <listitem>
      <para>
         The parameters of the second function to sum.
      </para>
      </listitem>
    </varlistentry>
    </variablelist>
</refsect2>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sum for a given 'x'
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;math.h&gt;

...

/* declare the integration parameters */
it_function_args(itf_sum) sum_args;

/* sum the identity function with itself */
sum_args.f = itf_identity;
sum_args.f_args = NULL;
sum_args.g = itf_identity;
sum_args.g_args = NULL;

/* compute the value of the sum in 1.0 */
itf_sum(1.0, &#38;sum_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_delete -->

<refentry id=man.parser-delete>
  <refmeta>
    <refentrytitle>parser_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_delete</refname>
    <refpurpose>free a parser object</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>parser_delete</function></funcdef>
        <paramdef> parser_t * p
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_delete</function> free a parser that has been previously allocated with the function <function>parser_new</function>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);

...

parser_delete (p);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_exists -->

<refentry id=man.parser-exists>
  <refmeta>
    <refentrytitle>parser_exists</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_exists</refname>
    <refpurpose>check if a variable exists</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>parser_exists</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_exists</function> checks if a variable exists. This is useful to manage optional arguments, or arguments that depend on another parsing variable.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    1 if the variable has been found, otherwise 0
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * parser = parser_init (argc, argv, NULL, NULL);

if (!parser_exists (parser,"-i"))
  printf ("Input argument not defined");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_double -->

<refentry id=man.parser-get-double>
  <refmeta>
    <refentrytitle>parser_get_double</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_double</refname>
    <refpurpose>read a double</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>parser_get_double</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_double</function> retrieves a variable of type <parameter>double</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the double value read from the source
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
double dbl   = parser_get_double (p, "mydouble");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_mat -->

<refentry id=man.parser-get-mat>
  <refmeta>
    <refentrytitle>parser_get_mat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_mat</refname>
    <refpurpose>read a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>parser_get_mat</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_mat</function> retrieves a matrix variable of type <parameter>mat</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the matrix read from the sources
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
mat m        = parser_get_mat (p, "m");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_imat -->

<refentry id=man.parser-get-imat>
  <refmeta>
    <refentrytitle>parser_get_imat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_imat</refname>
    <refpurpose>read a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>parser_get_imat</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_imat</function> retrieves a matrix variable of type <parameter>imat</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the matrix read by the parser
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
imat im      = parser_get_imat (p, "mymat");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_bmat -->

<refentry id=man.parser-get-bmat>
  <refmeta>
    <refentrytitle>parser_get_bmat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_bmat</refname>
    <refpurpose>read a matrix of byte</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bmat <function>parser_get_bmat</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_bmat</function> retrieves a matrix variable of type <parameter>bmat</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the matrix
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
bmat im      = parser_get_bmat (p, "mybmat");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_cmat -->

<refentry id=man.parser-get-cmat>
  <refmeta>
    <refentrytitle>parser_get_cmat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_cmat</refname>
    <refpurpose>read a matrix of complexes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cmat <function>parser_get_cmat</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_cmat</function> retrieves a matrix variable of type <parameter>cmat</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the matrix read
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
cmat cm    = parser_get_cmat( p, "cm");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_int -->

<refentry id=man.parser-get-int>
  <refmeta>
    <refentrytitle>parser_get_int</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_int</refname>
    <refpurpose>read an integer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>parser_get_int</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_int</function> retrieves a integer variable of type <parameter>int</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the integer read
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
int i      = parser_get_int( parser, "myint" );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_cplx -->

<refentry id=man.parser-get-cplx>
  <refmeta>
    <refentrytitle>parser_get_cplx</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_cplx</refname>
    <refpurpose>read a complex</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>parser_get_cplx</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_cplx</function> retrieves a complex variable of type <parameter>cplx</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the complex read from the source of the parser
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
cplx         = parser_get_cplx (p, "mycplx");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_string -->

<refentry id=man.parser-get-string>
  <refmeta>
    <refentrytitle>parser_get_string</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_string</refname>
    <refpurpose>read a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>char * <function>parser_get_string</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_string</function> retrieves a string variable of type 'char *' with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the string
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
char * s     = parser_get_string (p, "mystring");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_vec -->

<refentry id=man.parser-get-vec>
  <refmeta>
    <refentrytitle>parser_get_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_vec</refname>
    <refpurpose>read a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>parser_get_vec</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_vec</function> retrieves a vector of type <parameter>vec</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the vector read from the sources
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
vec v        = parser_get_vec (p, "v");

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_ivec -->

<refentry id=man.parser-get-ivec>
  <refmeta>
    <refentrytitle>parser_get_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_ivec</refname>
    <refpurpose>read a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>parser_get_ivec</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_ivec</function> retrieves a vector of type <parameter>ivec</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of integers read by the parser
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
vec v        = parser_get_vec (p, "myvec");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_bvec -->

<refentry id=man.parser-get-bvec>
  <refmeta>
    <refentrytitle>parser_get_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_bvec</refname>
    <refpurpose>read a vector of bytes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>parser_get_bvec</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_bvec</function> retrieves a vector of type 'bvec with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
bvec bv      = parser_get_bvec (p, "myvectorofbyte");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_cvec -->

<refentry id=man.parser-get-cvec>
  <refmeta>
    <refentrytitle>parser_get_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_cvec</refname>
    <refpurpose>read a complex vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>parser_get_cvec</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_cvec</function> retrieves a vector of type <parameter>cvec</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the vector of complex read from the sources
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
cvec cv      = parser_get_cvec (p, "cv");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_get_byte -->

<refentry id=man.parser-get-byte>
  <refmeta>
    <refentrytitle>parser_get_byte</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_get_byte</refname>
    <refpurpose>read a byte with a parser</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>parser_get_byte</function></funcdef>
        <paramdef> const parser_t * p, const char * varname
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>parser_get_byte</function> retrieves a vector of type <parameter>byte</parameter> with the parser. The variable <parameter>varname</parameter> is the name of the variable to be found.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the byte read with the parser
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);
byte b       = parser_get_byte (p, "mybyte");
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_init -->

<refentry id=man.parser-init>
  <refmeta>
    <refentrytitle>parser_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_init</refname>
    <refpurpose>Allocation and initialization of a parser</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>parser_t * <function>parser_init</function></funcdef>
        <paramdef> int argc, char ** argv, const char * filename, char * cmd_line
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Creation and initialisation of a parser. This initialization requires 4 arguments, from the one which has the higher priority to the one of the lower priority. The first two (<parameter>argc</parameter> and <parameter>argv</parameter>) correspond to the command line. The <parameter>filename</parameter> argument is the name of the file from which some variables must be read. The final argument, <parameter>cmd_line</parameter>, is a string which allows to have default values for arguments
Any of these arguments may be NULL (or 0 for argc). In that case the corresponding source (either the command line, a file or the string of default value) is ignored). 
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    a pointer on the parser object
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

/* Initialization of the parser from the command line arguments, a file parameter and a string of default parameter                               */
parser_t * parser = parser_init(argc, argv, 
                                "test_parser.param", 
		                "a=-35\ndef=9\nv=[-1,-2,-3]\ncv=[i 1 -i 1+i]" );

int i      = parser_get_int( parser, "a" );
int def    = parser_get_int( parser, "def" );
double dbl = parser_get_double( parser, "dbl" );
char * s   = parser_get_string( parser, "S" );
vec v      = parser_get_vec( parser, "V2" );
ivec iv    = parser_get_ivec( parser, "V" );
cvec cv    = parser_get_cvec( parser, "cv" );
mat m      = parser_get_mat( parser, "m");
cmat cm    = parser_get_cmat( parser, "cm");

/* Print the content of the parser */
parser_print( parser );

/* Delete the parser allocated by function parser_init */
parser_delete( parser );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- parser_print -->

<refentry id=man.parser-print>
  <refmeta>
    <refentrytitle>parser_print</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>parser_print</refname>
    <refpurpose>print the content parsed by a parser</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/parser.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>parser_print</function></funcdef>
        <paramdef> parser_t * p
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <parameter>parser_print</parameter> displays the content parsed by a parser. Note that it does not analyze the kind of data read by the parser: it basically juste display the sources taken by the parser in the retrieval order.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;parser.h&gt;

...

parser_t * p = parser_new (argc, arv, NULL, NULL);

/* Print the content of the parser */
parser_print (p);

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- lloyd_max -->

<refentry id=man.lloyd-max>
  <refmeta>
    <refentrytitle>lloyd_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>lloyd_max</refname>
    <refpurpose>generate the Lloyd-Max quantizer codebook</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>lloyd_max</function></funcdef>
        <paramdef> it_function_t function, it_args_t args, double a, double b, int N);
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>Generate the codebook for the Lloyd-Max quantizer on <parameter>N</parameter> levels. This is the optimal codebook for a stationnary i.i.d. source. [<parameter>a</parameter>,<parameter>b</parameter>] is an initial interval where to expect the pdf <parameter>function</parameter> to be non-zero. A good guess is [ mean - std_dev, mean + std_dev ]. Note that returned centroids may lie outside this interval. The algorithm stops when the relative difference in distortion is smaller than the IT_EPSILON constant. The parameter <parameter>args</parameter> is used to specify the extra parameters of the pdf function <parameter>function</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;quantizer.h&gt;

...

it_function_args(itf_gaussian) itf_gaussian_args;
vec codebook;
itf_gaussian_args.sigma = 1.0;
codebook = lloyd_max(itf_gaussian, &#38;itf_gaussian_args, -5, 5, 4);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_dequantize -->

<refentry id=man.it-dequantize>
  <refmeta>
    <refentrytitle>it_dequantize</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_dequantize</refname>
    <refpurpose>dequantize a single index</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>it_dequantize</function></funcdef>
        <paramdef> it_quantizer_t *q, int i
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function dequantizes the index <parameter>i</parameter> using the dequantizer <parameter>q</parameter> and returns the reconstructed value.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_dequantize_mat -->

<refentry id=man.it-dequantize-mat>
  <refmeta>
    <refentrytitle>it_dequantize_mat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_dequantize_mat</refname>
    <refpurpose>dequantize a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>it_dequantize_mat</function></funcdef>
        <paramdef> it_quantizer_t *q, imat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function dequantizes the matrix <parameter>m</parameter> and returns the matrix of reconstructed values. The matrix is processed row by row, using the vector dequantizer provided by <parameter>q</parameter> on each row.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_dequantize_vec -->

<refentry id=man.it-dequantize-vec>
  <refmeta>
    <refentrytitle>it_dequantize_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_dequantize_vec</refname>
    <refpurpose>dequantize a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>it_dequantize_vec</function></funcdef>
        <paramdef> it_quantizer_t *q, ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function dequantizes the vector <parameter>v</parameter> using the dequantizer <parameter>q</parameter> and returns the vector of reconstructed values.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_quantize -->

<refentry id=man.it-quantize>
  <refmeta>
    <refentrytitle>it_quantize</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_quantize</refname>
    <refpurpose>quantize a single value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>it_quantize</function></funcdef>
        <paramdef> it_quantizer_t *q, double v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function quantizes the value <parameter>v</parameter> using the quantizer <parameter>q</parameter> and returns the corresponding index.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_quantize_mat -->

<refentry id=man.it-quantize-mat>
  <refmeta>
    <refentrytitle>it_quantize_mat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_quantize_mat</refname>
    <refpurpose>quantize a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>it_quantize_mat</function></funcdef>
        <paramdef> it_quantizer_t *q, mat m
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function quantizes the matrix <parameter>m</parameter> by processing it row by row. Each row is vector quantized using the quantizer <parameter>q</parameter>. The matrix with rows corresponding to the quantized index vectors is returned.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_quantize_vec -->

<refentry id=man.it-quantize-vec>
  <refmeta>
    <refentrytitle>it_quantize_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_quantize_vec</refname>
    <refpurpose>quantize a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>it_quantize_vec</function></funcdef>
        <paramdef> it_quantizer_t *q, vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function quantizes the vector <parameter>v</parameter> using the quantizer <parameter>q</parameter> and returns the vector of corresponding indexes.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_uniform_quantizer_new_from_center -->

<refentry id=man.it-uniform-quantizer-new-from-center>
  <refmeta>
    <refentrytitle>it_uniform_quantizer_new_from_center</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_uniform_quantizer_new_from_center</refname>
    <refpurpose>create a uniform scalar quantizer from center</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_uniform_quantizer_new_from_center</function></funcdef>
        <paramdef> double center, double step, double factor
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a new uniform scalar quantizer object from the center of the  quantization codebook <parameter>center</parameter> (i.e. the reconstruction value corresponding to the symbol <parameter>0</parameter>) and the stepsize <parameter>step</parameter>. The <parameter>factor</parameter> arguments is used to create a dead-zone around the central reconstruction value, that is the bin for the <parameter>0</parameter> symbol is <parameter>factor</parameter> times the size of the bin for other symbols. For classical uniform quantization it is set to 1.0, whereas dead-zone quantization usually refers to <parameter>factor</parameter>=2.0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;quantizer.h&gt;

...

/* create a new uniform quantizer with step 1/256 centered on 0
   with a dead-zone of twice the step size                      */
it_uniform_quantizer_t uniq =
      it_uniform_quantizer_new_from_center(0, 1/256., 2.0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_uniform_quantizer_new_from_range -->

<refentry id=man.it-uniform-quantizer-new-from-range>
  <refmeta>
    <refentrytitle>it_uniform_quantizer_new_from_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_uniform_quantizer_new_from_range</refname>
    <refpurpose>create a uniform scalar quantizer from range</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/quantizer.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_uniform_quantizer_new_from_range</function></funcdef>
        <paramdef> int n, double min, double max
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a new uniform scalar quantizer object from the range of values to be quantized specified by [<parameter>min</parameter>,<parameter>max</parameter>] and the number of centroids specified by <parameter>n</parameter>. These centroids are equally spaced, with each bin having a step size of (<parameter>max</parameter>-<parameter>min</parameter>) / <parameter>n</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;quantizer.h&gt;

...

/* create a new uniform quantizer with 256 levels
   equally spread in the [0,1] range              */
it_uniform_quantizer_t uniq =
    it_uniform_quantizer_new_from_range(256, 0.0, 1.0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_rand_int31 -->

<refentry id=man.mt19937-rand-int31>
  <refmeta>
    <refentrytitle>mt19937_rand_int31</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_rand_int31</refname>
    <refpurpose>generates an uniform pseudo-random number (31 bit)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>mt19937_rand_int31</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates an uniformly-distributed pseudo-random number in the [0,0x7fffffff]-interval. 

Like all other functions having mt19937 in their name, they are intended to use advanced features of the MT19937.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    31 bit uniformly-distributed pseudo-random number
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand( 12345 );          /* init with seed 12345               */
int r = mt19937_rand_int31();    /* r is the first int from above seed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_rand_int32 -->

<refentry id=man.mt19937-rand-int32>
  <refmeta>
    <refentrytitle>mt19937_rand_int32</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_rand_int32</refname>
    <refpurpose>generates an uniform pseudo-random number (32 bit)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>unsigned int <function>mt19937_rand_int32</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Generates an uniform pseudo-random unsigned int in the [0,0xffffffff]-interval.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    32 bit uniformly-distributed pseudo-random number
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand( 12345 );                /* init with seed 12345 */
unsigned int r = mt19937_rand_int32(); /* r is the first number from above seed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_rand_real1 -->

<refentry id=man.mt19937-rand-real1>
  <refmeta>
    <refentrytitle>mt19937_rand_real1</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_rand_real1</refname>
    <refpurpose>generates an uniform pseudo-random real number </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mt19937_rand_real1</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates an uniformly-distributed real number in the [0,1]-real-interval. 

Like all other functions having mt19937 in their name, they are intended to use advanced features of the MT19937.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    uniformly-distributed real number in [0,1]
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand( 12345 ); 
double r = mt19937_rand_real1(); /* first real number from above seed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_rand_real2 -->

<refentry id=man.mt19937-rand-real2>
  <refmeta>
    <refentrytitle>mt19937_rand_real2</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_rand_real2</refname>
    <refpurpose>generates an uniform pseudo-random real number </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mt19937_rand_real2</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates an uniformly-distributed real number in the [0,1)-real-interval. 

Like all other functions having mt19937 in their name, they are intended to use advanced features of the MT19937.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    uniformly-distributed real number in [0,1)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand( 12345 ); 
double r = mt19937_rand_real2(); /* first real number from above seed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_rand_real3 -->

<refentry id=man.mt19937-rand-real3>
  <refmeta>
    <refentrytitle>mt19937_rand_real3</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_rand_real3</refname>
    <refpurpose>generates an uniform pseudo-random real number </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mt19937_rand_real3</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates an uniformly-distributed real number in the (0,1)-real-interval. 

Like all other functions having mt19937 in their name, they are intended to use advanced features of the MT19937.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    uniformly-distributed real number in (0,1)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand( 12345 ); 
double r = mt19937_rand_real3(); /* first real number from above seed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_rand_res53 -->

<refentry id=man.mt19937-rand-res53>
  <refmeta>
    <refentrytitle>mt19937_rand_res53</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_rand_res53</refname>
    <refpurpose>generates an uniform pseudo-random real number </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>mt19937_rand_res53</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates an uniformly-distributed real number in the [0,1)-real-interval with 53-bit resolution. 

Like all other functions having mt19937 in their name, they are intended to use advanced features of the MT19937.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    uniformly-distributed real number in [0,1] (53 bit)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand( 12345 ); 
double r = mt19937_rand_res53(); /* first real number from above seed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_srand -->

<refentry id=man.mt19937-srand>
  <refmeta>
    <refentrytitle>mt19937_srand</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_srand</refname>
    <refpurpose>seeds the MT19937 PRNG</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mt19937_srand</function></funcdef>
        <paramdef> unsigned int seed
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function seeds the MT19937 PRNG with seed <parameter>seed</parameter>. This is a 32 bit initialization. 

Like all other function having mt19937 in their name, it is intended to use advanced features of this generator. 

See <function>mt19937_srand_by_array</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

mt19937_srand ( 12345 );      /* init with seed 12345             */ 
mt19937_rand_int32 ();        /* get first number from seed above */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- mt19937_srand_by_array -->

<refentry id=man.mt19937-srand-by-array>
  <refmeta>
    <refentrytitle>mt19937_srand_by_array</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>mt19937_srand_by_array</refname>
    <refpurpose>seeds the MT19937 PRNG with an array</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>mt19937_srand_by_array</function></funcdef>
        <paramdef> unsigned int init_key[], unsigned int key_length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function allows to initialize the MT19937 PRNG with an array of arbitrary length. <parameter>key_length</parameter> is the size of the array. For people needing more than 32 bit seed space. 

Like all other functions having mt19937 in their names, they are intended to use advanced features of the MT19937 PRNG. 

See <function>mt19937_srand_by_array</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

unsigned int ar=[ 1 2 3 4 ];                      /* seed array */ 

mt19937_srand_by_array( ar, 4 );                  /* init PRNG with array */ 
mt19937_rand_int32();                             /* runs the PRNG */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_rand -->

<refentry id=man.it-rand>
  <refmeta>
    <refentrytitle>it_rand</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_rand</refname>
    <refpurpose>uniform random number generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>it_rand</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a single random value drawn in the range [0,1] from a uniform distribution. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The generated number
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

double r = it_rand();
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_randn -->

<refentry id=man.it-randn>
  <refmeta>
    <refentrytitle>it_randn</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_randn</refname>
    <refpurpose>normal pseudo-random number generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>it_randn</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a single random value drawn from a normal distribution (Gaussian with zero mean and variance equal to one). We use 256-level Ziggurat method from Marsaglia and Tsang (much faster than Box-Mueller).  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    normal pseudo-random number
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

double r = randn();
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_randomize -->

<refentry id=man.it-randomize>
  <refmeta>
    <refentrytitle>it_randomize</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_randomize</refname>
    <refpurpose>initialize the random number generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_randomize</function></funcdef>
        <paramdef> void
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function initializes the random number generator using the system time. Note that this function is unsecure (in the sense that it shouldn't be used in cryptographic applications) as system time is easily predictable.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

double r;
r = it_rand(); /* same value each time the program is executed */
it_randomize();
r = it_rand(); /* different value each time the program is executed */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_randpdf -->

<refentry id=man.it-randpdf>
  <refmeta>
    <refentrytitle>it_randpdf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_randpdf</refname>
    <refpurpose>generic random number generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>it_randpdf</function></funcdef>
        <paramdef> double a, double b, it_function_t pdf, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>it_randpdf</function> generates a random value drawn from the distribution <parameter>pdf</parameter>. This distribution is assumed to be null outside the range [<parameter>a</parameter>, <parameter>b</parameter>] and to attain its maximal value in 0. Specific parameters for the distribution function are passed through the <parameter>args</parameter> argument.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A realisation of the random variable defined by the probability distribution function
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

/* draw a random laplacian sample */
double s = it_randpdf(-10, 10, laplacian_pdf, &#38;laplacian_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_seed -->

<refentry id=man.it-seed>
  <refmeta>
    <refentrytitle>it_seed</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_seed</refname>
    <refpurpose>initialize the random number generator from a seed</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/random.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_seed</function></funcdef>
        <paramdef> unsigned int seed
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function initializes the random number generator using the seed specified in <parameter>seed</parameter>. A random number generator initialized with a given seed always produces the same sequence of numbers. Note that this function is unsecure (in the sense that it shouldn't be used in cryptographic applications) as the key space is limited to 32-bits.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;random.h&gt;

...

double r;
it_randomize();
r = it_rand(); /* unknown value at each execution */
it_seed(0xdeadbeef);
r = it_rand(); /* always the same value at each execution */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_separable2D -->

<refentry id=man.it-separable2D>
  <refmeta>
    <refentrytitle>it_separable2D</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_separable2D</refname>
    <refpurpose>apply a transform separably</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/separable2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>it_separable2D</function></funcdef>
        <paramdef> mat m, it_transform_t
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function applies the 1D transform specified by <parameter>t</parameter> separably on the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_iseparable2D -->

<refentry id=man.it-iseparable2D>
  <refmeta>
    <refentrytitle>it_iseparable2D</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_iseparable2D</refname>
    <refpurpose>apply an inverse transform separably</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/separable2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>it_iseparable2D</function></funcdef>
        <paramdef> mat m, it_transform_t t
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function applies the 1D inverse transform specified by <parameter>t</parameter> separably on the matrix <parameter>m</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- entropy_markov -->

<refentry id=man.entropy-markov>
  <refmeta>
    <refentrytitle>entropy_markov</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>entropy_markov</refname>
    <refpurpose>Return the entropy rate of a Markov source</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>entropy_markov</function></funcdef>
        <paramdef> mat pt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the entropy rate, i.e. the minimum achievable average description length of a source defined by a finite-state Markov chain. This finite-state Markov chain is defined by its matrix transition of probabilities.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- histogram -->

<refentry id=man.histogram>
  <refmeta>
    <refentrytitle>histogram</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>histogram</refname>
    <refpurpose>Process the histogram of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>histogram</function></funcdef>
        <paramdef> int omega, ivec S
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>histogram</function> counts the number of occurences of each symbol in the vector <function>S</function>. The counting is restricted to the set of symbols standing in the interval [0..<parameter>omega</parameter>-1].   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- histogram_normalized -->

<refentry id=man.histogram-normalized>
  <refmeta>
    <refentrytitle>histogram_normalized</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>histogram_normalized</refname>
    <refpurpose>Process the normalized histogram of a source</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>histogram_normalized</function></funcdef>
        <paramdef> int omega, ivec S
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>histogram_normalized</function> is very similar to the function <function>histogram</function>. 
The difference is that it returns a normalized vector of double, which can be seen as the observed probability distribution function defined by <parameter>S</parameter>.    </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- histogram_cond -->

<refentry id=man.histogram-cond>
  <refmeta>
    <refentrytitle>histogram_cond</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>histogram_cond</refname>
    <refpurpose>Process the conditional histogram of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>imat <function>histogram_cond</function></funcdef>
        <paramdef> int omega, ivec S
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>histogram_cond</function> processes the bi-dimensional histogram of a vector. In other words, it counts the number of occurence of couples in the sequence.
This function can be used to estimate the conditional probabilities of an observed sequence.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_gaussian -->

<refentry id=man.source-gaussian>
  <refmeta>
    <refentrytitle>source_gaussian</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_gaussian</refname>
    <refpurpose>gaussian source generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>source_gaussian</function></funcdef>
        <paramdef> size_t size, double mean, double std
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a random continuous vector of length <parameter>size</parameter> where each sample is drawn from a Gaussian distribution of mean <parameter>mean</parameter> and standard deviation <parameter>std</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source.h&gt;

...

vec v = source_gaussian(10, 0.0, 1.0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_memoryless -->

<refentry id=man.source-memoryless>
  <refmeta>
    <refentrytitle>source_memoryless</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_memoryless</refname>
    <refpurpose>generic dicrete source generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>source_memoryless</function></funcdef>
        <paramdef> size_t size, vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a random discrete vector of length <parameter>size</parameter> where each sample is drawn from the distribution <parameter>pdf</parameter>. The length of the <parameter>pdf</parameter> vector gives the cardinality of the source alphabet, with each element representing the probability of the corresponding symbol. Therefore, the sum of the <parameter>pdf</parameter> vector must be equal to one.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source.h&gt;

...

vec pdf = vec_new_string("0.5 0.3 0.1 0.1"); /* probability density function */
S = source_memoryless(20, pdf );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_binary -->

<refentry id=man.source-binary>
  <refmeta>
    <refentrytitle>source_binary</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_binary</refname>
    <refpurpose>binary source generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>source_binary</function></funcdef>
        <paramdef> size_t size, double p0
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a random binary vector of <parameter>size</parameter> bits where the probability of the 0 symbol is given by <parameter>p0</parameter> and the probability of the <parameter>1</parameter> symbol is given by 1-<parameter>p0</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source.h&gt;

...

bvec v = source_binary(10, 0.5);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_pdf -->

<refentry id=man.source-pdf>
  <refmeta>
    <refentrytitle>source_pdf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_pdf</refname>
    <refpurpose>generic continuous source generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>source_pdf</function></funcdef>
        <paramdef> size_t size, double a, double b, it_function_t pdf, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a random continuous vector of length <parameter>size</parameter> where each sample is drawn from the distribution <parameter>pdf</parameter>. This distribution is assumed to be null outside the range [<parameter>a</parameter>, <parameter>b</parameter>] and to attain its maximal value in 0. Specific parameters for the distribution function are passed through the <parameter>args</parameter> argument.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source.h&gt;

...

/* parameters of the Laplacian distribution */
it_function_args(laplacian_pdf) {
  double lambda;
};
/* Laplacian probability density function definition (symmetric) */
it_function(laplacian_pdf)
{
  double lambda = it_this-&#38;gt;lambda;
  return(1. / (2.*lambda) * exp(-fabs(x) / lambda));
}
/*-- generate a random number according to this p.d.f. --*/
/* declare the Laplacian parameters */
it_function_args(laplacian_pdf) laplacian_args;
/* set the Laplacian parameter lambda to 1/sqrt(2) (variance equal to 1) */
laplacian_args.lambda = 1/sqrt(2.0);
/* generate laplacian source of 20 samples, assuming the distribution is */
/* null outside the range [-10,10]                                       */
double s = source_pdf(10, -10, 10, laplacian_pdf, &#38;#38;laplacian_args);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_uniform -->

<refentry id=man.source-uniform>
  <refmeta>
    <refentrytitle>source_uniform</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_uniform</refname>
    <refpurpose>uniform source generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>source_uniform</function></funcdef>
        <paramdef> size_t size, double a, double b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates a random continuous vector of length <parameter>size</parameter> where each sample is drawn in the range [<parameter>a</parameter>, <parameter>b</parameter>] from a uniform distribution. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source.h&gt;

...

vec v = source_uniform(10, 0.0, 1.0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- is_valid_markov_matrix -->

<refentry id=man.is-valid-markov-matrix>
  <refmeta>
    <refentrytitle>is_valid_markov_matrix</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>is_valid_markov_matrix</refname>
    <refpurpose>Verify that a matrix is a valid markov matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>is_valid_markov_matrix</function></funcdef>
        <paramdef> mat pt, double tol
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>is_valid_markov_matrix</function> verifies that a matrix <parameter>pt</parameter> is a valid markov matrix. In order to be a matrix defining a valid Markov chain, a matrix must be so that all the elements must stands between 0 and 1 and so that the sum of each column must be equal to 1. The value of 1 must be achieved with an tolerance (interval of error) lower than the parameter <parameter>tol</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- is_valid_pdf -->

<refentry id=man.is-valid-pdf>
  <refmeta>
    <refentrytitle>is_valid_pdf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>is_valid_pdf</refname>
    <refpurpose>Check if a vector defines a valid pdf</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>is_valid_pdf</function></funcdef>
        <paramdef> vec pdf, double tol
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>is_valid_pdf</function> verifies that the summation of the vector <parameter>pdf</parameter>, seen as the probability distribution function over a finite set, is equal to 1 with the tolerance <parameter>tol</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_estim_GG_from_histo -->

<refentry id=man.source-estim-GG-from-histo>
  <refmeta>
    <refentrytitle>source_estim_GG_from_histo</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_estim_GG_from_histo</refname>
    <refpurpose>estimate the parameters of a generalized Gaussian</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_fit.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>source_estim_GG_from_histo</function></funcdef>
        <paramdef> vec pdf, vec symbols, double * alpha, double * beta
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>This function estimates the parameters of a generalized Gaussian distribution (GGD) by minimizing the Kullback-Leibler distance between the estimated GGD and the histogram <parameter>pdf</parameter>. The values associated to each symbol of the alphabet are given in <parameter>symbols</parameter>. Therefore, <parameter>symbols</parameter> has the same size as <parameter>pdf</parameter>, which must sum to one. The estimated alpha and beta parameters of the GGD are returned at the address pointed by the <parameter>alpha</parameter> and <parameter>beta</parameter> arguments. These arguments are also used as the initial GGD parameters for the minimization.</para>
<para>The generalized Gaussian distribution is defined as GGD(x) = exp(-(|x| / <parameter>alpha</parameter>)**<parameter>beta</parameter>).</para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_pdf_GG -->

<refentry id=man.source-pdf-GG>
  <refmeta>
    <refentrytitle>source_pdf_GG</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_pdf_GG</refname>
    <refpurpose>discrete GGD generator</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_fit.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>source_pdf_GG</function></funcdef>
        <paramdef> vec symbols, double alpha, double beta
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function generates an approximate of the generalized Gaussian distribution for a discrete source taking values in the <parameter>symbols</parameter> alphabet. The <parameter>alpha</parameter> and <parameter>beta</parameter> arguments are the parameters of the generalized Gaussian distribution, which is defined as GGD(x) = exp(-(|x| / <parameter>alpha</parameter>)**<parameter>beta</parameter>). </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- entropy -->

<refentry id=man.entropy>
  <refmeta>
    <refentrytitle>entropy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>entropy</refname>
    <refpurpose>first-order entropy rate of a discrete source</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_func.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>entropy</function></funcdef>
        <paramdef> vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the entropy rate, i.e. the minimum achievable average description length of a discrete first-order source described by <parameter>pdf</parameter>. This vector gives the probability of each symbol.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source_func.h&gt;

...

vec pdf = vec_new_string("0.5 0.3 0.2");
double H = entropy(pdf);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- entropy_bin -->

<refentry id=man.entropy-bin>
  <refmeta>
    <refentrytitle>entropy_bin</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>entropy_bin</refname>
    <refpurpose>first-order entropy rate of a binary source</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_func.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>entropy_bin</function></funcdef>
        <paramdef> double p0
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the entropy rate, i.e. the minimum achievable average description length of a binary first-order source described by <parameter>p0</parameter>. This value is the probability of the <parameter>0</parameter> symbol.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source_func.h&gt;

...

double p0 = 0.1; /* a binary source with mostly '1' */
double H = entropy_bin(p0);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- markov_marg_pdf -->

<refentry id=man.markov-marg-pdf>
  <refmeta>
    <refentrytitle>markov_marg_pdf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>markov_marg_pdf</refname>
    <refpurpose>stationary distribution of a Markov chain</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_func.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>markov_marg_pdf</function></funcdef>
        <paramdef> mat pt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the stationary probability density function of a Markov chain defined by its transition matrix pt. It uses the Froebenius theorem stating that this p.d.f. is obtained from the normalized eigen vector of <parameter>pt</parameter> corresponing to the eigen value 1. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source_func.h&gt;

...

mat cpdf = mat_new(2,2);
cpdf[0][0] = 0.6; /* Pr(0|0) */
cpdf[1][0] = 0.4; /* Pr(1|0) */
cpdf[0][1] = 0.5; /* Pr(0|1) */
cpdf[1][1] = 0.5; /* Pr(1|1) */
                                                 /* cpdf = [ [ 0.6 0.5 ]
                                                             [ 0.4 0.5 ] ]   */
/* estimate the stationary law */
vec pdf = markov_marg_pdf(cpdf);                 /* pdf = [0.555 0.444]      */
                                                 /*     = [5/9 4/9]          */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_expectation -->

<refentry id=man.source-expectation>
  <refmeta>
    <refentrytitle>source_expectation</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_expectation</refname>
    <refpurpose>compute the expectation of a discrete source</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_func.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>source_expectation</function></funcdef>
        <paramdef> vec pdf, vec symbols
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the expectation of a discrete source represented its probability density function <parameter>pdf</parameter> and the value associated to each symbol, stored in <parameter>symbols</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source_func.h&gt;

...

vec pdf = vec_new_string("0.5 0.3 0.1 0.1"); /* probability density function */
vec rec = vec_new_string("-1 0 1.5 2.5");    /* values of the symbols        */
/* compute the expectation of the source */
double mean = source_expectation(pdf, rec);  /* -0.5 + 0.15 + 0.25 = -0.1    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- source_variance -->

<refentry id=man.source-variance>
  <refmeta>
    <refentrytitle>source_variance</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>source_variance</refname>
    <refpurpose>compute the variance of a discrete source</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/source_func.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>source_variance</function></funcdef>
        <paramdef> vec pdf, vec symbols
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the variance of a discrete source represented its probability density function <parameter>pdf</parameter> and the value associated to each symbol, stored in <parameter>symbols</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;source_func.h&gt;

...

vec pdf = vec_new_string("0.5 0.3 0.1 0.1"); /* probability density function */
vec rec = vec_new_string("-1 0 1.5 2.5");    /* values of the symbols        */
/* compute the variance of the source */
double var = source_variance(pdf, rec);      /* 0.5 + 0.225 + 0.625 = 1.35   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_transform2D -->

<refentry id=man.it-transform2D>
  <refmeta>
    <refentrytitle>it_transform2D</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_transform2D</refname>
    <refpurpose>generic 2D transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/transform2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Mat <function>it_transform2D</function></funcdef>
        <paramdef> it_transform2D_t *t, Mat image
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function performs the 2D transform specified by the it_transform2D_t object <parameter>t</parameter> on the generic matrix <parameter>image</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;transform2D.h&gt;

...

it_wavelet2D_t *wavelet = it_wavelet2D_new(it_wavelet_lifting_97, 5);
mat input = mat_new_ones(16,16);
mat output;
output = (Mat) it_transform2D(wavelet, (Mat) intput);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_itransform2D -->

<refentry id=man.it-itransform2D>
  <refmeta>
    <refentrytitle>it_itransform2D</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_itransform2D</refname>
    <refpurpose>generic 2D inverse transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/transform2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Mat <function>it_itransform2D</function></funcdef>
        <paramdef> it_transform2D_t *t, Mat coeffs
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function performs the 2D inverse transform specified by the it_transform2D_t object <parameter>t</parameter> on the generic matrix <parameter>coeffs</parameter> representing the transform coefficients.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;transform2D.h&gt;

...

it_wavelet2D_t *wavelet = it_wavelet2D_new(it_wavelet_lifting_97, 5);
mat input = mat_new_ones(16,16);
mat output;
output = (Mat) it_itransform2D(wavelet, (Mat) intput);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_function -->

<refentry id=man.it-function>
  <refmeta>
    <refentrytitle>it_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_function</refname>
    <refpurpose>continuous function declaration macro</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/types.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_function</function></funcdef>
        <paramdef> name
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro allows the declaration of a continuous function named <parameter>name</parameter>. This function has one variable <parameter>x</parameter> of double type and may have parameters that modify its behaviour, as declared using the <function>it_function_args</function> macro. These parameters are accessed using the <parameter>it_this</parameter> pointer.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;types.h&gt;

...

it_function(sinc) /* declare the sine cardinal function */
{
if(x == 0) return(1);
else       return(sin(x) / x);
}
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_function_args -->

<refentry id=man.it-function-args>
  <refmeta>
    <refentrytitle>it_function_args</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_function_args</refname>
    <refpurpose>continuous function parameters declaration macro</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/types.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_function_args</function></funcdef>
        <paramdef> name
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This macro allow to define extra parameters for a continuous function <parameter>name</parameter> declared with the <function>it_function</function> macro. These parameters may be used to modify the behaviour of the continuous function. This macro returns the type of the structure used to store the parameters of the function <parameter>name</parameter>. It may be used during the declaration of these parameters, followed with the bracketed list of parameters separated by a semicolon, ended by a semicolon after the closing bracket (as in normal structure declaration). It may also be used to declare a parameter structure of the function <parameter>name</parameter> which will store the value of these parameters.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;types.h&gt;

...

/* declare the parameters of the function named 'gaussian' */
it_function_args(gaussian) {
  double mean;  /* the mean of the Gaussian */
  double sigma; /* the standard deviation of the Gaussian */
};
it_function(gaussian)
{
  double mean = it_this-&#38;gt;mean;   /* read the 'mean' parameter */
  double sigma = it_this-&#38;gt;sigma; /* read the 'sigma' parameter */
 
  /* compute the value taken by this Gaussian function in 'x' */
  return(1.0/(sqrt(2.0*M_PI)*sigma)*exp(-(x-mean)*(x-mean)/(2.0*sigma*sigma)));
}
void foo()
{
  /* use 'gaussian_args' to store the parameters of the 'gaussian' function */
  it_function_args(gaussian) gaussian_args;
  
  gaussian_args.mean = 0.0;  /* set the mean to zero */
  gaussian_args.sigma = 1.0; /* set the standard deviation to one */
  /* evaluate the Gaussian function parametrized as above in 2.0 */
  it_printf("value of the normal distribution in %f = %f
",
            2.0, gaussian(2.0, &#38;#38;gaussian_args));
}
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_1N -->

<refentry id=man.vec-1N>
  <refmeta>
    <refentrytitle>vec_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_1N</refname>
    <refpurpose>set the vector to [1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_1N</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_1N</function> sets the vector <parameter>v</parameter> 
to [1 2 3... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(5); /* creates the vector (not initialized) */
vec_1N(v);          /* set v to [1 2 3 4 5]                 */
vec_delete(v);      /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_1N -->

<refentry id=man.ivec-1N>
  <refmeta>
    <refentrytitle>ivec_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_1N</refname>
    <refpurpose>set the vector to [1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_1N</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> he function <function>ivec_1N</function> sets the vector <parameter>v</parameter> 
to [1 2 3... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(5); /* creates the vector (not initialized) */
ivec_1N(v);           /* set v to [1 2 3 4 5]                 */
ivec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_1N -->

<refentry id=man.bvec-1N>
  <refmeta>
    <refentrytitle>bvec_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_1N</refname>
    <refpurpose>set the vector to [1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_1N</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_1N</function> function sets the vector <parameter>v</parameter> to [1 2 3 ... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(5); /* creates the vector (not initialized) */
bvec_1N(v);           /* set v to [1 2 3 4 5]                 */
bvec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_1N -->

<refentry id=man.cvec-1N>
  <refmeta>
    <refentrytitle>cvec_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_1N</refname>
    <refpurpose>Set a vector to the values 1, 2, ..., N</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_1N</function></funcdef>
        <paramdef> cvec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_1N</function> sets the vector <parameter>v</parameter> 
to [1 2 3... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(5); /* creates the vector (not initialized) */
cvec_1N(v);           /* set v to [1 2 3 4 5]                 */
cvec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_add -->

<refentry id=man.vec-add>
  <refmeta>
    <refentrytitle>vec_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_add</refname>
    <refpurpose>add a vector to another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_add</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_add</function> adds the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in the vector <parameter>v1</parameter>.
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
vec_add( v1, v2 );                     /* v1 = [-2 0.5 -1 10] */
vec_delete(v1);
vec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_add -->

<refentry id=man.ivec-add>
  <refmeta>
    <refentrytitle>ivec_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_add</refname>
    <refpurpose>add a vector to another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_add</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_add</function> adds the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in the vector <parameter>v1</parameter>.
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 0 -2 5" );     * vector [1 0 -2 5] */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5  */
ivec_add( v1, v2 );                    /* v1 = [-2 1 -1 10] */
ivec_delete(v1);
ivec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_add -->

<refentry id=man.cvec-add>
  <refmeta>
    <refentrytitle>cvec_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_add</refname>
    <refpurpose>add a vector to another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_add</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function adds the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in the vector <parameter>v1</parameter>.
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v1 = cvec_new_string( "i 0.5 -2 5" );   /* vector [i 0.5 -2 5] */
cvec v2 = cvec_new_string( "-3 0 i 5" );     /* vector [-3 0 i 5]   */
cvec_add( v1, v2 );                          /* v1 = [i-3 0.5 i-2 10] */
cvec_delete(v1);
cvec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_apply_function -->

<refentry id=man.vec-apply-function>
  <refmeta>
    <refentrytitle>vec_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_apply_function</refname>
    <refpurpose>Apply a function to all the elements of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_apply_function</function></funcdef>
        <paramdef> vec v, it_function_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_apply_function</function> applies a function to all the elements of the vector <parameter>v</parameter>. The second argument must be a function of type <parameter>it_function_t</parameter>, however a C function can be casted into a <parameter>it_function_t</parameter> using the macro <function>IT_FUNCTION</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    void
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("1 4 9");

vec_apply_function (v, IT_FUNCTION (sqrt));  /* Cast the standard function sqrt */
                                             /* into a it_function_t type and   */
                                             /* call vec_apply_function         */

/* v = [1 2 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_apply_function -->

<refentry id=man.ivec-apply-function>
  <refmeta>
    <refentrytitle>ivec_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_apply_function</refname>
    <refpurpose>Apply a function to all the elements of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_apply_function</function></funcdef>
        <paramdef> ivec v, it_ifunction_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_apply_function</function> applies a function to all the elements of the vector <parameter>v</parameter>. The second argument must be a function of type <parameter>it_function_t</parameter>, however a C function can be casted into a <parameter>it_function_t</parameter> using the macro <function>IT_FUNCTION</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string ("1 4 9");

ivec_apply_function (v, IT_FUNCTION (sqrt)); /* Cast the standard function sqrt */
                                             /* into a it_function_t type and   */
                                             /* call vec_apply_function         */

/* v = [1 2 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_arithm -->

<refentry id=man.vec-arithm>
  <refmeta>
    <refentrytitle>vec_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_arithm</refname>
    <refpurpose>set the vector to an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_arithm</function></funcdef>
        <paramdef> vec v, double start, double incr
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_arithm</function> sets the vector <parameter>v</parameter> so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(5);    /* creates the vector (not initialized) */
vec_arithm(v,5,-2.5);  /* set v to [5 2.5 0 -2.5 -5]           */
vec_delete(v);         /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_arithm -->

<refentry id=man.ivec-arithm>
  <refmeta>
    <refentrytitle>ivec_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_arithm</refname>
    <refpurpose>set the vector to an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_arithm</function></funcdef>
        <paramdef> ivec v, int start, int incr
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_arithm</function> sets the vector <parameter>v</parameter> so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(5); /* creates the vector (not initialized) */
ivec_arithm(v,3,2);   /* set v to [3 5 7 9 11]                */
ivec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_arithm -->

<refentry id=man.bvec-arithm>
  <refmeta>
    <refentrytitle>bvec_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_arithm</refname>
    <refpurpose>set the vector to an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_arithm</function></funcdef>
        <paramdef> bvec v byte start, byte incr
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_arithm</function> sets the vector <parameter>v</parameter> so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(5); /* creates the vector (not initialized) */
bvec_arithm(v,1,2);   /* set v to [1 3 5 7 9]                 */
bvec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_arithm -->

<refentry id=man.cvec-arithm>
  <refmeta>
    <refentrytitle>cvec_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_arithm</refname>
    <refpurpose>Define a arithmetic sequence within a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_arithm</function></funcdef>
        <paramdef> cvec, cplx start, cplx incr
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_arithm</function> sets the vector <parameter>v</parameter> so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(4);     /* creates the vector (not initialized) */
cvec_arithm(v,1,cplx_I);  /* set v to [1 1+i 1+2i 1+3i]           */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_abs -->

<refentry id=man.vec-abs>
  <refmeta>
    <refentrytitle>vec_abs</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_abs</refname>
    <refpurpose>absolute value for the components of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_abs</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_abs</function> sets all the components of the vector <parameter>v</parameter> to their absolute value.    </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 -2.7 7 0");           /* vector [1 -2.7 7 0] */
vec_abs( v );                                   /* v = [1 2.7 7 0]     */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_abs -->

<refentry id=man.ivec-abs>
  <refmeta>
    <refentrytitle>ivec_abs</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_abs</refname>
    <refpurpose>absolute value for the components of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_abs</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_abs</function> sets all the components of the vector <parameter>v</parameter> to their absolute value.    </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 -2 7 0");           /* vector [1 -2 7 0] */
ivec_abs( v );                                  /* v = [1 2 7 0] 
ivec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_del -->

<refentry id=man.vec-del>
  <refmeta>
    <refentrytitle>vec_del</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_del</refname>
    <refpurpose>Delete an element of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_del</function></funcdef>
        <paramdef> vec v, size_t pos
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_del</function> deletes the element at position <parameter>pos</parameter> in the vector <parameter>v</parameter>. The resulting vector has a length which is equal to the original length minus 1.  Note that positions start at 0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("5 0 6 7 2 1.1");   /* v = [5 0 6 7 2 1.1] */
vec_del (v, 0);                             /* v = [0 6 7 2 1.1]   */
vec_del (v, 3);                             /* v = [0 6 7 1.1]      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_del -->

<refentry id=man.ivec-del>
  <refmeta>
    <refentrytitle>ivec_del</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_del</refname>
    <refpurpose>Delete an element of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_del</function></funcdef>
        <paramdef> ivec v, size_t pos
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_del</function> deletes the element at position <parameter>pos</parameter> in the vector <parameter>v</parameter>. The resulting vector has a length which is equal to the original length minus 1.  Note that positions start at 0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string ("5 0 6 7 2 1");  /* v = [5 0 6 7 2 1] */
ivec_del (v, 0);                           /* v = [0 6 7 2 1]   */
ivec_del (v, 3);                           /* v = [0 6 7 1]      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_del -->

<refentry id=man.bvec-del>
  <refmeta>
    <refentrytitle>bvec_del</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_del</refname>
    <refpurpose>Delete an element of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_del</function></funcdef>
        <paramdef> bvec v, size_t pos
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_del</function> deletes the element at position <parameter>pos</parameter> in the vector <parameter>v</parameter>. The resulting vector has a length which is equal to the original length minus 1.  Note that positions start at 0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_string ("5 0 6 7 2 1");  /* v = [5 0 6 7 2 1] */
bvec_del (v, 0);                           /* v = [0 6 7 2 1]   */
bvec_del (v, 3);                           /* v = [0 6 7 1]      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_del -->

<refentry id=man.cvec-del>
  <refmeta>
    <refentrytitle>cvec_del</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_del</refname>
    <refpurpose>Delete an element of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_del</function></funcdef>
        <paramdef> cvec v, size_t pos
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_del</function> deletes the element at position <parameter>pos</parameter> in the vector <parameter>v</parameter>. The resulting vector has a length which is equal to the original length minus 1.  Note that positions start at 0. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string ("5 i 6 7 2 i");  /* v = [5 i 6 7 2 i] */
cvec_del (v, 0);                           /* v = [i 6 7 2 i]   */
cvec_del (v, 3);                           /* v = [i 6 7 i]      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Vec_delete -->

<refentry id=man.-vec-delete>
  <refmeta>
    <refentrytitle>Vec_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Vec_delete</refname>
    <refpurpose>free a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>Vec_delete</function></funcdef>
        <paramdef> Vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>Vec_delete</function> macro frees a previously allocated vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

Vec v = Vec_new(float, 10);   /* allocate a new vector of size 10 */
Vec_delete(v);         /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_delete -->

<refentry id=man.vec-delete>
  <refmeta>
    <refentrytitle>vec_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_delete</refname>
    <refpurpose>free a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_delete</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_delete</function> free a previously allocated vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(10);   /* allocate a new vector of size 10 */
vec_delete(v);         /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_delete -->

<refentry id=man.ivec-delete>
  <refmeta>
    <refentrytitle>ivec_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_delete</refname>
    <refpurpose>free a vector of integers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_delete</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_delete</function> free a previously allocated vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(10);  /* allocate a new vector of size 10 */
ivec_delete(v);         /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_delete -->

<refentry id=man.bvec-delete>
  <refmeta>
    <refentrytitle>bvec_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_delete</refname>
    <refpurpose>free a vector of bytes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_delete</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_delete</function> free a previously allocated vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(10);   /* allocate a new vector of size 10 */
bvec_delete(v);          /* free the vector                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_delete -->

<refentry id=man.cvec-delete>
  <refmeta>
    <refentrytitle>cvec_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_delete</refname>
    <refpurpose>Free a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_delete</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_delete</function> free a previously allocated vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(10);   /* allocate a new vector of size 10 */
...
cvec_delete(v);          /* free the vector                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_decr -->

<refentry id=man.vec-decr>
  <refmeta>
    <refentrytitle>vec_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_decr</refname>
    <refpurpose>Substract a value to the vector components</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_decr</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_decr</function> substracts the quantity <parameter>a</parameter> from all the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("0.3 0.5 1");  /* vector [ 0.3 0.5 1 ]     */
vec_decr(v, 1.3);                     /* v = [ -1 -0.8 -0.3 ]     */
vec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_decr -->

<refentry id=man.ivec-decr>
  <refmeta>
    <refentrytitle>ivec_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_decr</refname>
    <refpurpose>Substract a value to the vector components</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_decr</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_decr</function> substracts the quantity <parameter>a</parameter> from all the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("2 5 -1");   /* vector [ 2 5 -1 ]     */
ivec_decr(v, 2);                      /* v = [ 0 3 -3 ]        */
ivec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_decr -->

<refentry id=man.cvec-decr>
  <refmeta>
    <refentrytitle>cvec_decr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_decr</refname>
    <refpurpose>Substract a value to the vector components</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_decr</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_decr</function> substracts the quantity <parameter>a</parameter> from all the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v  = cvec_new_string("0.3-i i 1");  /* vector [ 0.3-i 1+i i ]    */
cplx c = cplx(1,1);
cvec_decr(v, c);                         /* v = [ -0.7-2i 0 -1 ]      */
cvec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_decr_real -->

<refentry id=man.cvec-decr-real>
  <refmeta>
    <refentrytitle>cvec_decr_real</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_decr_real</refname>
    <refpurpose>Substract a real value to the vector components</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_decr_real</function></funcdef>
        <paramdef> cvec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_decr</function> substracts the real <parameter>a</parameter> from all the components of the vector <parameter>v</parameter>. Hence the imaginary part is not modified by this function.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v  = cvec_new_string("0.3-i i 1");  /* vector [ 0.3-i 1+i i ]      */
cvec_decr_real(v, 1.3);                  /* v = [ -1-i -0.3+i -1.3+i ]  */
cvec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_div -->

<refentry id=man.vec-div>
  <refmeta>
    <refentrytitle>vec_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_div</refname>
    <refpurpose>component per component division of 2 vec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_div</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_div</function> divides each component of the vector <parameter>v1</parameter> by the corresponding component of the vector <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 1 1 5" );     /* vector [-3 1 1 5]   */
vec_div( v1, v2 );                     /* v1 = [0 0 -2 1]     */
vec_delete(v1);
vec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_div -->

<refentry id=man.ivec-div>
  <refmeta>
    <refentrytitle>ivec_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_div</refname>
    <refpurpose>component per component division of 2 vec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_div</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function divides each component of the vector <parameter>v1</parameter> by the corresponding component of the vector <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 0 -2 5" );     * vector [1 0 -2 5] */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5] */
ivec_div( v1, v2 );                    /* v1 = [0 0 -2 1]   */
ivec_delete(v1);
ivec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_div -->

<refentry id=man.cvec-div>
  <refmeta>
    <refentrytitle>cvec_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_div</refname>
    <refpurpose>component per component division of 2 vec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_div</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_div</function> divides each component of the vector <parameter>v1</parameter> by the corresponding component of the vector <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = cvec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = cvec_new_string( "-3 1 1 5" );     /* vector [-3 1 1 5]   */
cvec_div( v1, v2 );                     /* v1 = [0 0 -2 1]     */
cvec_delete(v1);
cvec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_div_by -->

<refentry id=man.vec-div-by>
  <refmeta>
    <refentrytitle>vec_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_div_by</refname>
    <refpurpose>divide the vector by a constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_div_by</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_div_by -->

<refentry id=man.ivec-div-by>
  <refmeta>
    <refentrytitle>ivec_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_div_by</refname>
    <refpurpose>divide the vector by a constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_div_by</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_div_by -->

<refentry id=man.cvec-div-by>
  <refmeta>
    <refentrytitle>cvec_div_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_div_by</refname>
    <refpurpose>divide a complex vector by a complex value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_div_by</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_div_by_real -->

<refentry id=man.cvec-div-by-real>
  <refmeta>
    <refentrytitle>cvec_div_by_real</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_div_by_real</refname>
    <refpurpose>divide a complex vector by a double value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_div_by_real</function></funcdef>
        <paramdef> cvec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_eq -->

<refentry id=man.vec-eq>
  <refmeta>
    <refentrytitle>vec_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_eq</refname>
    <refpurpose>check if two vectors are equal</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_eq</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_eq</function> checks if two vectors are equal (component per component). </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    0 if the two vectors are equal, otherwise a value different from 0
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_eq -->

<refentry id=man.ivec-eq>
  <refmeta>
    <refentrytitle>ivec_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_eq</refname>
    <refpurpose>check if two vectors are equal</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_eq</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_eq</function> checks if two vectors are equal (component per component). </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    0 if the two vectors are equal, otherwise a value different from 0
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_eq -->

<refentry id=man.bvec-eq>
  <refmeta>
    <refentrytitle>bvec_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_eq</refname>
    <refpurpose>test if two vectors are equal</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_eq</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_eq</function> checks if two vectors are equal (component per component). </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    0 if the two vectors are equal, otherwise a value different from 0
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_eq -->

<refentry id=man.cvec-eq>
  <refmeta>
    <refentrytitle>cvec_eq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_eq</refname>
    <refpurpose>check if two complex vectors are equal</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cvec_eq</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_eq</function> checks if two vectors are equal (component per component). </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    1 if 'v1' is the same as 'v2', 0 otherwise
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_exp -->

<refentry id=man.vec-exp>
  <refmeta>
    <refentrytitle>vec_exp</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_exp</refname>
    <refpurpose>Exponentation of the components</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_exp</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_exp</function> apply the exponential function to all the components of <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("0 1 2");  /* vector [ 0 1 2 ]           */
vec_exp( v );                     /* v = [1.0000 2.7183 7.3891] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_find -->

<refentry id=man.vec-find>
  <refmeta>
    <refentrytitle>vec_find</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_find</refname>
    <refpurpose>positions of the vector equal to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>vec_find</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_find -->

<refentry id=man.ivec-find>
  <refmeta>
    <refentrytitle>ivec_find</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_find</refname>
    <refpurpose>positions of the vector equal to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_find</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_find -->

<refentry id=man.bvec-find>
  <refmeta>
    <refentrytitle>bvec_find</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_find</refname>
    <refpurpose>positions of the vector equal to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>bvec_find</function></funcdef>
        <paramdef> bvec v, byte a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_find -->

<refentry id=man.cvec-find>
  <refmeta>
    <refentrytitle>cvec_find</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_find</refname>
    <refpurpose>positions of the vector equal to a given value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>cvec_find</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the vector of positions
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_find_first -->

<refentry id=man.vec-find-first>
  <refmeta>
    <refentrytitle>vec_find_first</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_find_first</refname>
    <refpurpose>first position where a given value is encountered</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_find_first</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_find_first -->

<refentry id=man.ivec-find-first>
  <refmeta>
    <refentrytitle>ivec_find_first</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_find_first</refname>
    <refpurpose>first position where a given value is encountered</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_find_first</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_find_first -->

<refentry id=man.bvec-find-first>
  <refmeta>
    <refentrytitle>bvec_find_first</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_find_first</refname>
    <refpurpose>first position where a given value is encountered</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_find_first</function></funcdef>
        <paramdef> bvec v, byte a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_find_first -->

<refentry id=man.cvec-find-first>
  <refmeta>
    <refentrytitle>cvec_find_first</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_find_first</refname>
    <refpurpose>first position where a given value is encountered</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cvec_find_first</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_find_sorted -->

<refentry id=man.vec-find-sorted>
  <refmeta>
    <refentrytitle>vec_find_sorted</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_find_sorted</refname>
    <refpurpose>find the position of a value in a sorted vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>idx_t <function>vec_find_sorted</function></funcdef>
        <paramdef> vec v, double val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Assuming that the vector is sorted, the function <function>vec_find_sorted</function> returns a position in the vector <parameter>v</parameter> where the value <parameter>val</parameter> can be found. If the value <parameter>val</parameter> is not in the vector, the function returns the position where is should be inserted to maintain the vector sorted. In particular, is the value <parameter>val</parameter> is greater than any element of the vector, the function returns the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position in the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_arithm (1,1, 4);      /* v =[1,2,3,4]   */

idx_t pos = vec_find_sorted (v, 3);   /* pos = 2 */          
pos = vec_find_sorted (v, 2.2);       /* pos = 2 */    
pos = vec_find_sorted (v, -1);        /* pos = 0 */    
pos = vec_find_sorted (v, 5);         /* pos = 4 */    

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_find_sorted -->

<refentry id=man.ivec-find-sorted>
  <refmeta>
    <refentrytitle>ivec_find_sorted</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_find_sorted</refname>
    <refpurpose>find the position of a value in a sorted vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>idx_t <function>ivec_find_sorted</function></funcdef>
        <paramdef> ivec v, int val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Assuming that the vector is sorted, the function <function>ivec_find_sorted</function> returns a position in the vector <parameter>v</parameter> where the value <parameter>val</parameter> can be found. If the value <parameter>val</parameter> is not in the vector, the function returns the position where is should be inserted to maintain the vector sorted. In particular, is the value <parameter>val</parameter> is greater than any element of the vector, the function returns the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position in the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_arithm (1,2,4);      /* v =[1,3,5,7]   */

idx_t pos = ivec_find_sorted (v, 5);   /* pos = 2 */          
pos = ivec_find_sorted (v, 4);         /* pos = 2 */    
pos = ivec_find_sorted (v, -1);        /* pos = 0 */    
pos = ivec_find_sorted (v, 15);        /* pos = 4 */    

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_find_sorted -->

<refentry id=man.bvec-find-sorted>
  <refmeta>
    <refentrytitle>bvec_find_sorted</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_find_sorted</refname>
    <refpurpose>find the position of a value in a sorted vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>idx_t <function>bvec_find_sorted</function></funcdef>
        <paramdef> bvec v, byte val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Assuming that the vector is sorted, the function <function>bvec_find_sorted</function> returns a position in the vector <parameter>v</parameter> where the value <parameter>val</parameter> can be found. If the value <parameter>val</parameter> is not in the vector, the function returns the position where is should be inserted to maintain the vector sorted. In particular, is the value <parameter>val</parameter> is greater than any element of the vector, the function returns the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position in the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_arithm (1,2,4);      /* v =[1,3,5,7]   */

idx_t pos = bvec_find_sorted (v, 5);   /* pos = 2 */          
pos = bvec_find_sorted (v, 4);         /* pos = 2 */    
pos = bvec_find_sorted (v, 0);         /* pos = 0 */    
pos = bvec_find_sorted (v, 15);        /* pos = 4 */    

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_geom -->

<refentry id=man.vec-geom>
  <refmeta>
    <refentrytitle>vec_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_geom</refname>
    <refpurpose>set the vector to a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_geom</function></funcdef>
        <paramdef> vec v, double start, double r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_geom</function> sets the vector <parameter>v</parameter> so that the elements correspond to the geometric sequence 
of starting value <parameter>start</parameter>, generated by the geometric factor <parameter>r</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(5);  /* creates the vector (not initialized) */
vec_geom(v,1.5,2);   /* set v to [1.5 3 6 12 24]             */
vec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_geom -->

<refentry id=man.ivec-geom>
  <refmeta>
    <refentrytitle>ivec_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_geom</refname>
    <refpurpose>set the vector to a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_geom</function></funcdef>
        <paramdef> ivec v, int start, int r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_geom</function> sets the vector <parameter>v</parameter> so that the elements correspond to the geometric sequence 
of starting value <parameter>start</parameter>, generated by the geometric factor <parameter>r</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(5); /* creates the vector (not initialized) */
ivec_geom(v,3,2);     /* set v to [3 6 12 24 48]              */
ivec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_geom -->

<refentry id=man.bvec-geom>
  <refmeta>
    <refentrytitle>bvec_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_geom</refname>
    <refpurpose>set the vector to a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_geom</function></funcdef>
        <paramdef> bvec v, byte start, byte r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_geom</function> sets the vector <parameter>v</parameter> so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, generated by the geometric factor <parameter>r</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(5); /* creates the vector (not initialized) */
bvec_geom(v,1,3);     /* set v to [1 3 9 27 81]               */
bvec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_geom -->

<refentry id=man.cvec-geom>
  <refmeta>
    <refentrytitle>cvec_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_geom</refname>
    <refpurpose>set the vector to a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_geom</function></funcdef>
        <paramdef> cvec, cplx start, cplx r
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_geom</function> sets the vector <parameter>v</parameter> so that the elements correspond to the geometric sequence 
of starting value <parameter>start</parameter>, generated by the complex geometric factor <parameter>r</parameter>. The length is kept unchanged.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(5);  /* creates the vector (not initialized) */
cvec_geom(v,1,i);      /* set v to [1 i -1 -i 1]             */
cvec_delete(v);        /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_geq -->

<refentry id=man.vec-geq>
  <refmeta>
    <refentrytitle>vec_geq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_geq</refname>
    <refpurpose>vector greater than another for all the values?</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_geq</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_geq -->

<refentry id=man.ivec-geq>
  <refmeta>
    <refentrytitle>ivec_geq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_geq</refname>
    <refpurpose>vector greater than another for all the values?</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_geq</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_geq -->

<refentry id=man.bvec-geq>
  <refmeta>
    <refentrytitle>bvec_geq</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_geq</refname>
    <refpurpose>vector greater than another for all the values?</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_geq</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_get_subvector -->

<refentry id=man.vec-get-subvector>
  <refmeta>
    <refentrytitle>vec_get_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_get_subvector</refname>
    <refpurpose>get a subvector from a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_get_subvector</function></funcdef>
        <paramdef> vec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_get_subvector -->

<refentry id=man.ivec-get-subvector>
  <refmeta>
    <refentrytitle>ivec_get_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_get_subvector</refname>
    <refpurpose>get a subvector from a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_get_subvector</function></funcdef>
        <paramdef> ivec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_get_subvector -->

<refentry id=man.bvec-get-subvector>
  <refmeta>
    <refentrytitle>bvec_get_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_get_subvector</refname>
    <refpurpose>get a subvector from a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_get_subvector</function></funcdef>
        <paramdef> bvec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_get_subvector -->

<refentry id=man.cvec-get-subvector>
  <refmeta>
    <refentrytitle>cvec_get_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_get_subvector</refname>
    <refpurpose>get a subvector from a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_get_subvector</function></funcdef>
        <paramdef> cvec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_head -->

<refentry id=man.vec-head>
  <refmeta>
    <refentrytitle>vec_head</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_head</refname>
    <refpurpose>retrieve the head of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_head</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Since the vector is seen as a stack, the head is the last element of the vector, i.e. 'v[vec_length(v) - 1]'; </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_head -->

<refentry id=man.ivec-head>
  <refmeta>
    <refentrytitle>ivec_head</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_head</refname>
    <refpurpose>retrieve the head of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_head</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Since the vector is seen as a stack, the head is the last element of the vector, i.e. 'v[vec_length(v) - 1]'; </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_head -->

<refentry id=man.bvec-head>
  <refmeta>
    <refentrytitle>bvec_head</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_head</refname>
    <refpurpose>retrieve the head of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>byte <function>bvec_head</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_head -->

<refentry id=man.cvec-head>
  <refmeta>
    <refentrytitle>cvec_head</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_head</refname>
    <refpurpose>retrieve the head of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cvec_head</function></funcdef>
        <paramdef> const cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Since the vector is seen as a stack, the head is the last element of the vector, i.e. 'v[vec_length(v) - 1]'; </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_length -->

<refentry id=man.vec-length>
  <refmeta>
    <refentrytitle>vec_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_length</refname>
    <refpurpose>get the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_length</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_length</function> returns the length of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_ones(7);   /* Vector [1 1 1 1 1 1 1] */
int l = vec_length(v);     /* l = 7                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_length -->

<refentry id=man.ivec-length>
  <refmeta>
    <refentrytitle>ivec_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_length</refname>
    <refpurpose>get the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_length</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_length</function> returns the length of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_ones(7);   /* Vector [1 1 1 1 1 1 1] */
int l  = ivec_length(v);     /* l = 7                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_length -->

<refentry id=man.bvec-length>
  <refmeta>
    <refentrytitle>bvec_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_length</refname>
    <refpurpose>get the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_length</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_length</function> returns the length of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_ones(7);   /* Vector [1 1 1 1 1 1 1] */
int l  = bvec_length(v);     /* l = 7                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_length -->

<refentry id=man.cvec-length>
  <refmeta>
    <refentrytitle>cvec_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_length</refname>
    <refpurpose>get the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cvec_length</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_length</function> returns the length of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_ones(7);   /* Vector [1 1 1 1 1 1 1] */
int l  = cvec_length(v);     /* l = 7                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_length_max -->

<refentry id=man.vec-length-max>
  <refmeta>
    <refentrytitle>vec_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_length_max</refname>
    <refpurpose>get the number of elements allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_length_max</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_length</function> returns the maximum length of the vector <parameter>v</parameter>. By maximum length, it does not mean that the vector can't grow. It just means the length to which the vector can grow without a call (implicit or explicit) to function <function>vec_set_length_mat</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v  = vec_new_alloc (1,3);
v[0]   = 3;                      /* v = [3]   */
int l  = vec_length (v);         /* l = 1     */
int l  = vec_length_max(v);      /* l = 3     */

vec_push (v, 2);                 /* v = [3 2], and there is not re-allocation */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_length_max -->

<refentry id=man.ivec-length-max>
  <refmeta>
    <refentrytitle>ivec_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_length_max</refname>
    <refpurpose>get the number of elements allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_length_max</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_length</function> returns the maximum length of the vector <parameter>v</parameter>. By maximum length, it does not mean that the vector can't grow. It just means the length to which the vector can grow without a call (implicit or explicit) to function <function>ivec_set_length_mat</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v  = ivec_new_alloc (1,3);
v[0]   = 3;                      /* v = [3]   */
int l  = ivec_length (v);        /* l = 1     */
int l  = ivec_length_max(v);     /* l = 3     */

ivec_push (v, 2);                /* v = [3 2], and there is not re-allocation */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_length_max -->

<refentry id=man.bvec-length-max>
  <refmeta>
    <refentrytitle>bvec_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_length_max</refname>
    <refpurpose>get the number of elements allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_length_max</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_length</function> returns the maximum length of the vector <parameter>v</parameter>. By maximum length, it does not mean that the vector can't grow. It just means the length to which the vector can grow without a call (implicit or explicit) to function <function>bvec_set_length_mat</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v  = bvec_new_alloc (1,3);
v[0]   = 3;                      /* v = [3]   */
int l  = bvec_length (v);        /* l = 1     */
int l  = bvec_length_max(v);     /* l = 3     */

bvec_push (v, 2);                /* v = [3 2], and there is not re-allocation */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_length_max -->

<refentry id=man.cvec-length-max>
  <refmeta>
    <refentrytitle>cvec_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_length_max</refname>
    <refpurpose>get the number of elements allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cvec_length_max</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_length</function> returns the maximum length of the vector <parameter>v</parameter>. By maximum length, it does not mean that the vector can't grow. It just means the length to which the vector can grow without a call (implicit or explicit) to function <function>cvec_set_length_mat</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum length
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v  = cvec_new_alloc (1,3);
v[0]   = 3;                      /* v = [3]   */
int l  = cvec_length (v);        /* l = 1     */
int l  = cvec_length_max(v);     /* l = 3     */

cvec_push (v, 2);                /* v = [3 2], and there is not re-allocation */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_log -->

<refentry id=man.vec-log>
  <refmeta>
    <refentrytitle>vec_log</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_log</refname>
    <refpurpose>Apply logarithm to the components of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_log</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_log</function> applies the function logarithm to all the components of <parameter>v</parameter>. The base of the logarithm is the natural base (neperien logarithm).   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("[1.0000 2.7183 7.3891]"); /* vector [1 2.7183 7.3891] */
vec_log( v );                                     /* v = [0 1 2]              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_log10 -->

<refentry id=man.vec-log10>
  <refmeta>
    <refentrytitle>vec_log10</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_log10</refname>
    <refpurpose>logarithm base 10 to the components of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_log10</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_exp</function> applies the function logarithm to all the components of <parameter>v</parameter>. The base of the logarithm is 10.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("[1 10 100 1000]");   /* vector [1 10 100 1000] */
vec_log( v );                                /* v = [0 1 2 3]          */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Vec_clone -->

<refentry id=man.-vec-clone>
  <refmeta>
    <refentrytitle>Vec_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Vec_clone</refname>
    <refpurpose>create a copy of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Vec <function>Vec_clone</function></funcdef>
        <paramdef> Vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a copy of the vector <parameter>v</parameter>. Note that it is not valid to use the operator = instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector, which is a copy of the vector given as a parameter
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_clone -->

<refentry id=man.vec-clone>
  <refmeta>
    <refentrytitle>vec_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_clone</refname>
    <refpurpose>create a copy of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_clone</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a copy of the vector <parameter>v</parameter>. Note that it is not valid to use the operator = instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector, which is a copy of the vector given as a parameter
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec a = vec_new_string ("0 1 2 3");   /* a = [0 1 2 3] */
vec b = vec_clone (b);                /* b = [0 1 2 3] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_clone -->

<refentry id=man.ivec-clone>
  <refmeta>
    <refentrytitle>ivec_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_clone</refname>
    <refpurpose>create a copy of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_clone</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a copy of the vector <parameter>v</parameter>. Note that it is not valid to use the operator = instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector, which is a copy of the vector given as a parameter
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec a = ivec_new_string ("0 1 2 3");   /* a = [0 1 2 3] */
ivec b = ivec_clone (b);                /* b = [0 1 2 3] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_clone -->

<refentry id=man.bvec-clone>
  <refmeta>
    <refentrytitle>bvec_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_clone</refname>
    <refpurpose>create a copy of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_clone</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a copy of the vector <parameter>v</parameter>. Note that it is not valid to use the operator = instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector, which is a copy of the vector given as a parameter
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec a = bvec_new_string ("0 1 2 3");   /* a = [0 1 2 3] */
bvec b = bvec_clone (b);                /* b = [0 1 2 3] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_clone -->

<refentry id=man.cvec-clone>
  <refmeta>
    <refentrytitle>cvec_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_clone</refname>
    <refpurpose>create a copy of a complex vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_clone</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a copy of the vector <parameter>v</parameter>. Note that it is not valid to use the operator = instead.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector, which is a copy of the vector given as a parameter
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec a = cvec_new_string ("i 1 2 3");   /* a = [i 1 2 3] */
cvec b = cvec_clone (b);                /* b = [i 1 2 3] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_max -->

<refentry id=man.vec-max>
  <refmeta>
    <refentrytitle>vec_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_max</refname>
    <refpurpose>Maximum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_max</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_max</function> returns the maximum of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum value of the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 -2.7 7 0");           /* vector [1 -2.7 7 0] */
double m = vec_max( v );                        /* m = 7               */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_max -->

<refentry id=man.ivec-max>
  <refmeta>
    <refentrytitle>ivec_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_max</refname>
    <refpurpose>Maximum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_max</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_max</function> returns the maximum of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The maximum value of the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 -2 7 0");          /* vector [1 -2 7 0] */
int m  = ivec_max( v );                        /* m = 7             */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_max_index -->

<refentry id=man.vec-max-index>
  <refmeta>
    <refentrytitle>vec_max_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_max_index</refname>
    <refpurpose>Position of the maximum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_max_index</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_max_index</function> returns the position where the maximum of the vector <parameter>v</parameter> is reached. If the maximum has a multiplicity which is greater than 1, then the first position should be returned.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position of the maximum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 -2.7 7 0");           /* vector [1 -2.7 7 0] */
int p = vec_max_index( v );                     /* p = 2               */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_max_index -->

<refentry id=man.ivec-max-index>
  <refmeta>
    <refentrytitle>ivec_max_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_max_index</refname>
    <refpurpose>Position of the maximum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_max_index</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_max_index</function> returns the position where the maximum of the vector <parameter>v</parameter> is reached. If the maximum has a multiplicity which is greater than 1, then the first position should be returned.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position of the maximum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 -2 7 0");           /* vector [1 -2 7 0] */
int p  = ivec_max_index( v );                   /* p = 2             */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_mean -->

<refentry id=man.vec-mean>
  <refmeta>
    <refentrytitle>vec_mean</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_mean</refname>
    <refpurpose>mean value of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_mean</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_mean</function> computes the arithmetic mean of vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    arithmetic mean of input vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_mean( v );                 /* d = 2                        */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_mean -->

<refentry id=man.ivec-mean>
  <refmeta>
    <refentrytitle>ivec_mean</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_mean</refname>
    <refpurpose>mean value of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>ivec_mean</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_mean</function> computes the arithmetic mean of vector <parameter>v</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    arithmetic mean of input vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v   = ivec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = ivec_mean( v );                   /* d = 2                        */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_mean_robust -->

<refentry id=man.vec-mean-robust>
  <refmeta>
    <refentrytitle>vec_mean_robust</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_mean_robust</refname>
    <refpurpose>robust computation of the mean of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_mean_robust</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_mean_robust</function> uses Kahan's method to compute the artihmetic mean of a vector. Use it when desesperate. 

See <function>vec_sum_robust</function>, <function>vec_mean</function> </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    robust arithmetic mean of input vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_mean_robust( v );         /* d = 2                         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_median -->

<refentry id=man.vec-median>
  <refmeta>
    <refentrytitle>vec_median</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_median</refname>
    <refpurpose>median value of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_median</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_median -->

<refentry id=man.ivec-median>
  <refmeta>
    <refentrytitle>ivec_median</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_median</refname>
    <refpurpose>median value of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_median</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_min -->

<refentry id=man.vec-min>
  <refmeta>
    <refentrytitle>vec_min</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_min</refname>
    <refpurpose>Minimum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_min</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_min</function> returns the minimum of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The minimum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 -2.7 7 0");           /* vector [1 -2.7 7 0] */
double m = vec_min( v );                        /* m = -2.7            */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_min -->

<refentry id=man.ivec-min>
  <refmeta>
    <refentrytitle>ivec_min</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_min</refname>
    <refpurpose>Minimum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_min</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_min</function> returns the minimum of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The minimum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 -2 7 0");          /* vector [1 -2 7 0] */
int m  = ivec_min( v );                        /* m = -2            */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_min_index -->

<refentry id=man.vec-min-index>
  <refmeta>
    <refentrytitle>vec_min_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_min_index</refname>
    <refpurpose>Position of the minimum in a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_min_index</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_min_index</function> returns the position where the minimum of the vector <parameter>v</parameter> is reached. If the minimum has a multiplicity which is greater than 1, then the first position should be returned.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position of the minimum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("1 -2.7 7 0");         /* vector [1 -2.7 7 0] */
int p = vec_min_index (v);                     /* p = 1               */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_min_index -->

<refentry id=man.ivec-min-index>
  <refmeta>
    <refentrytitle>ivec_min_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_min_index</refname>
    <refpurpose>Position of the minimum in a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_min_index</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_min_index</function> returns the position where the minimum of the vector <parameter>v</parameter> is reached. If the minimum has a multiplicity which is greater than 1, then the first position should be returned.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The position of the minimum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 -2 7 0");           /* vector [1 -2 7 0] */
int p = ivec_min_index( v );                    /* p = 1               */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_mul -->

<refentry id=man.vec-mul>
  <refmeta>
    <refentrytitle>vec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_mul</refname>
    <refpurpose>component per component multiplication of 2 vec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_mul</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_mul</function> multiplies each component of the vector <parameter>v1</parameter> by the corresponding component of the vector <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
vec_mul( v1, v2 );                     /* v1 = [-3 0 -2 25]   */
vec_delete(v1);
vec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_mul -->

<refentry id=man.ivec-mul>
  <refmeta>
    <refentrytitle>ivec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_mul</refname>
    <refpurpose>component per component multiplication of 2 ivec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_mul</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_mul</function> multiplies each component of the vector <parameter>v1</parameter> by the corresponding component of the vector <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 0 -2 5" );     * vector [1 0 -2 5] */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5] */
ivec_mul( v1, v2 );                    /* v1 = [-3 0 -2 25] */
ivec_delete(v1);
ivec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_mul -->

<refentry id=man.cvec-mul>
  <refmeta>
    <refentrytitle>cvec_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_mul</refname>
    <refpurpose>component per component multiplication of 2 cvec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_mul</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_mul</function> multiplies each component of the vector <parameter>v1</parameter> by the corresponding component of the vector <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = cvec_new_string( "1 i -2 5" );     /* vector [1 i -2 5] */
v2 = cvec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
cvec_mul( v1, v2 );                     /* v1 = [-3 0 -2 25]   */
cvec_delete(v1);
cvec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_mul_by -->

<refentry id=man.vec-mul-by>
  <refmeta>
    <refentrytitle>vec_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_mul_by</refname>
    <refpurpose>multiply a vector by a constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_mul_by</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_mul_by</function> multiplies each component of the vector <parameter>v</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("1 2 3");   /* v = [1 2 3] */
vec_mul_by (v, 3);                  /* v = [3 6 9] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_mul_by -->

<refentry id=man.ivec-mul-by>
  <refmeta>
    <refentrytitle>ivec_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_mul_by</refname>
    <refpurpose>multiply a vector by a constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_mul_by</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_mul_by</function> multiplies each component of the vector <parameter>v</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string ("1 2 3");  /* v = [1 2 3] */
ivec_mul_by (v, 3);                  /* v = [3 6 9] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_mul_by -->

<refentry id=man.cvec-mul-by>
  <refmeta>
    <refentrytitle>cvec_mul_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_mul_by</refname>
    <refpurpose>multiply a complex vector by a complex value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_mul_by</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_mul_by</function> multiplies each component of the vector <parameter>v</parameter> by the quantity <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string ("1 i 3");   /* v = [1 i 3]   */
cvec_mul_by (v, cplx_I);              /* v = [i -1 3i] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_mul_by_real -->

<refentry id=man.cvec-mul-by-real>
  <refmeta>
    <refentrytitle>cvec_mul_by_real</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_mul_by_real</refname>
    <refpurpose>multiply a complex vector by a real constant</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_mul_by_real</function></funcdef>
        <paramdef> cvec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_mul_by</function> multiplies each component of the vector <parameter>v</parameter> by the double floating point value <parameter>a</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string ("1 i 3");   /* v = [1 i 3]   */
cvec_mul_by (v, 3);                   /* v = [3 3i 9]  */ 
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_index_by -->

<refentry id=man.vec-index-by>
  <refmeta>
    <refentrytitle>vec_index_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_index_by</refname>
    <refpurpose>create a vector from a vector indexed by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_index_by</function></funcdef>
        <paramdef> vec v, ivec idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_index_by -->

<refentry id=man.ivec-index-by>
  <refmeta>
    <refentrytitle>ivec_index_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_index_by</refname>
    <refpurpose>create a vector from a vector indexed by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_index_by</function></funcdef>
        <paramdef> ivec v, ivec idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_index_by -->

<refentry id=man.bvec-index-by>
  <refmeta>
    <refentrytitle>bvec_index_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_index_by</refname>
    <refpurpose>create a vector from a vector indexed by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_index_by</function></funcdef>
        <paramdef> bvec v, ivec idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_index_by -->

<refentry id=man.cvec-index-by>
  <refmeta>
    <refentrytitle>cvec_index_by</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_index_by</refname>
    <refpurpose>create a vector from a vector indexed by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_index_by</function></funcdef>
        <paramdef> cvec v, ivec idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_neg -->

<refentry id=man.vec-neg>
  <refmeta>
    <refentrytitle>vec_neg</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_neg</refname>
    <refpurpose>Opposite of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_neg</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_neg</function> sets all the components of the vector <parameter>v</parameter> to their opposite value.    </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("1 -2.7 7 0");  /* vector [1 -2.7 7 0] */
vec_neg(v);                             /* v = [-1 2.7 -7 0]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_neg -->

<refentry id=man.ivec-neg>
  <refmeta>
    <refentrytitle>ivec_neg</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_neg</refname>
    <refpurpose>Opposite of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_neg</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_neg</function> sets all the components of the vector <parameter>v</parameter> to their opposit e value.    </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 -2 7 0");           /* vector [1 -2 7 0] */
ivec_neg( v );                                  /* v = [-1 2 -7 0]   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_neg -->

<refentry id=man.cvec-neg>
  <refmeta>
    <refentrytitle>cvec_neg</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_neg</refname>
    <refpurpose>Opposite of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_neg</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_neg</function> sets all the components of the vector <parameter>v</parameter> to their opposite value.    </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string("1 1-2i -2+i -i");      /* vector [1 1-2i -2+i -i] */
cvec_neg( v );                                   /* v = [-1 -1+2i 2-i i]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Vec_new -->

<refentry id=man.-vec-new>
  <refmeta>
    <refentrytitle>Vec_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Vec_new</refname>
    <refpurpose>create a new vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Vec <function>Vec_new</function></funcdef>
        <paramdef> size_t elem_size, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>Vec_new</function> macro is used to create a new vector of <parameter>N</parameter> elements of type <parameter>type_t</parameter>. See also the specialized functions <function>vec_new</function>, <function>ivec_new</function>, and <function>bvec_new</function> which are defined for the most common use of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector (not initialized)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

char *v = (char *) Vec_new(char, 10); /* allocate a new vector of size 10 */
v[0] = 'i';            /* assign 'i' to the first element of the vector   */
v[10] = '.';           /* !!! INVALID: accessing beyond the end           */
v[9] = 't';            /* assign 't' to the last element of the vector    */
Vec_delete(v);         /* free the vector                                 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new -->

<refentry id=man.vec-new>
  <refmeta>
    <refentrytitle>vec_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new</refname>
    <refpurpose>create a new real vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new</function></funcdef>
        <paramdef> size_t length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>vec_new</function> creates a new vector of <parameter>N</parameter> real numbers represented with the <parameter>double</parameter> type.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector (not initialized)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(10);   /* allocate a new vector of size 10 */
v[0] = 5;              /* assign 5.0 to the 1st element of the vector */
v[10] = 2;             /* !!! INVALID: accessing beyond the end */
v[9] = 2.1;            /* assign 2.1 to the last element of the vector */
vec_delete(v);         /* free the vector */


</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new -->

<refentry id=man.ivec-new>
  <refmeta>
    <refentrytitle>ivec_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new</refname>
    <refpurpose>create a new integer vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new</function></funcdef>
        <paramdef> size_t length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new</function> creates a new vector of <parameter>length</parameter> integers represented with the <parameter>int</parameter> type.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector (not initialized)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(10); /* allocate a new vector of size 10 */
v[0] = 5;              /* assign 5 to the first element of the vector */
v[10] = 2;             /* !!! INVALID: accessing beyond the end */
v[9] = 2.1;            /* !!! WARNING: converting double to int */
ivec_delete(v);        /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new -->

<refentry id=man.bvec-new>
  <refmeta>
    <refentrytitle>bvec_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new</refname>
    <refpurpose>create a new byte vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new</function></funcdef>
        <paramdef> size_t length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_new</function> creates a new vector of <parameter>length</parameter> bytes represented with the 'unsigned char' type.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector (not initialized)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(10); /* allocate a new vector of size 10 */
v[0] = 5;              /* assign 5 to the first element of the vector */
v[10] = 2;             /* !!! INVALID: accessing beyond the end */
v[9] = -1;             /* !!! WARNING: converting signed to unsigned */
bvec_delete(v);        /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new -->

<refentry id=man.cvec-new>
  <refmeta>
    <refentrytitle>cvec_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new</refname>
    <refpurpose>create a new complex vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new</function></funcdef>
        <paramdef> size_t length
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_new</function> creates a new vector of <parameter>length</parameter> complex numbers.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector (not initialized)
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vcec v = cvec_new(10); /* allocate a new vector of size 10 */
v[0] = cplx_I;         /* assign i (square root of1) to the 1st element */
v[10] = 2;             /* !!! INVALID: accessing beyond the end */
v[9] = 2.1;            /* assign 2.1 to the last element of the vector */
cvec_delete(v);        /* free the vector */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_1N -->

<refentry id=man.vec-new-1N>
  <refmeta>
    <refentrytitle>vec_new_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_1N</refname>
    <refpurpose>create the vector 1, 2, ...</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_1N</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>vec_new_1N</function> creates the vector [1 2 ... <parameter>N</parameter>], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_1N(5);      /* creates the vector [1 2 3 4 5] */
vec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_1N -->

<refentry id=man.ivec-new-1N>
  <refmeta>
    <refentrytitle>ivec_new_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_1N</refname>
    <refpurpose>create a vector of integers 1, 2, ...</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_1N</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_1N</function> creates the vector [1 2 ... <parameter>N</parameter>], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_1N(5);    /* creates the vector [1 2 3 4 5] */
ivec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_1N -->

<refentry id=man.bvec-new-1N>
  <refmeta>
    <refentrytitle>bvec_new_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_1N</refname>
    <refpurpose>create a vector of bytes 1, 2, ...</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_1N</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_new_1N</function> creates the vector [1 2 ... <parameter>N</parameter>], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_1N(5);    /* creates the vector [1 2 3 4 5] */
bvec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_1N -->

<refentry id=man.cvec-new-1N>
  <refmeta>
    <refentrytitle>cvec_new_1N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_1N</refname>
    <refpurpose>create the vector 1, 2, ...</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_1N</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_new_1N</function> creates the vector [1 2 ... <parameter>N</parameter>], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_1N(5);    /* creates the vector [1 2 3 4 5] */
cvec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_add -->

<refentry id=man.vec-new-add>
  <refmeta>
    <refentrytitle>vec_new_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_add</refname>
    <refpurpose>Add two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_add</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_add</function> adds the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in a new vector, which is returned. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
v  = vec_new_add( v1, v2 );            /* v = [-2 0.5 -1 10]  */
vec_delete(v1);
vec_delete(v2);
vec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_add -->

<refentry id=man.ivec-new-add>
  <refmeta>
    <refentrytitle>ivec_new_add</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_add</refname>
    <refpurpose>Add two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_add</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_add</function> adds the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in a new vector, which is returned. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 0 -2 5" );     * vector [1 0 -2 5] */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5  */
v  = ivec_add( v1, v2 );               /* v = [-2 1 -1 10]  */
ivec_delete(v1);
ivec_delete(v2);
ivec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Vec_new_alloc -->

<refentry id=man.-vec-new-alloc>
  <refmeta>
    <refentrytitle>Vec_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Vec_new_alloc</refname>
    <refpurpose>create a new generic vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>Vec <function>Vec_new_alloc</function></funcdef>
        <paramdef> size_t elem_size, size_t length, size_t length_max
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  macro <function>Vec_new_alloc</function> creates a new vector of <parameter>length</parameter> entities. Unlike the macro <function>Vec_new</function>, the macro <function>Vec_new_alloc</function> allocates the memory for a greater number of elements than the vector length. Hence, the number <parameter>length_max</parameter> gives the size up to which the vector can grow without any memory reallocation. This function allows to avoid to reallocate memory if the vector comes to grow up to the value <parameter>length_max</parameter>. This may be useful if the vector is used as a stack. Note however that in most cases the user does not have to care about the real amount of memory allocated for the vector, since the geometric reallocation strategy allows to avoid to introduce additional complexity while modifying the size of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_alloc -->

<refentry id=man.vec-new-alloc>
  <refmeta>
    <refentrytitle>vec_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_alloc</refname>
    <refpurpose>create a new vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_alloc</function></funcdef>
        <paramdef> size_t length, size_t length_max
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>vec_new_alloc</function> creates a new vector of <parameter>length</parameter> real numbers represented with the <parameter>double</parameter> type. Unlike the function <function>vec_new</function>, the function <function>vec_new_alloc</function> allocates the memory for a greater number of elements than the vector length. Hence, the number <parameter>length_max</parameter> gives the size up to which the vector can grow without any memory reallocation. This function allows to avoid to reallocate memory if the vector comes to grow up to the value <parameter>length_max</parameter>. This may be useful if the vector is used as a stack. Note however that in most cases the user does not have to care about the real amount of memory allocated for the vector, since the geometric reallocation strategy allows to avoid to introduce additional complexity while modifying the size of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

int i;
int K = 100;
vec v = vec_new_alloc(0, K); /* create a new vector of size 0, and
                                  allocate memory for 100 elements */
for( i = 0 ; i &lt; K ; i++ )   /* Add 100 elements in the vector.    */
  vec_push(v, i);           
vec_delete(v);               /* free the vector                    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_alloc -->

<refentry id=man.ivec-new-alloc>
  <refmeta>
    <refentrytitle>ivec_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_alloc</refname>
    <refpurpose>create a new vector of integers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_alloc</function></funcdef>
        <paramdef> size_t length, size_t length_max
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>ivec_new_alloc</function> creates a new vector of <parameter>length</parameter> integers represented with the int type. Unlike the function <function>ivec_new</function>, the function <function>ivec_new_alloc</function> allocates memory for a greater number of elements than the vector length. Hence, the number <parameter>length_max</parameter> gives the size up to which the vector can grow without any memory reallocation. This function allows to avoid to reallocate memory if the vector comes to grow up to the value <parameter>length_max</parameter>. This may be useful if the vector is used as a stack. Note however that in most cases the user does not have to care about the real amount of memory allocated for the vector, since the geometric reallocation strategy allows to avoid to introduce additional complexity while modifying the size of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

int i;
int K = 100;
ivec v = ivec_new_alloc(0, K);/* create a new vector of size 0, and
                                  allocate memory for 100 elements */
for( i = 0 ; i &lt; K ; i++ )    /* Add 100 elements in the vector.   */
  ivec_push(v, i);           
ivec_delete(v);               /* free the vector                   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_alloc -->

<refentry id=man.bvec-new-alloc>
  <refmeta>
    <refentrytitle>bvec_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_alloc</refname>
    <refpurpose>create a new vector of bytes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_alloc</function></funcdef>
        <paramdef> size_t length, size_t length_max
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_new_alloc</function> creates a new vector of <parameter>length</parameter> bytes represented with the <parameter>byte</parameter> type. Unlike the function <function>bvec_new</function>, the function <function>bvec_new_alloc</function> allocates the memory for a greater number of elements than the vector length. Hence, the number <parameter>length_max</parameter> gives the size up to which the vector can grow without any memory reallocation. This function allows to avoid to reallocate memory if the vector comes to grow up to the value <parameter>length_max</parameter>. This may be useful if the vector is used as a stack. Note however that in most cases the user does not have to care about the real amount of memory allocated for the vector, since the geometric reallocation strategy allows to avoid to introduce additional complexity while modifying the size of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

int i;
int K = 100;
bvec v = bvec_new_alloc(0, K);/* create a new vector of size 0, and
                                  allocate memory for 100 elements */
for( i = 0 ; i &lt; K ; i++ )    /* Add 100 elements in the vector.   */
  bvec_push(v, i);           
bvec_delete(v);               /* free the vector                   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_alloc -->

<refentry id=man.cvec-new-alloc>
  <refmeta>
    <refentrytitle>cvec_new_alloc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_alloc</refname>
    <refpurpose>create a new vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_alloc</function></funcdef>
        <paramdef> size_t length, size_t length_max
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>cvec_new_alloc</function> creates a new vector of <parameter>length</parameter> integers represented with the complex type. Unlike the function <function>cvec_new</function>, the function <function>cvec_new_alloc</function> allocates memory for a greater number of elements than the vector length. Hence, the number <parameter>length_max</parameter> gives the size up to which the vector can grow without any memory reallocation. This function allows to avoid to reallocate memory if the vector comes to grow up to the value <parameter>length_max</parameter>. This may be useful if the vector is used as a stack. Note however that in most cases the user does not have to care about the real amount of memory allocated for the vector, since the geometric reallocation strategy allows to avoid to introduce additional complexity while modifying the size of a vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

int i;
int K = 100;
cvec v = cvec_new_alloc(0, K);/* create a new vector of size 0, and
                                  allocate memory for 100 elements */
for (i = 0 ; i &lt; K ; i++)    /* Add 100 elements in the vector.   */
  cvec_push(v, cplx(0,i));           
cvec_delete(v);               /* free the vector                   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_apply_function -->

<refentry id=man.vec-new-apply-function>
  <refmeta>
    <refentrytitle>vec_new_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_apply_function</refname>
    <refpurpose>Apply a function to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_apply_function</function></funcdef>
        <paramdef> vec v, it_function_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_apply_function -->

<refentry id=man.ivec-new-apply-function>
  <refmeta>
    <refentrytitle>ivec_new_apply_function</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_apply_function</refname>
    <refpurpose>Apply a function to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_apply_function</function></funcdef>
        <paramdef> ivec v, it_ifunction_t function, it_args_t args
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_arithm -->

<refentry id=man.vec-new-arithm>
  <refmeta>
    <refentrytitle>vec_new_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_arithm</refname>
    <refpurpose>create an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_arithm</function></funcdef>
        <paramdef> double start, double incr, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_arithm</function> creates a vector generated so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_arithm(5,-2.5,4); /* creates the vector [5 2.5 0 -2.5] */
vec_delete(v);                     /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_arithm -->

<refentry id=man.ivec-new-arithm>
  <refmeta>
    <refentrytitle>ivec_new_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_arithm</refname>
    <refpurpose>create an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_arithm</function></funcdef>
        <paramdef> int start, int incr, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_arithm</function> creates a vector generated so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_arithm(5,-2,4); /* creates the vector [5 3 1 -1] */
ivec_delete(v);                   /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_arithm -->

<refentry id=man.bvec-new-arithm>
  <refmeta>
    <refentrytitle>bvec_new_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_arithm</refname>
    <refpurpose>create an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_arithm</function></funcdef>
        <paramdef> byte start, byte incr, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_new_arithm</function> creates a vector generated so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_arithm(5,4,4);/* creates the vector [5 9 13 17] */
bvec_delete(v);                 /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_arithm -->

<refentry id=man.cvec-new-arithm>
  <refmeta>
    <refentrytitle>cvec_new_arithm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_arithm</refname>
    <refpurpose>create an arithmetic sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_arithm</function></funcdef>
        <paramdef> cplx start, cplx incr, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_new_arithm</function> creates a vector generated so that the elements correspond to the arithmetic sequence of starting value <parameter>start</parameter>, increasing by a step of <parameter>incr</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_arithm(0,cplx_I,4); /* creates the vector [0 i 2i 3i] */
cvec_delete(v);                       /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_abs -->

<refentry id=man.cvec-new-abs>
  <refmeta>
    <refentrytitle>cvec_new_abs</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_abs</refname>
    <refpurpose>vector constructed from the modules of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>cvec_new_abs</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_div -->

<refentry id=man.vec-new-div>
  <refmeta>
    <refentrytitle>vec_new_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_div</refname>
    <refpurpose>Divides two vectors (comp. per component)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_div</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_mul</function> processes a vector whose component is the division of the corresponding components of the vectors <parameter>v1</parameter> and <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 1 1 5" );     /* vector [-3 1 1 5]   */
v = vec_new_div( v1, v2 );             /* v = [0 0 -2 1]      */
vec_delete(v1);
vec_delete(v2);
vec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_div -->

<refentry id=man.ivec-new-div>
  <refmeta>
    <refentrytitle>ivec_new_div</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_div</refname>
    <refpurpose>Divides two vectors (comp. per component)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_div</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_div</function> processes a vector whose component is the division of the corresponding components of the vectors <parameter>v1</parameter> and <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string("1 0 -2 5");     * vector [1 0 -2 5] */
v2 = ivec_new_string("-3 1 1 5");    /* vector [-3 1 1 5] */
v = ivec_new_div(v1, v2);            /* v = [0 0 -2 1]    */
ivec_delete(v1);
ivec_delete(v2);
ivec_delete(v)
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_geom -->

<refentry id=man.vec-new-geom>
  <refmeta>
    <refentrytitle>vec_new_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_geom</refname>
    <refpurpose>create a geometric sequence of double values</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_geom</function></funcdef>
        <paramdef> double start, double r, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_geom</function> creates a vector generated so that the elements correspond to the geometric sequence of starting value <parameter>start</parameter>, generated by the factor of <parameter>r</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_geom(1.5,2,5);/* creates the vector [1.5 3 6 12 24] */
vec_delete(v);                /* free the vector                    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_geom -->

<refentry id=man.ivec-new-geom>
  <refmeta>
    <refentrytitle>ivec_new_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_geom</refname>
    <refpurpose>create a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_geom</function></funcdef>
        <paramdef> int start, int r, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_geom</function> creates a vector generated so that the elements correspond to the geometric sequence of starting value <parameter>start</parameter>, generated by the factor of <parameter>r</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_geom(1,2,6); /* creates the vector [1 2 4 8 16 32] */ 
ivec_delete(v);                /* free the vector                    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_geom -->

<refentry id=man.bvec-new-geom>
  <refmeta>
    <refentrytitle>bvec_new_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_geom</refname>
    <refpurpose>create a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_geom</function></funcdef>
        <paramdef> byte start, byte r, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_new_geom</function> function creates a vector generated so that the elements correspond to the geometric sequence of starting value <parameter>start</parameter>, generated by the factor of <parameter>r</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_geom(1,2,6); /* creates the vector [1 2 4 8 16 32] */ 
bvec_delete(v);                /* free the vector                    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_geom -->

<refentry id=man.cvec-new-geom>
  <refmeta>
    <refentrytitle>cvec_new_geom</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_geom</refname>
    <refpurpose>create a geometric sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_geom</function></funcdef>
        <paramdef> cplx start, cplx r, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_new_geom</function> function creates a vector generated so that the elements correspond to the geometric sequence of starting value <parameter>start</parameter>, generated by the factor of <parameter>r</parameter> and of length <parameter>N</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_geom(1,cplx_I,5); /* creates the vector [1 i -1 -i 1] */ 
cvec_delete(v);                     /* free the vector                  */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_mul -->

<refentry id=man.vec-new-mul>
  <refmeta>
    <refentrytitle>vec_new_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_mul</refname>
    <refpurpose>Multiply two vectors (comp. per component)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_mul</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_mul</function> processes a vector whose component is the product of the corresponding components of the vectors <parameter>v1</parameter> and <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector resulting for the component per component multiplication
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
v  = vec_new_mul( v1, v2 );                /* v = [-3 0 -2 25]    */
vec_delete(v1);
vec_delete(v2);
vec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_mul -->

<refentry id=man.ivec-new-mul>
  <refmeta>
    <refentrytitle>ivec_new_mul</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_mul</refname>
    <refpurpose>Multiply two vectors (comp. per component)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_mul</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_mul</function> processes a vector whose component is the product of the corresponding components of the vectors <parameter>v1</parameter> and <parameter>v2</parameter>. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector resulting for the component per component multiplication
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 5 -2 5" );     /* vector [1 5 -2 5]  */
v2 = ivec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]  */
v  = ivec_new_mul( v1, v2 );            /* v = [-3 0 -2 25]   */
ivec_delete(v1);
ivec_delete(v2);
ivec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_intersection -->

<refentry id=man.vec-new-intersection>
  <refmeta>
    <refentrytitle>vec_new_intersection</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_intersection</refname>
    <refpurpose>Intersection of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_intersection</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector corresponding to the intersection of the two vectors seen as lists
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_intersection -->

<refentry id=man.ivec-new-intersection>
  <refmeta>
    <refentrytitle>ivec_new_intersection</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_intersection</refname>
    <refpurpose>Intersection of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_intersection</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector corresponding to the intersection of the two vectors seen as lists
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_intersection -->

<refentry id=man.bvec-new-intersection>
  <refmeta>
    <refentrytitle>bvec_new_intersection</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_intersection</refname>
    <refpurpose>Compute the intersection of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_intersection</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector corresponding to the intersection of the two vectors seen as lists
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_intersection -->

<refentry id=man.cvec-new-intersection>
  <refmeta>
    <refentrytitle>cvec_new_intersection</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_intersection</refname>
    <refpurpose>Intersection of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_intersection</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A vector corresponding to the intersection of the two vectors seen as lists
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_concat -->

<refentry id=man.vec-new-concat>
  <refmeta>
    <refentrytitle>vec_new_concat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_concat</refname>
    <refpurpose>concatenation of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_concat</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector which is the concatenation of the two vectors
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_concat -->

<refentry id=man.ivec-new-concat>
  <refmeta>
    <refentrytitle>ivec_new_concat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_concat</refname>
    <refpurpose>concatenation of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_concat</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector which is the concatenation of the two vectors
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_concat -->

<refentry id=man.bvec-new-concat>
  <refmeta>
    <refentrytitle>bvec_new_concat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_concat</refname>
    <refpurpose>concatenation of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_concat</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector which is the concatenation of the two vectors
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_concat -->

<refentry id=man.cvec-new-concat>
  <refmeta>
    <refentrytitle>cvec_new_concat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_concat</refname>
    <refpurpose>concatenation of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_concat</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector which is the concatenation of the two vectors
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_ones -->

<refentry id=man.vec-new-ones>
  <refmeta>
    <refentrytitle>vec_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_ones</refname>
    <refpurpose>create a vector of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_ones</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>vec_new_ones</function> creates a new vector of <parameter>N</parameter> real numbers initialized to the value 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_ones(5);    /* creates the vector [1 1 1 1 1] */
vec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_ones -->

<refentry id=man.ivec-new-ones>
  <refmeta>
    <refentrytitle>ivec_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_ones</refname>
    <refpurpose>create a vector of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_ones</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_ones</function> creates a new vector of <parameter>N</parameter> integers initialized to the value 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_ones(5);  /* creates the vector [1 1 1 1 1] */
ivec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_ones -->

<refentry id=man.bvec-new-ones>
  <refmeta>
    <refentrytitle>bvec_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_ones</refname>
    <refpurpose>create a byte vector of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_ones</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> he function <function>bvec_new_ones</function> creates a new vector of <parameter>N</parameter> bytes initialized to the value 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_ones(5);  /* creates the vector [1 1 1 1 1] */
bvec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_ones -->

<refentry id=man.cvec-new-ones>
  <refmeta>
    <refentrytitle>cvec_new_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_ones</refname>
    <refpurpose>create a vector of ones</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_ones</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>cvec_new_ones</function> creates a new vector of <parameter>N</parameter> complex numbers initialized to the value 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of ones
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_ones(5);  /* creates the vector [1 1 1 1 1] */
cvec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_perm -->

<refentry id=man.ivec-new-perm>
  <refmeta>
    <refentrytitle>ivec_new_perm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_perm</refname>
    <refpurpose>generates an uniformly shuffled ivec</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_perm</function></funcdef>
        <paramdef> size_t len, unsigned int seed
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_perm</function> generates uniformly distributed permutations (or shuffles) using the Fisher-Yates algorithm. The newly created permutation has size <parameter>len</parameter> and is generated initializing the PRNG with <parameter>seed</parameter>. It is basically the opposite of function <function>ivec_qsort</function>. 

Reference: R.A. Fisher and F. Yates, Example 12, Statistical Tables, London, 1938. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    a pseudo-random uniformly-distributed permutation
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec p = ivec_new_perm (5,1234);   /* p= [0 2 3 4 1] */ 
ivec_delete (p);
p = ivec_new_perm (5, 12345);      /* p= [4 0 2 3 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_range -->

<refentry id=man.vec-new-range>
  <refmeta>
    <refentrytitle>vec_new_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_range</refname>
    <refpurpose>create the vector [0, 1, 2, ...N-1]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_range</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_new_range</function> function creates the vector [0 1 ... <parameter>N</parameter>-1], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_range(5);   /* creates the vector [0 1 2 3 4] */
vec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_range -->

<refentry id=man.ivec-new-range>
  <refmeta>
    <refentrytitle>ivec_new_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_range</refname>
    <refpurpose>create the vector [0, 1, 2, ...N-1]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_range</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_new_range</function> creates the vector [0 1 ... <parameter>N</parameter>-1], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_range(5); /* creates the vector [0 1 2 3 4] */
ivec_delete(v);             /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_range -->

<refentry id=man.bvec-new-range>
  <refmeta>
    <refentrytitle>bvec_new_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_range</refname>
    <refpurpose>create the vector [0, 1, 2, ...N-1]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_range</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_new_range</function> function creates the vector [0 1 ... <parameter>N</parameter>-1], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_range(5);  /* creates the vector [0 1 2 3 4] */
bvec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_range -->

<refentry id=man.cvec-new-range>
  <refmeta>
    <refentrytitle>cvec_new_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_range</refname>
    <refpurpose>create the vector [0, 1, 2, ...N-1]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_range</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_new_range</function> creates the vector [0 1 ... <parameter>N</parameter>-1], where the value <parameter>N</parameter> denotes the length of the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_range(5);   /* creates the vector [0 1 2 3 4] */
cvec_delete(v);               /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_reverse -->

<refentry id=man.vec-new-reverse>
  <refmeta>
    <refentrytitle>vec_new_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_reverse</refname>
    <refpurpose>Reverse the elements of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_reverse</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a new vector composed of the element of the input vector <parameter>v</parameter> taken in the backward order.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new vector containing the elements of the input vector in the reverse order
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v1 = vec_new_string("[1 2 3 4]");
vec v2 = vec_new_reverse(v1);        /* The vector [4 3 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_reverse -->

<refentry id=man.ivec-new-reverse>
  <refmeta>
    <refentrytitle>ivec_new_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_reverse</refname>
    <refpurpose>Reverse a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_reverse</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a new vector composed of the element of the input vector <parameter>v</parameter> taken in the backward order.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new vector containing the elements of the input vector in the reverse order
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v1 = ivec_new_string("[1 2 3 4]");
ivec v2 = ivec_new_reverse(v1);        /* The vector [4 3 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_reverse -->

<refentry id=man.bvec-new-reverse>
  <refmeta>
    <refentrytitle>bvec_new_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_reverse</refname>
    <refpurpose>Reverse a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_reverse</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a new vector composed of the element of the input vector <parameter>v</parameter> taken in the backward order.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new vector which is the reverse of the parameter vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v1 = bvec_new_string("[1 2 3 4]");
bvec v2 = bvec_new_reverse(v1);        /* The vector [4 3 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_reverse -->

<refentry id=man.cvec-new-reverse>
  <refmeta>
    <refentrytitle>cvec_new_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_reverse</refname>
    <refpurpose>Reverse a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_reverse</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function creates a new vector composed of the element of the input vector <parameter>v</parameter> taken in the backward order.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    A new vector containing the elements of the input vector in the reverse order
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v1 = cvec_new_string("[1 2 3 4]");
cvec v2 = cvec_new_reverse(v1);        /* The vector [4 3 2 1] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_set -->

<refentry id=man.vec-new-set>
  <refmeta>
    <refentrytitle>vec_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_set</refname>
    <refpurpose>new vector with a fixed value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_set</function></funcdef>
        <paramdef> double val, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_set -->

<refentry id=man.ivec-new-set>
  <refmeta>
    <refentrytitle>ivec_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_set</refname>
    <refpurpose>new vector with a fixed value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_set</function></funcdef>
        <paramdef> int val, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_set -->

<refentry id=man.bvec-new-set>
  <refmeta>
    <refentrytitle>bvec_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_set</refname>
    <refpurpose>new vector with a fixed value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_set</function></funcdef>
        <paramdef> byte val, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_set -->

<refentry id=man.cvec-new-set>
  <refmeta>
    <refentrytitle>cvec_new_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_set</refname>
    <refpurpose>new vector with a fixed value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_set</function></funcdef>
        <paramdef> cplx val, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_sub -->

<refentry id=man.vec-new-sub>
  <refmeta>
    <refentrytitle>vec_new_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_sub</refname>
    <refpurpose>Substract two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_sub</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_sub</function> substracts the vector <parameter>v2</parameter> from the vector <parameter>v1</parameter>. The result is stored in a new vector, which is returned. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector resulting from the substraction
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
v = vec_new_sub( v1, v2 );             /* v = [-4 0.5 -3 0]   */
vec_delete(v1);
vec_delete(v2);
vec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_sub -->

<refentry id=man.ivec-new-sub>
  <refmeta>
    <refentrytitle>ivec_new_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_sub</refname>
    <refpurpose>Substract two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_sub</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_sub</function> substracts the vector <parameter>v2</parameter> from the vector <parameter>v1</parameter>. The result is stored in a new vector, which is returned. 
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector resulting from the substraction
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 0 -2 5" );    /* vector [1 0 -2 5] */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5] */
v  = ivec_new_sub( v1, v2 );           /* v = [4 -1 -3 0]   */
ivec_delete(v1);
ivec_delete(v2);
ivec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_union -->

<refentry id=man.vec-new-union>
  <refmeta>
    <refentrytitle>vec_new_union</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_union</refname>
    <refpurpose>Merge two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_union</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Note that this function is different from the function <function>bvec_concat</function> in so far as it considers the vectors as sets of distinct values, and that the vector returned is composed of distinct values only.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the new vector composed of the values of 'v1' and 'v2'
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_union -->

<refentry id=man.ivec-new-union>
  <refmeta>
    <refentrytitle>ivec_new_union</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_union</refname>
    <refpurpose>Merge two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_union</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Note that this function is different from the function <function>bvec_concat</function> in so far as it considers the vectors as sets of distinct values, and that the vector returned is composed of distinct values only.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the new vector composed of the values of 'v1' and 'v2'
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_union -->

<refentry id=man.bvec-new-union>
  <refmeta>
    <refentrytitle>bvec_new_union</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_union</refname>
    <refpurpose>Merge two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_union</function></funcdef>
        <paramdef> bvec v1, bvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> Note that this function is different from the function <function>bvec_concat</function> in so far as it considers the vectors as sets of distinct values, and that the vector returned is composed of distinct values only.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the new vector composed of the values of 'v1' and 'v2'
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_unique -->

<refentry id=man.vec-new-unique>
  <refmeta>
    <refentrytitle>vec_new_unique</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_unique</refname>
    <refpurpose>set of distinct values of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_unique</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns a vector composed of the distinct values of the vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of distinct values
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("1 2 1 3 2 1 2");   /* v = [1 2 1 3 2 1 2] */
...
vec u = vec_unique (v);                     /* u = [1 2 3]         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_unique -->

<refentry id=man.bvec-new-unique>
  <refmeta>
    <refentrytitle>bvec_new_unique</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_unique</refname>
    <refpurpose>set of distinct values of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_unique</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns a vector composed of the distinct values of the vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of distinct values
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_string ("1 2 1 3 2 1 2");   /* v = [1 2 1 3 2 1 2] */
...
bvec u = bvec_unique (v);                   /* u = [1 2 3] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_unit_roots -->

<refentry id=man.cvec-new-unit-roots>
  <refmeta>
    <refentrytitle>cvec_new_unit_roots</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_unit_roots</refname>
    <refpurpose>construct a vector of units roots</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_unit_roots</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_void -->

<refentry id=man.vec-new-void>
  <refmeta>
    <refentrytitle>vec_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_void</refname>
    <refpurpose>create an empty vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>vec_new_void</function> creates a new empty vector, i.e. a vector of length 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The void vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_void();     /* creates the vector [] */
vec_delete(v);              /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_void -->

<refentry id=man.ivec-new-void>
  <refmeta>
    <refentrytitle>ivec_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_void</refname>
    <refpurpose>create an empty vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_void</function> creates a new empty vector, i.e. a vector of length 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The void vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_void();   /* creates the vector [] */
ivec_delete(v);             /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_void -->

<refentry id=man.bvec-new-void>
  <refmeta>
    <refentrytitle>bvec_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_void</refname>
    <refpurpose>create an empty vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>bvec_new_void</function> creates a new empty vector, i.e. a vector of length 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The void vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_void();    /* creates the vector [] */
bvec_delete(v);              /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_void -->

<refentry id=man.cvec-new-void>
  <refmeta>
    <refentrytitle>cvec_new_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_void</refname>
    <refpurpose>create an empty vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_void</function></funcdef>
        <paramdef>  
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>cvec_new_void</function> creates a new empty vector, i.e. a vector of length 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The void vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_void();    /* creates the vector [] */
cvec_delete(v);              /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_new_zeros -->

<refentry id=man.vec-new-zeros>
  <refmeta>
    <refentrytitle>vec_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_new_zeros</refname>
    <refpurpose>create a vector of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_new_zeros</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The  function <function>vec_new_zeros</function> creates a new vector of <parameter>N</parameter> real numbers initialized to the value 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector of zeros
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_zeros(5);    /* creates the vector [0 0 0 0 0] */
vec_delete(v);               /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_new_zeros -->

<refentry id=man.ivec-new-zeros>
  <refmeta>
    <refentrytitle>ivec_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_new_zeros</refname>
    <refpurpose>create a vector of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_new_zeros</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_new_zeros</function> creates a new vector of <parameter>N</parameter> integers initialized to the value 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector of zeros
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_zeros(5);  /* creates the vector [0 0 0 0 0] */
ivec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_new_zeros -->

<refentry id=man.bvec-new-zeros>
  <refmeta>
    <refentrytitle>bvec_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_new_zeros</refname>
    <refpurpose>create a byte vector of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_new_zeros</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_new_zeros</function> creates a new vector of <parameter>N</parameter> bytes initialized to the value 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector of zeros
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_zeros(5);  /* creates the vector [0 0 0 0 0] */
bvec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_new_zeros -->

<refentry id=man.cvec-new-zeros>
  <refmeta>
    <refentrytitle>cvec_new_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_new_zeros</refname>
    <refpurpose>create a vector of zeros</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_new_zeros</function></funcdef>
        <paramdef> size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_new_zeros</function> creates a new vector of <parameter>N</parameter> complex numbers initialized to the value 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The new vector of zeros
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_zeros(5);  /* creates the vector [0 0 0 0 0] */
cvec_delete(v);              /* free the vector                */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_inner_product -->

<refentry id=man.vec-inner-product>
  <refmeta>
    <refentrytitle>vec_inner_product</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_inner_product</refname>
    <refpurpose>Inner product of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_inner_product</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the inner product of the vectors <parameter>v1</parameter> and <parameter>v2</parameter>. These vectors must be of same length.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The inner product
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v1 = vec_new_string("-1 -2 1.5");     /* vector [ -1 -2 1.5 ]  */
vec v2 = vec_new_string("2 0 4");         /* vector [ 2 0 4 ]      */
double p = vec_inner_product(v1, v2);     /* p = 4                 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_inner_product -->

<refentry id=man.ivec-inner-product>
  <refmeta>
    <refentrytitle>ivec_inner_product</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_inner_product</refname>
    <refpurpose>Inner product of two vectors</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_inner_product</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns the inner product of the vectors <parameter>v1</parameter> and <parameter>v2</parameter>. These vectors must be of same length.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The inner product
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v1 = ivec_new_string("-1 -2 1.5");     /* vector [ -1 -2 1.5 ]  */
ivec v2 = ivec_new_string("2 0 4");         /* vector [ 2 0 4 ]      */
int p = vec_inner_product(v1, v2);          /* p = 4                 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_inner_product_robust -->

<refentry id=man.vec-inner-product-robust>
  <refmeta>
    <refentrytitle>vec_inner_product_robust</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_inner_product_robust</refname>
    <refpurpose>robust computation of inner product</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_inner_product_robust</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_inner_product_robust</function> uses Kahan's method to compute robust inner product between the two input vectors <parameter>v1</parameter> and <parameter>v2</parameter>. These vectors must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    robust inner product of the two input vectors
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v1 = vec_new_string("-1 -2 1.5");        /* vector [ -1 -2 1.5 ]  */
vec v2 = vec_new_string("2 0 4");            /* vector [ 2 0 4 ]      */
double p = vec_inner_product_robust(v1, v2); /* p = 4                 */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_norm -->

<refentry id=man.vec-norm>
  <refmeta>
    <refentrytitle>vec_norm</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_norm</refname>
    <refpurpose>take the norm of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_norm</function></funcdef>
        <paramdef> vec v, double n
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_normalize -->

<refentry id=man.vec-normalize>
  <refmeta>
    <refentrytitle>vec_normalize</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_normalize</refname>
    <refpurpose>Normalization of the vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_normalize</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_normalize</function> normalizes the vector <parameter>v</parameter> in the sense that all the components are divided by the vector sum. Therefore the sum of the resulting vector is 1.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 2 3 4");   /* Vector [1 2 3 4]      */
vec_normalize( v );                  /* v = [0.1 0.2 0.3 0.4] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_incr -->

<refentry id=man.vec-incr>
  <refmeta>
    <refentrytitle>vec_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_incr</refname>
    <refpurpose>Increment the components of a vector by a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_incr</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_incr</function> adds the quantity <parameter>a</parameter> to all the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("0.3 0.5 1");  /* vector [ 0.3 0.5 1 ]     */
vec_incr(v, 1.3);                     /* v = [ 1.6 1.8 2.3 ]      */
vec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_incr -->

<refentry id=man.ivec-incr>
  <refmeta>
    <refentrytitle>ivec_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_incr</refname>
    <refpurpose>Increment the components of a vector by a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_incr</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_incr</function> adds the quantity <parameter>a</parameter> to all the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("2 5 -1");   /* vector [ 2 5 -1 ]     */
ivec_incr(v, 2);                      /* v = [ 4 7 1 ]         */
ivec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_incr -->

<refentry id=man.cvec-incr>
  <refmeta>
    <refentrytitle>cvec_incr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_incr</refname>
    <refpurpose>Increment the components of a vector by a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_incr</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_incr</function> adds the quantity <parameter>a</parameter> to all the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v  = cvec_new_string("0.3-i i 1");  /* vector [ 0.3-i 1+i i ]     */
cplx c = cplx(1,1);
cvec_incr(v, c);                         /* v = [ 1.3 2+2i 1+2i ]      */
cvec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_incr_real -->

<refentry id=man.cvec-incr-real>
  <refmeta>
    <refentrytitle>cvec_incr_real</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_incr_real</refname>
    <refpurpose>add a value to the real components of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_incr_real</function></funcdef>
        <paramdef> cvec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_incr_real</function> adds the quantity <parameter>a</parameter> to the real part of the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v  = cvec_new_string("0.3-i i 1");  /* vector [ 0.3-i 1+i i ]     */
cvec_incr_real(v, 1.3);                  /* v = [ 1.6-i 2.3+i 1.3+i ]  */
cvec_delete(v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_ins -->

<refentry id=man.vec-ins>
  <refmeta>
    <refentrytitle>vec_ins</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_ins</refname>
    <refpurpose>insert an element into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_ins</function></funcdef>
        <paramdef> vec v, size_t pos, double elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_ins -->

<refentry id=man.ivec-ins>
  <refmeta>
    <refentrytitle>ivec_ins</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_ins</refname>
    <refpurpose>insert an element into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_ins</function></funcdef>
        <paramdef> ivec v, size_t pos, int elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_ins -->

<refentry id=man.bvec-ins>
  <refmeta>
    <refentrytitle>bvec_ins</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_ins</refname>
    <refpurpose>insert an element into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_ins</function></funcdef>
        <paramdef> bvec v, size_t pos, byte elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_ins -->

<refentry id=man.cvec-ins>
  <refmeta>
    <refentrytitle>cvec_ins</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_ins</refname>
    <refpurpose>insert an element into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_ins</function></funcdef>
        <paramdef> cvec v, size_t pos, cplx elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_init -->

<refentry id=man.vec-init>
  <refmeta>
    <refentrytitle>vec_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_init</refname>
    <refpurpose>Initialization of a vector from a buffer of double</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_init</function></funcdef>
        <paramdef> vec v, double * buf, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_init</function> function copies the <parameter>N</parameter> 
first elements of the memory area pointed by pointer <parameter>buf</parameter>.  
into vector <parameter>v</parameter>. Note that the vector
<parameter>v</parameter> must alreadly be allocated when this function is called.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_zeros(15);/* allocate a new vector of zeros of size 15 */
double * buf = (double *) malloc( 13 * sizeof( double ) );
vec_init(v,buf,13);       /* Copy the start the buffer into the vector */
vec_delete(v);            /* free the vector and the buffer */
free( buf );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_init -->

<refentry id=man.ivec-init>
  <refmeta>
    <refentrytitle>ivec_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_init</refname>
    <refpurpose>Initialization of a vector from a buffer of int</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_init</function></funcdef>
        <paramdef> ivec v, int * buf, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>ivec_init</function> function copies the <parameter>N</parameter> 
  first elements of the memory area pointed by pointer <parameter>buf</parameter>.  
  into vector <parameter>v</parameter>. Note that the vector
  <parameter>v</parameter> must be allocated at the time of the call.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_zeros(15);/* allocate a new vector of zeros of size 15 */
int * buf = (int *) malloc( 13 * sizeof(int) );
ivec_init(v,buf,13);       /* Copy the start the buffer into the vector */
ivec_delete(v);            /* free the vector and the buffer */
free( buf );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_init -->

<refentry id=man.bvec-init>
  <refmeta>
    <refentrytitle>bvec_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_init</refname>
    <refpurpose>Initialization of a vector from a buffer of byte</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_init</function></funcdef>
        <paramdef> bvec v, byte * buf, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_init</function> function copies the <parameter>N</parameter> 
  first elements of the memory area pointed by pointer <parameter>buf</parameter>.  
  into vector <parameter>v</parameter>. Note that the vector
  <parameter>v</parameter> must be allocated at the time of the call.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_zeros(15);/* allocate a new vector of zeros of size 15 */
byte * buf = (byte *) malloc( 13 * sizeof(byte) );
bvec_init(v,buf,13);       /* Copy the start the buffer into the vector */
bvec_delete(v);            /* free the vector and the buffer */
free( buf );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_init -->

<refentry id=man.cvec-init>
  <refmeta>
    <refentrytitle>cvec_init</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_init</refname>
    <refpurpose>Initialization of a vector from a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_init</function></funcdef>
        <paramdef> cvec v, cplx * buf, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_init</function> function copies the <parameter>N</parameter> 
  first elements of the memory area pointed by pointer <parameter>buf</parameter>.  
  into vector <parameter>v</parameter>. Note that the vector
  <parameter>v</parameter> must be allocated at the time of the call.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_zeros(15);/* allocate a new vector of zeros of size 15 */
cplx * buf = (cplx *) malloc( 13 * sizeof(cplx) );
cvec_init(v,buf,13);       /* Copy the start the buffer into the vector */
cvec_delete(v);            /* free the vector and the buffer */
free( buf );
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_ones -->

<refentry id=man.vec-ones>
  <refmeta>
    <refentrytitle>vec_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_ones</refname>
    <refpurpose>set all the elements of a vector to one</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_ones</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_ones</function> sets all the elements of an already existing vector to 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(5); /* creates a vector of size 5 (not initialized) */
vec_ones(v);        /* the vector is set to [1 1 1 1 1]             */
vec_delete(v);      /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_ones -->

<refentry id=man.ivec-ones>
  <refmeta>
    <refentrytitle>ivec_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_ones</refname>
    <refpurpose>Set all the elements of a vector to one</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_ones</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_ones</function> sets all the elements of an already existing vector to 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(5); /* creates a vector of size 5 (not initialized) */
ivec_ones(v);         /* the vector is set to [1 1 1 1 1]             */
ivec_delete(v);       /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_ones -->

<refentry id=man.bvec-ones>
  <refmeta>
    <refentrytitle>bvec_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_ones</refname>
    <refpurpose>set all the elements of a vector to one</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_ones</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_ones</function> sets all the elements of an already existing vector to 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(5); /* creates a vector of size 5 (not initialized) */
bvec_ones(v);         /* the vector is set to [1 1 1 1 1]             */
bvec_delete(v);       /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_ones -->

<refentry id=man.cvec-ones>
  <refmeta>
    <refentrytitle>cvec_ones</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_ones</refname>
    <refpurpose>set all the elements of a vector to one</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_ones</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_ones</function> sets all the elements of an already existing vector <parameter>v</parameter> to 1.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(5); /* creates a vector of size 5 (not initialized) */
cvec_ones(v);         /* the vector is set to [1 1 1 1 1]             */
cvec_delete(v);       /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Vec_copy -->

<refentry id=man.-vec-copy>
  <refmeta>
    <refentrytitle>Vec_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>Vec_copy</refname>
    <refpurpose>copy a vector into another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>Vec_copy</function></funcdef>
        <paramdef> Vec v1, Vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function copies the vector <parameter>orig</parameter> into the vector <parameter>dest</parameter>. The vectors must have the same length and both must be already allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_copy -->

<refentry id=man.vec-copy>
  <refmeta>
    <refentrytitle>vec_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_copy</refname>
    <refpurpose>copy a vector into another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_copy</function></funcdef>
        <paramdef> vec dest, vec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function copies the vector <parameter>orig</parameter> into the vector <parameter>dest</parameter>. The vectors must have the same length and both must be already allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_copy -->

<refentry id=man.ivec-copy>
  <refmeta>
    <refentrytitle>ivec_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_copy</refname>
    <refpurpose>copy a vector into another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_copy</function></funcdef>
        <paramdef> ivec dest, ivec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function copies the vector <parameter>orig</parameter> into the vector <parameter>dest</parameter>. The vectors must have the same length and both must be already allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_copy -->

<refentry id=man.bvec-copy>
  <refmeta>
    <refentrytitle>bvec_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_copy</refname>
    <refpurpose>copy a vector into another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_copy</function></funcdef>
        <paramdef> bvec dest, bvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function copies the vector <parameter>orig</parameter> into the vector <parameter>dest</parameter>. The vectors must have the same length and both must be already allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_copy -->

<refentry id=man.cvec-copy>
  <refmeta>
    <refentrytitle>cvec_copy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_copy</refname>
    <refpurpose>copy a complex vector into another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_copy</function></funcdef>
        <paramdef> cvec dest, cvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function copies the vector <parameter>orig</parameter> into the vector <parameter>dest</parameter>. The vectors must have the same length and both must be already allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_copy_from_ivec -->

<refentry id=man.vec-copy-from-ivec>
  <refmeta>
    <refentrytitle>vec_copy_from_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_copy_from_ivec</refname>
    <refpurpose>copy a vector with a type</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_copy_from_ivec</function></funcdef>
        <paramdef> vec dest, ivec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_copy_from_bvec -->

<refentry id=man.vec-copy-from-bvec>
  <refmeta>
    <refentrytitle>vec_copy_from_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_copy_from_bvec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_copy_from_bvec</function></funcdef>
        <paramdef> vec dest, bvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_copy_from_cvec -->

<refentry id=man.vec-copy-from-cvec>
  <refmeta>
    <refentrytitle>vec_copy_from_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_copy_from_cvec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_copy_from_cvec</function></funcdef>
        <paramdef> vec dest, cvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_copy_from_vec -->

<refentry id=man.ivec-copy-from-vec>
  <refmeta>
    <refentrytitle>ivec_copy_from_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_copy_from_vec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_copy_from_vec</function></funcdef>
        <paramdef> ivec dest, vec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_copy_from_bvec -->

<refentry id=man.ivec-copy-from-bvec>
  <refmeta>
    <refentrytitle>ivec_copy_from_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_copy_from_bvec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_copy_from_bvec</function></funcdef>
        <paramdef> ivec dest, bvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_copy_from_cvec -->

<refentry id=man.ivec-copy-from-cvec>
  <refmeta>
    <refentrytitle>ivec_copy_from_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_copy_from_cvec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_copy_from_cvec</function></funcdef>
        <paramdef> ivec dest, cvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_copy_from_vec -->

<refentry id=man.bvec-copy-from-vec>
  <refmeta>
    <refentrytitle>bvec_copy_from_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_copy_from_vec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_copy_from_vec</function></funcdef>
        <paramdef> bvec dest, vec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_copy_from_ivec -->

<refentry id=man.bvec-copy-from-ivec>
  <refmeta>
    <refentrytitle>bvec_copy_from_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_copy_from_ivec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_copy_from_ivec</function></funcdef>
        <paramdef> bvec dest, ivec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_copy_from_cvec -->

<refentry id=man.bvec-copy-from-cvec>
  <refmeta>
    <refentrytitle>bvec_copy_from_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_copy_from_cvec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_copy_from_cvec</function></funcdef>
        <paramdef> bvec dest, cvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_copy_from_vec -->

<refentry id=man.cvec-copy-from-vec>
  <refmeta>
    <refentrytitle>cvec_copy_from_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_copy_from_vec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_copy_from_vec</function></funcdef>
        <paramdef> cvec dest, vec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_copy_from_ivec -->

<refentry id=man.cvec-copy-from-ivec>
  <refmeta>
    <refentrytitle>cvec_copy_from_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_copy_from_ivec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_copy_from_ivec</function></funcdef>
        <paramdef> cvec dest, ivec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_copy_from_bvec -->

<refentry id=man.cvec-copy-from-bvec>
  <refmeta>
    <refentrytitle>cvec_copy_from_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_copy_from_bvec</refname>
    <refpurpose>copy a vector with a type conversion</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_copy_from_bvec</function></funcdef>
        <paramdef> cvec dest, bvec orig
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function copies the <parameter>orig</parameter> vector into the <parameter>dest</parameter> vector by making a type conversion. Note that the vectors must be already allocated and must have the same size.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None.
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_copy_mem -->

<refentry id=man.vec-copy-mem>
  <refmeta>
    <refentrytitle>vec_copy_mem</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_copy_mem</refname>
    <refpurpose>copy a vector into a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_copy_mem</function></funcdef>
        <paramdef> double * buf, vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_copy_mem -->

<refentry id=man.ivec-copy-mem>
  <refmeta>
    <refentrytitle>ivec_copy_mem</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_copy_mem</refname>
    <refpurpose>copy a vector into a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_copy_mem</function></funcdef>
        <paramdef> int * buf, ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_copy_mem -->

<refentry id=man.bvec-copy-mem>
  <refmeta>
    <refentrytitle>bvec_copy_mem</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_copy_mem</refname>
    <refpurpose>copy a vector into a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_copy_mem</function></funcdef>
        <paramdef> byte * buf, bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_copy_mem -->

<refentry id=man.cvec-copy-mem>
  <refmeta>
    <refentrytitle>cvec_copy_mem</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_copy_mem</refname>
    <refpurpose>copy a vector into a buffer</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_copy_mem</function></funcdef>
        <paramdef> cplx * buf, cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_count -->

<refentry id=man.vec-count>
  <refmeta>
    <refentrytitle>vec_count</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_count</refname>
    <refpurpose>Count an element in a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vec_count</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_count</function> counts the number of times that the double value <parameter>a</parameter> occurs in the vector <parameter>v</parameter> and returns this value.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The number of occurences found
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "1 3 -1 3" );    /* Vector [1 3 -1 3] */
int c = vec_count( v, 3 );               /* c = 2             */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_count -->

<refentry id=man.ivec-count>
  <refmeta>
    <refentrytitle>ivec_count</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_count</refname>
    <refpurpose>Count an element in a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_count</function></funcdef>
        <paramdef> ivec v, int a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_count</function> returns the number of times that the integer <parameter>a</parameter> occurs in the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The number of occurences found
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string( "1 3 -1 3" );    /* Vector [1 3 -1 3] */
int  c = ivec_count( v, 3 );               /* c = 2             */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_count -->

<refentry id=man.bvec-count>
  <refmeta>
    <refentrytitle>bvec_count</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_count</refname>
    <refpurpose>Count an element in a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>bvec_count</function></funcdef>
        <paramdef> bvec v, byte a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_count</function> counts the number of times that the byte <parameter>a</parameter> occurs in the vector <parameter>v</parameter> and returns this value.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The number of occurences found
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_string( "1 3 -1 3" );    /* Vector [1 3 -1 3] */
int  c = bvec_count( v, 3 );               /* c = 2             */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_count -->

<refentry id=man.cvec-count>
  <refmeta>
    <refentrytitle>cvec_count</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_count</refname>
    <refpurpose>Count an element in a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>cvec_count</function></funcdef>
        <paramdef> cvec v, cplx a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_count</function> counts the number of times that the complex number <parameter>a</parameter> occurs in the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The number of occurences found
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string( "i 3 -1+i 3" );    /* Vector [i 3 -1+i 3] */
int c  = cvec_count( v, 3 );                 /* c = 2               */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_pop -->

<refentry id=man.vec-pop>
  <refmeta>
    <refentrytitle>vec_pop</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_pop</refname>
    <refpurpose>remove the head of a vector (the last element)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_pop</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_pop -->

<refentry id=man.ivec-pop>
  <refmeta>
    <refentrytitle>ivec_pop</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_pop</refname>
    <refpurpose>remove the head of a vector (the last element)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_pop</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_pop -->

<refentry id=man.bvec-pop>
  <refmeta>
    <refentrytitle>bvec_pop</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_pop</refname>
    <refpurpose>remove the head of a vector (the last element)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_pop</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_pop -->

<refentry id=man.cvec-pop>
  <refmeta>
    <refentrytitle>cvec_pop</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_pop</refname>
    <refpurpose>remove the head of a vector (the last element)</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_pop</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_pow -->

<refentry id=man.vec-pow>
  <refmeta>
    <refentrytitle>vec_pow</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_pow</refname>
    <refpurpose>Set the components of a vector to a power</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_pow</function></funcdef>
        <paramdef> vec v, double a
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_pow</function> sets all the components of the vector <parameter>v</parameter> to the power <parameter>a</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 0 3 -2");           /* vector [1 0 3]  */
vec_pow( v, 3 );                              /* v = [1 0 27 -8] */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_push -->

<refentry id=man.vec-push>
  <refmeta>
    <refentrytitle>vec_push</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_push</refname>
    <refpurpose>add an element at the end of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_push</function></funcdef>
        <paramdef> vec v, double elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_push -->

<refentry id=man.ivec-push>
  <refmeta>
    <refentrytitle>ivec_push</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_push</refname>
    <refpurpose>add an element at the end of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_push</function></funcdef>
        <paramdef> ivec v, int elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_push -->

<refentry id=man.bvec-push>
  <refmeta>
    <refentrytitle>bvec_push</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_push</refname>
    <refpurpose>add an element at the end of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>bvec_push</function></funcdef>
        <paramdef> bvec v, byte elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_push -->

<refentry id=man.cvec-push>
  <refmeta>
    <refentrytitle>cvec_push</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_push</refname>
    <refpurpose>add an element at the end of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_push</function></funcdef>
        <paramdef> cvec v, cplx elt
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_qsort -->

<refentry id=man.vec-qsort>
  <refmeta>
    <refentrytitle>vec_qsort</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_qsort</refname>
    <refpurpose>Sort a vector with the quick sort</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_qsort</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sort</function> sorts a vector with the quick sort algorithm. Note that it makes use of the standard C function <function>qsort</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string ("1 0 2");    /* v = [1 0 2] */
vec_qsort (v);                       /* v = [0 1 2] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_qsort -->

<refentry id=man.ivec-qsort>
  <refmeta>
    <refentrytitle>ivec_qsort</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_qsort</refname>
    <refpurpose>Sort a vector with the quick sort</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_qsort</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_sort</function> sorts a vector with the quick sort algorithm. Note that it makes use of the standard C function <function>qsort</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string ("1 0 2");   /* v = [1 0 2] */
ivec_qsort (v);                       /* v = [0 1 2] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_qsort -->

<refentry id=man.bvec-qsort>
  <refmeta>
    <refentrytitle>bvec_qsort</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_qsort</refname>
    <refpurpose>Sort a vector with the quick sort</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_qsort</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_sort</function> sorts a vector with the quick sort algorithm. Note that it makes use of the standard C function <function>qsort</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_string ("1 0 2");   /* v = [1 0 2] */
bvec_qsort (v);                       /* v = [0 1 2] */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_qsort_index -->

<refentry id=man.vec-qsort-index>
  <refmeta>
    <refentrytitle>vec_qsort_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_qsort_index</refname>
    <refpurpose>sort the indexes of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>vec_qsort_index</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_qsort_index -->

<refentry id=man.ivec-qsort-index>
  <refmeta>
    <refentrytitle>ivec_qsort_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_qsort_index</refname>
    <refpurpose>sort the indexes of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_qsort_index</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_qsort_index -->

<refentry id=man.bvec-qsort-index>
  <refmeta>
    <refentrytitle>bvec_qsort_index</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_qsort_index</refname>
    <refpurpose>sort the indexes of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>bvec_qsort_index</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_range -->

<refentry id=man.vec-range>
  <refmeta>
    <refentrytitle>vec_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_range</refname>
    <refpurpose>set the vector to [0 1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_range</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_range</function> sets the vector <parameter>v</parameter> to [0 1 2... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(5); /* creates the vector (not initialized) */
vec_range(v);       /* set v to [0 1 2 3 4]                 */
vec_delete(v);      /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_range -->

<refentry id=man.ivec-range>
  <refmeta>
    <refentrytitle>ivec_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_range</refname>
    <refpurpose>set the vector to [0 1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_range</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_range</function> sets the vector <parameter>v</parameter> to [0 1 2... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(5); /* creates the vector (not initialized) */
ivec_range(v);        /* set v to [0 1 2 3 4]                 */
ivec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_range -->

<refentry id=man.bvec-range>
  <refmeta>
    <refentrytitle>bvec_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_range</refname>
    <refpurpose>set the vector to [0 1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_range</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_range</function> function sets the vector <parameter>v</parameter> to [0 1 2 ... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(5); /* creates the vector (not initialized) */
bvec_range(v);        /* set v to [0 1 2 3 4]                 */
bvec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_range -->

<refentry id=man.cvec-range>
  <refmeta>
    <refentrytitle>cvec_range</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_range</refname>
    <refpurpose>set the vector to [0 1 2 3 ...]</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_range</function></funcdef>
        <paramdef> cvec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_range</function> function sets the vector <parameter>v</parameter> to [0 1 2 ... ] so that the vector length remains the same.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(5); /* creates the vector (not initialized) */
cvec_range(v);        /* set v to [0 1 2 3 4]                 */
cvec_delete(v);       /* free the vector                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_replace -->

<refentry id=man.vec-replace>
  <refmeta>
    <refentrytitle>vec_replace</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_replace</refname>
    <refpurpose>replace a value by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>vec_replace</function></funcdef>
        <paramdef> vec v, double a, double b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_replace -->

<refentry id=man.ivec-replace>
  <refmeta>
    <refentrytitle>ivec_replace</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_replace</refname>
    <refpurpose>replace a value by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_replace</function></funcdef>
        <paramdef> ivec v, int a, int b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_replace -->

<refentry id=man.bvec-replace>
  <refmeta>
    <refentrytitle>bvec_replace</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_replace</refname>
    <refpurpose>replace a value by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>bvec_replace</function></funcdef>
        <paramdef> bvec v, byte a, byte b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_replace -->

<refentry id=man.cvec-replace>
  <refmeta>
    <refentrytitle>cvec_replace</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_replace</refname>
    <refpurpose>replace a value by another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>cvec_replace</function></funcdef>
        <paramdef> cvec v, cplx a, cplx b
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_reverse -->

<refentry id=man.vec-reverse>
  <refmeta>
    <refentrytitle>vec_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_reverse</refname>
    <refpurpose>Reverse a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_reverse</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_reverse</function> reverse the elements of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 2 3 4");       /* Vector [1 2 3 4] */
vec_reverse(v);                          /* v = [4 3 2 1]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_reverse -->

<refentry id=man.ivec-reverse>
  <refmeta>
    <refentrytitle>ivec_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_reverse</refname>
    <refpurpose>Reverse a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_reverse</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_reverse</function> reverse the elements of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 2 3 4");       /* Vector [1 2 3 4] */
ivec_reverse(v);                           /* v = [4 3 2 1]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_reverse -->

<refentry id=man.bvec-reverse>
  <refmeta>
    <refentrytitle>bvec_reverse</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_reverse</refname>
    <refpurpose>Reverse a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_reverse</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_reverse</function> reverse the elements of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_string("1 2 3 4");       /* Vector [1 2 3 4] */
bvec_reverse(v);                           /* v = [4 3 2 1]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_set -->

<refentry id=man.vec-set>
  <refmeta>
    <refentrytitle>vec_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_set</refname>
    <refpurpose>Initialization of a vector with a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_set</function></funcdef>
        <paramdef> vec v, double val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_set</function> function set all the elements of the vector <parameter>v</parameter> to the value <parameter>val</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(10);      /* allocate a new vector of size 10  */
vec_set(v,4);             /* Assign 4 to all the elements      */
vec_delete(v);            /* free the vector                   */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_set -->

<refentry id=man.ivec-set>
  <refmeta>
    <refentrytitle>ivec_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_set</refname>
    <refpurpose>Initialization of a vector with a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_set</function></funcdef>
        <paramdef> ivec v, int val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>ivec_set</function> function sets all the elements of the vector <parameter>v</parameter> to the value <parameter>val</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(10);    /* allocate a new vector of size 10      */
ivec_set(v,4);            /* Assign 4 to all the elements          */
ivec_delete(v);           /* free the vector                       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_set -->

<refentry id=man.bvec-set>
  <refmeta>
    <refentrytitle>bvec_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_set</refname>
    <refpurpose>Initialization of a vector with a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_set</function></funcdef>
        <paramdef> bvec v, byte val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_set</function> function set all the elements of the byte vector <parameter>v</parameter> to the value <parameter>val</parameter> .   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(10);    /* allocate a new vector of size 10      */
bvec_set(v,4);            /* Assign 4 to all the elements          */
bvec_delete(v);           /* free the vector                       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_set -->

<refentry id=man.cvec-set>
  <refmeta>
    <refentrytitle>cvec_set</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_set</refname>
    <refpurpose>Initialization of a vector with a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_set</function></funcdef>
        <paramdef> cvec v, cplx val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_set</function> function set all the elements of the vector <parameter>v</parameter> to the value <parameter>val</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(10);    /* allocate a new vector of size 10          */
bvec_set(v,cplx_I);       /* Assign the complex i to all the elements  */
bvec_delete(v);           /* free the vector                           */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_set_between -->

<refentry id=man.vec-set-between>
  <refmeta>
    <refentrytitle>vec_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_set_between</refname>
    <refpurpose>Set some vector components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_set_between</function></funcdef>
        <paramdef> vec v, size_t i1, size_t i2, double val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_set_between</function> function sets all the elements of the vector <parameter>v</parameter> whose position stands in the index interval [<parameter>i1</parameter>,<parameter>i2</parameter>] to the value <parameter>val</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("1 2 3 4 5");   /* vector [1 2 3 4 5] */
vec_set_between(v,3,end,10);           /* v = [1 2 3 10 10]  */
vec_delete(v);                         /* free the vector    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_set_between -->

<refentry id=man.ivec-set-between>
  <refmeta>
    <refentrytitle>ivec_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_set_between</refname>
    <refpurpose>Set some vector components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_set_between</function></funcdef>
        <paramdef> ivec v, size_t i1, size_t i2, int val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>ivec_set</function> function sets all the elements of the vector <parameter>v</parameter> whose position stands in the index interval [<parameter>i1</parameter>,<parameter>i2</parameter>] to the value <parameter>val</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("1 2 3 4 5");   * vector [1 2 3 4 5] */
ivec_set_between(v,3,end,10);           /* v = [1 2 3 10 10]  */
ivec_delete(v);                         /* free the vector    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_set_between -->

<refentry id=man.bvec-set-between>
  <refmeta>
    <refentrytitle>bvec_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_set_between</refname>
    <refpurpose>set a part of a vector with a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_set_between</function></funcdef>
        <paramdef> bvec v, size_t i1, size_t i2, byte val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_set</function> function set the elements of the byte vector <parameter>v</parameter>, whose position is between <parameter>i1</parameter> and <parameter>i2</parameter> (included), to the value <parameter>val</parameter> .   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

See &lt;function&gt;vec_set_between&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_set_between -->

<refentry id=man.cvec-set-between>
  <refmeta>
    <refentrytitle>cvec_set_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_set_between</refname>
    <refpurpose>Set some vector components to a value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_set_between</function></funcdef>
        <paramdef> cvec v, size_t i1, size_t i2, cplx val
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_set_between</function> function sets all the elements of the vector <parameter>v</parameter> whose position stands in the index interval [<parameter>i1</parameter>,<parameter>i2</parameter>] to the value <parameter>val</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    pointer to updated vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

See &lt;function&gt;vec_set_between&lt;/function&gt;
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_set_length -->

<refentry id=man.vec-set-length>
  <refmeta>
    <refentrytitle>vec_set_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_set_length</refname>
    <refpurpose>Modify the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_set_length</function></funcdef>
        <paramdef> vec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_set_length</function> macro modifies the length of the vector <parameter>v</parameter> so that it is equal to <parameter>N</parameter>.  
If the length increases, the additional elements are not initialized. 
If the amount of memory allocated to the vector is not sufficient, then the function <function>vec_set_length_max</function> is automatically called to allow the size modification. For this reason, the pointer corresponding to the vector may be modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(10);  /* allocate a new vector of size 10 */
vec_set_length(v,4);  /* reduce the size of the vector    */
vec_set_length(v,12); /* increases the size of the vector */
v[10] = 1;
v[11] = 4;
vec_delete(v);                        /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_set_length -->

<refentry id=man.ivec-set-length>
  <refmeta>
    <refentrytitle>ivec_set_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_set_length</refname>
    <refpurpose>Modify the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_set_length</function></funcdef>
        <paramdef> ivec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>ivec_set_length</function> macro modifies the length of the vector <parameter>v</parameter> so that it is equal to <parameter>N</parameter>. 
  If the length increases, the additional elements are not initialized. 
  If the amount of memory allocated to the vector is not sufficient, then the function <function>ivec_set_length_max</function> is automatically called to allow the size modification. For this reason, the pointer corresponding to the vector may be modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(10);  /* allocate a new vector of size 10 */
ivec_set_length(v,4);   /* reduce the size of the vector    */
ivec_set_length(v,12);  /* increases the size of the vector */
v[10] = 1;
v[11] = 4;
ivec_delete(v);                        /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_set_length -->

<refentry id=man.bvec-set-length>
  <refmeta>
    <refentrytitle>bvec_set_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_set_length</refname>
    <refpurpose>Modify the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_set_length</function></funcdef>
        <paramdef> bvec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>bvec_set_length</function> macro modifies the length of the vector <parameter>v</parameter> so that it is equal to <parameter>N</parameter>.  
If the length increases, the additional elements are not initialized. 
If the amount of memory allocated to the vector is not sufficient, then the function <function>bvec_set_length_max</function> is automatically called to allow the size modification. For this reason, the pointer corresponding to the vector may be modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(10);  /* allocate a new vector of size 10 */
bvec_set_length(v,4);   /* reduce the size of the vector    */
bvec_set_length(v,12);  /* increases the size of the vector */
v[10] = 1;
v[11] = 4;
bvec_delete(v);                        /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_set_length -->

<refentry id=man.cvec-set-length>
  <refmeta>
    <refentrytitle>cvec_set_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_set_length</refname>
    <refpurpose>Modify the length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_set_length</function></funcdef>
        <paramdef> cvec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_set_length</function> macro modifies the length of the vector <parameter>v</parameter> so that it is equal to <parameter>N</parameter>.  
If the length increases, the additional elements are not initialized. 
If the amount of memory allocated to the vector is not sufficient, then the function <function>cvec_set_length_max</function> is automatically called to allow the size modification. For this reason, the pointer corresponding to the vector may be modified.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(10);  /* allocate a new vector of size 10 */
cvec_set_length(v,4);   /* reduce the size of the vector    */
...
cvec_set_length(v,12);  /* increases the size of the vector */
...
bvec_delete(v);                          /* free the vector */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_set_length_max -->

<refentry id=man.vec-set-length-max>
  <refmeta>
    <refentrytitle>vec_set_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_set_length_max</refname>
    <refpurpose>Modify the amount of memory allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_set_length_max</function></funcdef>
        <paramdef> vec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>vec_set_length_max</function> function modifies the amount of memory allocated for a vector so that the maximum number of allocated elements is equal to <parameter>N</parameter>. It is the equivalent of <function>vec_new_alloc</function> for existing vectors. 
This macro may modify the pointer representing the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new(10);      /* allocate a new vector of size 10      */
vec_set_length_max(v,4);  /* modify the amount of allocated memory */
vec_delete(v);            /* free the vector                       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_set_length_max -->

<refentry id=man.ivec-set-length-max>
  <refmeta>
    <refentrytitle>ivec_set_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_set_length_max</refname>
    <refpurpose>Modify the amount of memory allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_set_length_max</function></funcdef>
        <paramdef> ivec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>ivec_set_length_max</function> macro modifies the amount of memory allocated for a vector. It is the equivalent of ivec_new_alloc for existing vectors. This function may modify the pointer representing the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new(10);    /* allocate a new vector of size 10      */
ivec_set_length_max(v,4); /* modify the amount of allocated memory */
ivec_delete(v);           /* free the vector                       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_set_length_max -->

<refentry id=man.bvec-set-length-max>
  <refmeta>
    <refentrytitle>bvec_set_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_set_length_max</refname>
    <refpurpose>Modify the amount of memory allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_set_length_max</function></funcdef>
        <paramdef> bvec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>ivec_set_length_max</function> macro modifies the amount of memory allocated for a vector so that the maximum number of allocated elements is equal to <parameter>N</parameter>. It is the equivalent of <function>bvec_new_alloc</function> for existing vectors. 
This function may modify the pointer representing the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new(10);    /* allocate a new vector of size 10      */
bvec_set_length_max(v,4); /* modify the amount of allocated memory */
bvec_delete(v);           /* free the vector                       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_set_length_max -->

<refentry id=man.cvec-set-length-max>
  <refmeta>
    <refentrytitle>cvec_set_length_max</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_set_length_max</refname>
    <refpurpose>Modify the amount of memory allocated to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_set_length_max</function></funcdef>
        <paramdef> cvec v, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The <function>cvec_set_length_max</function> macro modifies the amount of memory allocated for a vector so that the maximum number of allocated elements is equal to <parameter>N</parameter>. It is the equivalent of <function>cvec_new_alloc</function> for existing vectors. 
This function may modify the pointer representing the vector.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new(10);    /* allocate a new vector of size 10      */
cvec_set_length_max(v,4); /* modify the amount of allocated memory */
cvec_delete(v);           /* free the vector                       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_set_subvector -->

<refentry id=man.vec-set-subvector>
  <refmeta>
    <refentrytitle>vec_set_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_set_subvector</refname>
    <refpurpose>set a part of a vector with another vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_set_subvector</function></funcdef>
        <paramdef> vec v, vec s, size_t idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_set_subvector</function> sets the elements of the vector <parameter>v</parameter> with the elements of the vector <parameter>s</parameter>, starting at position <parameter>idx</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_zeros (6);    /* v = [0 0 0 0 0 0]  */
vec s = vec_new_ones (3);     /* s = [1 1 1]        */
vec_set_subvector (v, s, 2);  /* v = [0 0 1 1 1 0]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_set_subvector -->

<refentry id=man.ivec-set-subvector>
  <refmeta>
    <refentrytitle>ivec_set_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_set_subvector</refname>
    <refpurpose>set a part of a vector with another vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_set_subvector</function></funcdef>
        <paramdef> ivec v, ivec s, size_t idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_set_subvector</function> sets the elements of the vector <parameter>v</parameter> with the elements of the vector <parameter>s</parameter>, starting at position <parameter>idx</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_zeros (6);    /* v = [0 0 0 0 0 0]  */
ivec s = ivec_new_ones (3);     /* s = [1 1 1]        */
ivec_set_subvector (v, s, 2);   /* v = [0 0 1 1 1 0]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_set_subvector -->

<refentry id=man.bvec-set-subvector>
  <refmeta>
    <refentrytitle>bvec_set_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_set_subvector</refname>
    <refpurpose>set a part of a vector with another vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_set_subvector</function></funcdef>
        <paramdef> bvec v, bvec s, size_t idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_set_subvector</function> sets the elements of the vector <parameter>v</parameter> with the elements of the vector <parameter>s</parameter>, starting at position <parameter>idx</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new_zeros (6);    /* v = [0 0 0 0 0 0]  */
bvec s = bvec_new_ones (3);     /* s = [1 1 1]        */
bvec_set_subvector (v, s, 2);   /* v = [0 0 1 1 1 0]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_set_subvector -->

<refentry id=man.cvec-set-subvector>
  <refmeta>
    <refentrytitle>cvec_set_subvector</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_set_subvector</refname>
    <refpurpose>set a part of a vector with another vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_set_subvector</function></funcdef>
        <paramdef> cvec v, cvec s, size_t idx
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_set_subvector</function> sets the elements of the vector <parameter>v</parameter> with the elements of the vector <parameter>s</parameter>, starting at position <parameter>idx</parameter>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_zeros (6);    /* v = [0 0 0 0 0 0]  */
cvec s = cvec_new_ones (3);     /* s = [1 1 1]        */
cvec_set_subvector (v, s, 2);   /* v = [0 0 1 1 1 0]  */

</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sqr -->

<refentry id=man.vec-sqr>
  <refmeta>
    <refentrytitle>vec_sqr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sqr</refname>
    <refpurpose>put the components of a vector to square</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_sqr</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sqr</function> squares all the components of <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("[1 2 3 4]");   /* vector [1 2 3 4] */
vec_sqr( v );                          /* v = [1 4 9 16]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_sqr -->

<refentry id=man.ivec-sqr>
  <refmeta>
    <refentrytitle>ivec_sqr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_sqr</refname>
    <refpurpose>put the components of a vector to square</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_sqr</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_sqr</function> squares all the components of <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string("[1 2 3 4]");  /* vector [1 2 3 4] */
ivec_sqr( v );                          /* v = [1 4 9 16]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sqrt -->

<refentry id=man.vec-sqrt>
  <refmeta>
    <refentrytitle>vec_sqrt</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sqrt</refname>
    <refpurpose>components of a vector to square root</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_sqrt</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sqrt</function> takes the square root of all the components of <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string("[1 4 9 16]");   /* vector [1 4 9 16] */
vec_sqrt( v );                          /* v = [1 2 3 4]    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sub -->

<refentry id=man.vec-sub>
  <refmeta>
    <refentrytitle>vec_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sub</refname>
    <refpurpose>substract a vector from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_sub</function></funcdef>
        <paramdef> vec v1, vec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sub</function> substracts the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in the vector <parameter>v1</parameter>.
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = vec_new_string( "1 0.5 -2 5" );   /* vector [1 0.5 -2 5] */
v2 = vec_new_string( "-3 0 1 5" );     /* vector [-3 0 1 5]   */
vec_sub( v1, v2 );                     /* v1 = [-4 0.5 -3 0]  */
vec_delete(v1);
vec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_sub -->

<refentry id=man.ivec-sub>
  <refmeta>
    <refentrytitle>ivec_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_sub</refname>
    <refpurpose>substract a vector from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_sub</function></funcdef>
        <paramdef> ivec v1, ivec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_sub</function> substracts the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in the vector <parameter>v1</parameter>.
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "1 0 -2 5" );    /* vector [1 0 -2 5] */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5] */
ivec_sub( v1, v2 );                    /* v1 = [4 -1 -3 0]  */
ivec_delete(v1);
ivec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_sub -->

<refentry id=man.cvec-sub>
  <refmeta>
    <refentrytitle>cvec_sub</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_sub</refname>
    <refpurpose>substract a vector from another</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_sub</function></funcdef>
        <paramdef> cvec v1, cvec v2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_sub</function> substracts the vector <parameter>v2</parameter> to the vector <parameter>v1</parameter>. The result is stored in the vector <parameter>v1</parameter>.
Note that the vectors <parameter>v1</parameter> and <parameter>v2</parameter> must have the same length.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v1 = ivec_new_string( "i i -2 5" );    /* vector [i i -2 5]    */
v2 = ivec_new_string( "-3 1 1 5" );    /* vector [-3 1 1 5]    */
ivec_sub( v1, v2 );                    /* v1 = [i+3 i-1 -3 0]  */
ivec_delete(v1);
ivec_delete(v2);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sum -->

<refentry id=man.vec-sum>
  <refmeta>
    <refentrytitle>vec_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sum</refname>
    <refpurpose>Sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_sum</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sum</function> returns the sum of the vector <parameter>v</parameter>  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    sum of the elements of the input vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_sum( v );                 /* d = 10                        */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_sum -->

<refentry id=man.ivec-sum>
  <refmeta>
    <refentrytitle>ivec_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_sum</refname>
    <refpurpose>Sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_sum</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_sum</function> returns the sum of the vector <parameter>v</parameter>  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
int s = ivec_sum( v );                     /* s = 10                        */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_sum -->

<refentry id=man.cvec-sum>
  <refmeta>
    <refentrytitle>cvec_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_sum</refname>
    <refpurpose>Sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cvec_sum</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_sum</function> returns the sum of the vector <parameter>v</parameter>  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string( "i 1-2i 2.5 0 -i" ); /* Create a vector of 5 elements */
cplx s = cvec_sum( v );                        /* s = 3.5-2i                    */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sum_between -->

<refentry id=man.vec-sum-between>
  <refmeta>
    <refentrytitle>vec_sum_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sum_between</refname>
    <refpurpose>partial sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_sum_between</function></funcdef>
        <paramdef> vec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sum_between</function> returns the sum of the elements of the vector <parameter>v</parameter> whose position stands in the interval [<parameter>i1</parameter>,<parameter>i2</parameter>]. The keyword end may be used for the parameter <parameter>i2</parameter>. In that case it means that the summation is calculated from position <parameter>i1</parameter> to the end of the vector.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The partial sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1.5" ); /* Create a vector of 5 elements */
double d = vec_sum( v );                  /* d = 10.5                      */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_sum_between -->

<refentry id=man.ivec-sum-between>
  <refmeta>
    <refentrytitle>ivec_sum_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_sum_between</refname>
    <refpurpose>partial sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>ivec_sum_between</function></funcdef>
        <paramdef> ivec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_sum_between</function> returns the sum of the elements of the vector <parameter>v</parameter> whose position stands in the interval [<parameter>i1</parameter>,<parameter>i2</parameter>]. The keyword end may be used for the parameter <parameter>i2</parameter>. In that case it means that the summation must be proceeded from position <parameter>i1</parameter> to the end of the vector.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The partial sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
int s = ivec_sum_between( v, 2, end );     /* s = 7                         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_sum_between -->

<refentry id=man.cvec-sum-between>
  <refmeta>
    <refentrytitle>cvec_sum_between</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_sum_between</refname>
    <refpurpose>partial sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cplx <function>cvec_sum_between</function></funcdef>
        <paramdef> cvec v, size_t i1, size_t i2
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_sum_between</function> returns the sum of the elements of the vector <parameter>v</parameter> whose position stands in the interval [<parameter>i1</parameter>,<parameter>i2</parameter>]. The keyword end may be used for the parameter <parameter>i2</parameter>. In that case it means that the summation must be proceeded from position <parameter>i1</parameter> to the end of the vector.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The partial sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string( "i 1-2i 2.5 0 -i" ); /* Create a vector of 5 elements */
cplx s = cvec_sum_between( v, 2, end );        /* s = 2.5-i                     */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sum_robust -->

<refentry id=man.vec-sum-robust>
  <refmeta>
    <refentrytitle>vec_sum_robust</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sum_robust</refname>
    <refpurpose>Robut summation over elements of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_sum_robust</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sum_robust</function> uses Kahan's method to provide numerically robust summation over elements of a vector. It is known to minimize roundoff error in fixed-arithmetic. Use it when desesperate.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sum
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_sum_robust( v );          /* d = 10                        */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_sum_sqr -->

<refentry id=man.vec-sum-sqr>
  <refmeta>
    <refentrytitle>vec_sum_sqr</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_sum_sqr</refname>
    <refpurpose>Sum of square value of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_sum_sqr</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_sum_sqr</function> returns the sum of the square values of the components of the vector <parameter>v</parameter>.   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The sum of square of the vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_sum_sqr( v );             /* d = 50                        */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_to_bvec -->

<refentry id=man.vec-to-bvec>
  <refmeta>
    <refentrytitle>vec_to_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_to_bvec</refname>
    <refpurpose>convert a vector into a byte vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>vec_to_bvec</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_to_ivec -->

<refentry id=man.vec-to-ivec>
  <refmeta>
    <refentrytitle>vec_to_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_to_ivec</refname>
    <refpurpose>convet a vector into a vector of integers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>vec_to_ivec</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_to_cvec -->

<refentry id=man.vec-to-cvec>
  <refmeta>
    <refentrytitle>vec_to_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_to_cvec</refname>
    <refpurpose>convert a vector into a complex vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>vec_to_cvec</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_to_vec -->

<refentry id=man.ivec-to-vec>
  <refmeta>
    <refentrytitle>ivec_to_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_to_vec</refname>
    <refpurpose>convert a vector of integers into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>ivec_to_vec</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_to_bvec -->

<refentry id=man.ivec-to-bvec>
  <refmeta>
    <refentrytitle>ivec_to_bvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_to_bvec</refname>
    <refpurpose>convert a vector of integers into a vector of byte</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>ivec_to_bvec</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_to_cvec -->

<refentry id=man.ivec-to-cvec>
  <refmeta>
    <refentrytitle>ivec_to_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_to_cvec</refname>
    <refpurpose>convert a vector of integers into a complex vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>ivec_to_cvec</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_to_ivec -->

<refentry id=man.bvec-to-ivec>
  <refmeta>
    <refentrytitle>bvec_to_ivec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_to_ivec</refname>
    <refpurpose>convert a byte vector into a vector of integers</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>bvec_to_ivec</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the vector of integers
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_to_vec -->

<refentry id=man.bvec-to-vec>
  <refmeta>
    <refentrytitle>bvec_to_vec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_to_vec</refname>
    <refpurpose>convert a byte vector into a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>bvec_to_vec</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the vector of double values
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_to_cvec -->

<refentry id=man.bvec-to-cvec>
  <refmeta>
    <refentrytitle>bvec_to_cvec</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_to_cvec</refname>
    <refpurpose>convert a byte vector into a complex vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>bvec_to_cvec</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the new complex vector
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_cum_sum -->

<refentry id=man.vec-cum-sum>
  <refmeta>
    <refentrytitle>vec_cum_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_cum_sum</refname>
    <refpurpose>Cumulative sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vec_cum_sum</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_cum_sum</function> returns the cumulative sum of the vector <parameter>v</parameter>. The cumulative sum is a vector defined so that the component i of this vector represent the summation of the element of <parameter>v</parameter> from position 0 to position i (included).   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of partial summations
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
vec s = vec_cum_sum( v );                /* s = [5 3 5 9 10]              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_cum_sum -->

<refentry id=man.ivec-cum-sum>
  <refmeta>
    <refentrytitle>ivec_cum_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_cum_sum</refname>
    <refpurpose>cumulative sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_cum_sum</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_cum_sum</function> returns the cumulative sum of the vector <parameter>v</parameter>. The cumulative sum is a vector defined so that the component i of this vector represent the summation of the element of <parameter>v</parameter> from position 0 to position i (included).   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of partial summations
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
ivec s = ivec_cum_sum( v );                /* s = [5 3 5 9 10]              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_cum_sum -->

<refentry id=man.cvec-cum-sum>
  <refmeta>
    <refentrytitle>cvec_cum_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_cum_sum</refname>
    <refpurpose>Cumulative sum of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>cvec <function>cvec_cum_sum</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_cum_sum</function> returns the cumulative sum of the vector <parameter>v</parameter>. The cumulative sum is a vector defined so that the component i of this vector represent the summation of the element of <parameter>v</parameter> from position 0 to position i (included).   </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of partial summations
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

cvec v = cvec_new_string( "i -2 2 4 -2i" );  /* Create a vector of 5 elements */
cvec s = cvec_cum_sum( v );                  /* s = [i -2+i i 4+i 4-i ]       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_unique -->

<refentry id=man.ivec-unique>
  <refmeta>
    <refentrytitle>ivec_unique</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_unique</refname>
    <refpurpose>set of distinct values of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>ivec_unique</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function returns a vector composed of the distinct values of the vector <parameter>v</parameter>. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The vector of distinct values
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new_string ("1 2 1 3 2 1 2");   /* v = [1 2 1 3 2 1 2] */
...
ivec u = ivec_unique (v);                     /* u = [1 2 3]         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_variance -->

<refentry id=man.vec-variance>
  <refmeta>
    <refentrytitle>vec_variance</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_variance</refname>
    <refpurpose>computes variance estimate of input vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_variance</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_variance</function> computes an estimate of input vector <parameter>v</parameter> variance. 

See <function>vec_variance_robust</function>.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    the estimate of input vector variance
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_variance( v );            /* d = 6                         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_variance_robust -->

<refentry id=man.vec-variance-robust>
  <refmeta>
    <refentrytitle>vec_variance_robust</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_variance_robust</refname>
    <refpurpose>robust computation of the variance of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vec_variance_robust</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_variance_robust</function> uses Knuth's two-pass algorithm for robust computation of the variance of vector <parameter>v</parameter>. During the first pass, a robust estimate of the mean is computed. During the second pass, we apply Knuth's method on the residuals. Use it when desesperate or in case of numerically strange values. The estimate given by this function is known to behave gracefully even with numerically strange data.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The robust variance estimate of input vector
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new_string( "5 -2 2 4 1" );  /* Create a vector of 5 elements */
double d = vec_variance_robust( v );     /* d = 6                         */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Francois Cayre &lt;cayre@inpg.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_void -->

<refentry id=man.vec-void>
  <refmeta>
    <refentrytitle>vec_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_void</refname>
    <refpurpose>set a vector to the void vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_void</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_void</function> set the vector length of <parameter>v</parameter> to 0. 
The memory allocated to this vector remains allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v = vec_new_ones(5);
vec_void(v);         /* Set the vector to []  */
vec_delete(v);       /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_void -->

<refentry id=man.ivec-void>
  <refmeta>
    <refentrytitle>ivec_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_void</refname>
    <refpurpose>set a vector to the void vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_void</function></funcdef>
        <paramdef> ivec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_void</function> set the vector length of <parameter>v</parameter> to 0. 
The memory allocated to this vector remains allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v = ivec_new_ones(5);
ivec_void(v);         /* Set the vector to []  */
ivec_delete(v);       /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_void -->

<refentry id=man.bvec-void>
  <refmeta>
    <refentrytitle>bvec_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_void</refname>
    <refpurpose>set a vector to the void vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_void</function></funcdef>
        <paramdef> bvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_void</function> set the vector length of <parameter>v</parameter> to 0. The memory allocated to this vector remains allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v = bvec_new_ones(5);
bvec_void(v);            /* Set the vector to []  */
bvec_delete(v);          /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_void -->

<refentry id=man.cvec-void>
  <refmeta>
    <refentrytitle>cvec_void</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_void</refname>
    <refpurpose>set a vector to the void vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_void</function></funcdef>
        <paramdef> cvec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_void</function> set the vector length of <parameter>v</parameter> to 0. 
The memory allocated to this vector remains allocated.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

v = cvec_new_ones(5);
cvec_void(v);         /* Set the vector to []  */
cvec_delete(v);       /* free the vector       */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vec_zeros -->

<refentry id=man.vec-zeros>
  <refmeta>
    <refentrytitle>vec_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vec_zeros</refname>
    <refpurpose>set all the elements of a vector to zero</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vec_zeros</function></funcdef>
        <paramdef> vec v
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>vec_zeros</function> sets all the elements of an already existing vector to 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new( 5 ); /* creates a vector of size 5 (not initialized) */
vec_zeros( v );       /* the vector is set to [0 0 0 0 0]             */
vec_delete(v);        /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- ivec_zeros -->

<refentry id=man.ivec-zeros>
  <refmeta>
    <refentrytitle>ivec_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ivec_zeros</refname>
    <refpurpose>Set all the elements of a vector to zero</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>ivec_zeros</function></funcdef>
        <paramdef> ivec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>ivec_zeros</function> sets all the elements of an already existing vector to 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

ivec v = ivec_new( 5 ); /* creates a vector of size 5 (not initialized) */
ivec_zeros( v );        /* the vector is set to [0 0 0 0 0]             */
ivec_delete(v);         /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- bvec_zeros -->

<refentry id=man.bvec-zeros>
  <refmeta>
    <refentrytitle>bvec_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>bvec_zeros</refname>
    <refpurpose>set all the elements of a vector to zero</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>bvec_zeros</function></funcdef>
        <paramdef> bvec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>bvec_zeros</function> sets all the elements of an already existing vector to 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

bvec v = bvec_new( 5 ); /* creates a vector of size 5 (not initialized) */
bvec_zeros( v );        /* the vector is set to [0 0 0 0 0]             */
bvec_delete(v);         /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- cvec_zeros -->

<refentry id=man.cvec-zeros>
  <refmeta>
    <refentrytitle>cvec_zeros</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>cvec_zeros</refname>
    <refpurpose>set all the elements of a vector to zero</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vec.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>cvec_zeros</function></funcdef>
        <paramdef> cvec
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> The function <function>cvec_zeros</function> sets all the elements of an already existing vector to 0.  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    None
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;vec.h&gt;

...

vec v = vec_new( 5 ); /* creates a vector of size 5 (not initialized) */
...
vec_zeros( v );       /* the vector is set to [0 0 0 0 0]             */
vec_delete(v);        /* free the vector                              */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_affect_codewords -->

<refentry id=man.vlc-affect-codewords>
  <refmeta>
    <refentrytitle>vlc_affect_codewords</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_affect_codewords</refname>
    <refpurpose>assign the codewords of a variable length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vlc_affect_codewords</function></funcdef>
        <paramdef> vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_delete -->

<refentry id=man.vlc-delete>
  <refmeta>
    <refentrytitle>vlc_delete</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_delete</refname>
    <refpurpose>free a variable length code object</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vlc_delete</function></funcdef>
        <paramdef> vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_decode_concat -->

<refentry id=man.vlc-decode-concat>
  <refmeta>
    <refentrytitle>vlc_decode_concat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_decode_concat</refname>
    <refpurpose>decoding of a binary sequence encoded by a VLC</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>vlc_decode_concat</function></funcdef>
        <paramdef> const vlc_t * vlc, bvec E
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_decode_concat_N -->

<refentry id=man.vlc-decode-concat-N>
  <refmeta>
    <refentrytitle>vlc_decode_concat_N</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_decode_concat_N</refname>
    <refpurpose>decode a variable length encoded sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>ivec <function>vlc_decode_concat_N</function></funcdef>
        <paramdef> const vlc_t * vlc, bvec E, size_t N
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_encode_concat -->

<refentry id=man.vlc-encode-concat>
  <refmeta>
    <refentrytitle>vlc_encode_concat</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_encode_concat</refname>
    <refpurpose>encode a sequence with a VLC</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>bvec <function>vlc_encode_concat</function></funcdef>
        <paramdef> const vlc_t * vlc, ivec S
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_flc -->

<refentry id=man.vlc-flc>
  <refmeta>
    <refentrytitle>vlc_flc</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_flc</refname>
    <refpurpose>construct a fixed length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vlc_t * <function>vlc_flc</function></funcdef>
        <paramdef> int nb_bits
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_get_child0 -->

<refentry id=man.vlc-get-child0>
  <refmeta>
    <refentrytitle>vlc_get_child0</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_get_child0</refname>
    <refpurpose>left child node of a node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_get_child0</function></funcdef>
        <paramdef> const vlc_t * vlc, int s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_get_child1 -->

<refentry id=man.vlc-get-child1>
  <refmeta>
    <refentrytitle>vlc_get_child1</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_get_child1</refname>
    <refpurpose>right child node of a node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_get_child1</function></funcdef>
        <paramdef> const vlc_t * vlc, int s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_get_cwd -->

<refentry id=man.vlc-get-cwd>
  <refmeta>
    <refentrytitle>vlc_get_cwd</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_get_cwd</refname>
    <refpurpose>get the codeword associated with a node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_get_cwd</function></funcdef>
        <paramdef> const vlc_t * vlc, int node
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_get_cwd_length -->

<refentry id=man.vlc-get-cwd-length>
  <refmeta>
    <refentrytitle>vlc_get_cwd_length</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_get_cwd_length</refname>
    <refpurpose>get the codeword length associated with a node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_get_cwd_length</function></funcdef>
        <paramdef> const vlc_t * vlc, int node
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_huffman -->

<refentry id=man.vlc-huffman>
  <refmeta>
    <refentrytitle>vlc_huffman</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_huffman</refname>
    <refpurpose>construction according to the Huffman algorithm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vlc_t * <function>vlc_huffman</function></funcdef>
        <paramdef> const vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_hu_tucker -->

<refentry id=man.vlc-hu-tucker>
  <refmeta>
    <refentrytitle>vlc_hu_tucker</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_hu_tucker</refname>
    <refpurpose>construction according to the Hu-Tucker algorithm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vlc_t * <function>vlc_hu_tucker</function></funcdef>
        <paramdef> const vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_kraft_sum -->

<refentry id=man.vlc-kraft-sum>
  <refmeta>
    <refentrytitle>vlc_kraft_sum</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_kraft_sum</refname>
    <refpurpose>sum kraft of a variable length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vlc_kraft_sum</function></funcdef>
        <paramdef> const vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_clone -->

<refentry id=man.vlc-clone>
  <refmeta>
    <refentrytitle>vlc_clone</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_clone</refname>
    <refpurpose>copy a variable length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vlc_t * <function>vlc_clone</function></funcdef>
        <paramdef> const vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_maxh -->

<refentry id=man.vlc-maxh>
  <refmeta>
    <refentrytitle>vlc_maxh</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_maxh</refname>
    <refpurpose>length of the longest codeword</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_maxh</function></funcdef>
        <paramdef> const vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_mdl -->

<refentry id=man.vlc-mdl>
  <refmeta>
    <refentrytitle>vlc_mdl</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_mdl</refname>
    <refpurpose>mean description length of a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vlc_mdl</function></funcdef>
        <paramdef> const vlc_t * vlc, const vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_minh -->

<refentry id=man.vlc-minh>
  <refmeta>
    <refentrytitle>vlc_minh</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_minh</refname>
    <refpurpose>length of the smallest codeword</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_minh</function></funcdef>
        <paramdef> const vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_new -->

<refentry id=man.vlc-new>
  <refmeta>
    <refentrytitle>vlc_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_new</refname>
    <refpurpose>new variable length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vlc_t * <function>vlc_new</function></funcdef>
        <paramdef> int n
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_nodes_delta_energy -->

<refentry id=man.vlc-nodes-delta-energy>
  <refmeta>
    <refentrytitle>vlc_nodes_delta_energy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_nodes_delta_energy</refname>
    <refpurpose>reduction of MSE associated with a node bit</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vlc_nodes_delta_energy</function></funcdef>
        <paramdef> const vlc_t * vlc, vec pdf, vec symb
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_nodes_entropy -->

<refentry id=man.vlc-nodes-entropy>
  <refmeta>
    <refentrytitle>vlc_nodes_entropy</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_nodes_entropy</refname>
    <refpurpose>entropies of node bits</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vlc_nodes_entropy</function></funcdef>
        <paramdef> const vlc_t * vlc, vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_nodes_expectation -->

<refentry id=man.vlc-nodes-expectation>
  <refmeta>
    <refentrytitle>vlc_nodes_expectation</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_nodes_expectation</refname>
    <refpurpose>expectation of a vlc node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vlc_nodes_expectation</function></funcdef>
        <paramdef> const vlc_t * vlc, vec pdf, vec symb
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_nodes_pdf -->

<refentry id=man.vlc-nodes-pdf>
  <refmeta>
    <refentrytitle>vlc_nodes_pdf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_nodes_pdf</refname>
    <refpurpose>probabilities of 0 and 1 for vlc nodes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vlc_nodes_pdf</function></funcdef>
        <paramdef> const vlc_t * vlc, vec pdf
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_nodes_variance -->

<refentry id=man.vlc-nodes-variance>
  <refmeta>
    <refentrytitle>vlc_nodes_variance</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_nodes_variance</refname>
    <refpurpose>variances given the knowledge of the nodes</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>vlc_nodes_variance</function></funcdef>
        <paramdef> const vlc_t * vlc, vec pdf, vec symb
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_node_variance -->

<refentry id=man.vlc-node-variance>
  <refmeta>
    <refentrytitle>vlc_node_variance</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_node_variance</refname>
    <refpurpose>variance given the knowledge of a node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>double <function>vlc_node_variance</function></funcdef>
        <paramdef> const vlc_t * vlc, int node, vec pdf, vec symbols
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_nb_bits_required -->

<refentry id=man.vlc-nb-bits-required>
  <refmeta>
    <refentrytitle>vlc_nb_bits_required</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_nb_bits_required</refname>
    <refpurpose>number of bits required to encode a sequence</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_nb_bits_required</function></funcdef>
        <paramdef> const vlc_t * vlc, ivec S
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_print -->

<refentry id=man.vlc-print>
  <refmeta>
    <refentrytitle>vlc_print</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_print</refname>
    <refpurpose>print a variable length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vlc_print</function></funcdef>
        <paramdef> const vlc_t * vlc
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_print_all -->

<refentry id=man.vlc-print-all>
  <refmeta>
    <refentrytitle>vlc_print_all</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_print_all</refname>
    <refpurpose>detailled printing a variable length code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>vlc_print_all</function></funcdef>
        <paramdef> const vlc_t * vlc, vec pdf, vec symb
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_read -->

<refentry id=man.vlc-read>
  <refmeta>
    <refentrytitle>vlc_read</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_read</refname>
    <refpurpose>construct a VLC from a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vlc_t * <function>vlc_read</function></funcdef>
        <paramdef> const char * s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_is_leaf -->

<refentry id=man.vlc-is-leaf>
  <refmeta>
    <refentrytitle>vlc_is_leaf</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_is_leaf</refname>
    <refpurpose>check if a node is a leaf</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_is_leaf</function></funcdef>
        <paramdef> const vlc_t * vlc, int s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- vlc_is_node -->

<refentry id=man.vlc-is-node>
  <refmeta>
    <refentrytitle>vlc_is_node</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>vlc_is_node</refname>
    <refpurpose>check if a node is an internal node</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/vlc.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>int <function>vlc_is_node</function></funcdef>
        <paramdef> const vlc_t * vlc, int s
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_dwt -->

<refentry id=man.it-dwt>
  <refmeta>
    <refentrytitle>it_dwt</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_dwt</refname>
    <refpurpose>discrete wavelet transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>it_dwt</function></funcdef>
        <paramdef> vec v, it_wavelet_lifting_t const *lifting, int levels
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the <parameter>levels</parameter>-level discrete wavelet transform of <parameter>v</parameter> using the lifting steps described by <parameter>lifting</parameter>. Currently the lifting steps for the usual 5/3 and 9/7 biorthogonal filters are predefined as "it_wavelet_lifting_53" and "it_wavelet_lifting_97", although you can provide your own lifting steps.
This transform is critically sampled, therefore the output vector of coefficients has the same size as the input vector <parameter>v</parameter>.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The set of wavelet coefficients
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet.h&gt;

...

/* analyse a signal 'v' using a 5-level 9/7 wavelet decomposition */
vec vt = it_dwt(v, it_wavelet_lifting_97, 5);

/* clear the high subband */
vec_set_between(vt, (vec_length(v) + 1) / 2, end, 0);

/* recompose the vector by inverse transform */
vec vr = it_idwt(vt, it_wavelet_lifting_97, 5);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_idwt -->

<refentry id=man.it-idwt>
  <refmeta>
    <refentrytitle>it_idwt</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_idwt</refname>
    <refpurpose>inverse discrete wavelet transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>it_idwt</function></funcdef>
        <paramdef> vec t, it_wavelet_lifting_t const *lifting, int levels
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the inverse discrete wavelet transform of <parameter>vt</parameter> using the lifting steps described by <parameter>lifting</parameter>. The input vector of coefficients <parameter>vt</parameter> is the concatenation of all the coefficients in each subbands starting from the low-frequency subband. Currently the lifting steps for the usual 5/3 and 9/7 biorthogonal filters are predefined as "it_wavelet_lifting_53" and "it_wavelet_lifting_97", although you can provide your own lifting steps.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The set of inverse wavelet coefficients
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet.h&gt;

...

/* analyse a signal 'v' using a 5-level 9/7 wavelet decomposition */
vec vt = it_dwt(v, it_wavelet_lifting_97, 5);
/* clear the high subband */
vec_set_between(vt, (vec_length(v) + 1) / 2, end, 0);
/* recompose the vector by inverse transform */
vec vr = it_idwt(vt, it_wavelet_lifting_97, 5);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_wavelet_merge -->

<refentry id=man.it-wavelet-merge>
  <refmeta>
    <refentrytitle>it_wavelet_merge</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_wavelet_merge</refname>
    <refpurpose>merge the subband vectors of a wavelet to a vector</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec <function>it_wavelet_merge</function></funcdef>
        <paramdef> vec * subbands, int nb_level
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function merges the set of subband vectors <parameter>subbands</parameter> to a single concatenated vector suitable for <function>it_idwt</function>. The number of levels <parameter>nb_level</parameter> must be given. The <parameter>subbands</parameter> argument is an array of <parameter>nb_level</parameter>+1 vectors with 'subbands[0]' representing the low-frequency subband.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet.h&gt;

...

vec vt = it_dwt(v, 5); /* perform a wavelet decomposition on 5 levels);
vec *subbands = it_wavelet_split(vt, 5); /* split the transformed vector */
vec_zero(subbands[0]); /* clear the low pass band */
vt = it_wavelet_merge(vt, 5); /* merge the subbands to the transformed vector */
v = it_idwt(vt, 5);     /* recompose the vector 'v' */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_wavelet_new -->

<refentry id=man.it-wavelet-new>
  <refmeta>
    <refentrytitle>it_wavelet_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_wavelet_new</refname>
    <refpurpose>wavelet transform constructor</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_wavelet_new</function></funcdef>
        <paramdef> it_wavelet_lifting_t const *lifting, int level
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The <function>it_wavelet_new</function> function creates a new wavelet transform object on <parameter>level</parameter> levels using lifting steps <parameter>lifting</parameter>. This object can later be used as an it_transform_t to perform discrete wavelet transform or inverse wavelet transform on a real-valued vector using the <function>it_transform</function> or <function>it_itransform</function> method respectively.</para>
<para> Creating this transform object and using the <function>it_transform</function> method is prefered to using <function>it_dwt</function> when multiple transform on vectors of the same size are to be done. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The wavelet transform object
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet.h&gt;

...

it_wavelet_t *wavelet = it_wavelet_new(it_wavelet_lifting_97, 5);
vec v = vec_new_string("[ 0.3 1.5 2.5 ]");
vec vt;
vt = (vec) it_transform(wavelet, (vec) v);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_wavelet_split -->

<refentry id=man.it-wavelet-split>
  <refmeta>
    <refentrytitle>it_wavelet_split</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_wavelet_split</refname>
    <refpurpose>split the vector of wavelet coefficients</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>vec * <function>it_wavelet_split</function></funcdef>
        <paramdef> vec wav, int nb_levels
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function splits the vector of wavelet coefficients <parameter>wav</parameter> to a set of subband vectors. The number of levels <parameter>nb_level</parameter> must be given. The returned array of vectors is an array of <parameter>nb_level</parameter>+1 vectors with the first vector representing the low-frequency subband.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet.h&gt;

...

vec vt = it_dwt(v, 5); /* perform a wavelet decomposition on 5 levels);
vec *subbands = it_wavelet_split(vt, 5); /* split the transformed vector */
vec_zero(subbands[0]); /* clear the low pass band */
vt = it_wavelet_merge(vt, 5); /* merge the subbands to the transformed vector */
v = it_idwt(vt, 5);     /* recompose the vector 'v' */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_dwt2D -->

<refentry id=man.it-dwt2D>
  <refmeta>
    <refentrytitle>it_dwt2D</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_dwt2D</refname>
    <refpurpose>separable 2D discrete wavelet transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>it_dwt2D</function></funcdef>
        <paramdef> mat m, it_wavelet_lifting_t const *lifting, int levels
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the <parameter>levels</parameter>-level separable discrete wavelet transform of <parameter>m</parameter> using the lifting steps described by <parameter>lifting</parameter>. Currently the lifting steps for the usual 5/3 and 9/7 biorthogonal filters are predefined as "it_wavelet_lifting_53" and "it_wavelet_lifting_97", although you can provide your own lifting steps.
This transform is critically sampled, therefore the output matrix of coefficients has the same size as the input matrix <parameter>m</parameter>.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The set of wavelet coefficients
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet2D.h&gt;

...

/* analyse a signal 'm' using a 5-level 9/7 wavelet decomposition */
mat mt = it_dwt2D(m, it_wavelet_lifting_97, 5);

/* recompose the signal by inverse transform */
mat mr = it_idwt2D(mt, it_wavelet_lifting_97, 5);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_idwt2D -->

<refentry id=man.it-idwt2D>
  <refmeta>
    <refentrytitle>it_idwt2D</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_idwt2D</refname>
    <refpurpose>inverse separable 2D discrete wavelet transform</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>it_idwt2D</function></funcdef>
        <paramdef> mat t, it_wavelet_lifting_t const *lifting, int levels
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function computes the inverse discrete wavelet transform of <parameter>mt</parameter> using the lifting steps described by <parameter>lifting</parameter>. The input matrix of coefficients <parameter>mt</parameter> is the concatenation of all the coefficients in each subbands starting from the low-frequency subband. Currently the lifting steps for the usual 5/3 and 9/7 biorthogonal filters are predefined as "it_wavelet_lifting_53" and "it_wavelet_lifting_97", although you can provide your own lifting steps.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    The set of inverse wavelet coefficients
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet2D.h&gt;

...

/* analyse a signal 'm' using a 5-level 9/7 wavelet decomposition */
mat mt = it_dwt2D(m, it_wavelet_lifting_97, 5);
/* recompose the signal by inverse transform */
mat mr = it_idwt2D(mt, it_wavelet_lifting_97, 5);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_wavelet2D_merge -->

<refentry id=man.it-wavelet2D-merge>
  <refmeta>
    <refentrytitle>it_wavelet2D_merge</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_wavelet2D_merge</refname>
    <refpurpose>merge the subband matrices of a 2D wavelet</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat <function>it_wavelet2D_merge</function></funcdef>
        <paramdef> mat * subbands, int nb_level
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function merges the set of subband matrices <parameter>subbands</parameter> to a single concatenated matrix suitable for <function>it_idwt2D</function>. The number of levels <parameter>nb_level</parameter> must be given. The <parameter>subbands</parameter> argument is an array of <parameter>nb_level</parameter>+1 matricess with 'subbands[0]' representing the low-frequency subband.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet2D.h&gt;

...

mat mt = it_dwt2D(m, 5); /* perform a wavelet decomposition on 5 levels);
mat *subbands = it_wavelet2D_split(mt, 5); /* split the transformed matrix */
mat_zero(subbands[0]); /* clear the low pass band */
mt = it_wavelet2D_merge(mt, 5); /* merge the subbands to the transformed matrix */
m = it_idwt2D(mt, 5);     /* recompose the matrix 'm' */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_wavelet2D_new -->

<refentry id=man.it-wavelet2D-new>
  <refmeta>
    <refentrytitle>it_wavelet2D_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_wavelet2D_new</refname>
    <refpurpose>separable 2D wavelet transform constructor</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>void <function>it_wavelet2D_new</function></funcdef>
        <paramdef> it_wavelet_lifting_t const *lifting, int level
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para>The <function>it_wavelet2D_new</function> function creates a new separable 2D wavelet transform object on <parameter>level</parameter> levels using lifting steps <parameter>lifting</parameter>. This object can later be used as an it_transform2D_t to perform discrete wavelet transform or inverse wavelet transform on a real-valued matrix using the <function>it_transform2D</function> or <function>it_itransform2D</function> method respectively.</para>
<para> Creating this transform object and using the <function>it_transform2D</function> method is prefered to using <function>it_dwt2D</function> when multiple transform on matrices of the same size are to be done. </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet2D.h&gt;

...

it_wavelet_t *wavelet2D = it_wavelet2D_new(it_wavelet_lifting_97, 5);
mat m = mat_new_ones(100,100);
mat mt;
mt = (mat) it_transform2D(wavelet2D, (mat) m);
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- it_wavelet2D_split -->

<refentry id=man.it-wavelet2D-split>
  <refmeta>
    <refentrytitle>it_wavelet2D_split</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>it_wavelet2D_split</refname>
    <refpurpose>split the matrix of wavelet coefficients</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
#include &lt;it/wavelet2D.h&gt;
      </funcsynopsisinfo>
     <funcprototype><funcdef>mat * <function>it_wavelet2D_split</function></funcdef>
        <paramdef> mat wav, int nb_levels
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>


  <refsect1>
    <title>DESCRIPTION</title>

    <para> This function splits the matrix of wavelet coefficients <parameter>wav</parameter> to a set of subband matrices. The number of levels <parameter>nb_level</parameter> must be given. The returned array of matrices is an array of <parameter>nb_level</parameter>+1 matrices with the first matrix representing the low-frequency subband.
  </para>

  </refsect1>


  <refsect1>
    <title>RETURN VALUE</title>
    <para>
    
   </para>
  </refsect1>


  <refsect1>
    <title>EXAMPLE</title>
<programlisting>

#include &lt;wavelet2D.h&gt;

...

mat mt = it_dwt2D(m, 5); /* perform a wavelet decomposition on 5 levels);
mat *subbands = it_wavelet2D_split(mt, 5); /* split the transformed matrix */
mat_zero(subbands[0]); /* clear the low pass band */
mt = it_wavelet2D_merge(mt, 5); /* merge the subbands to the transformed matrix */
m = it_idwt2D(mt, 5);     /* recompose the matrix 'm' */
</programlisting>
  </refsect1>


  <refsect1 role=man> 
    <title>AUTHOR</title>

    <para>This manual page was written by Herve Jegou &lt;Herve.Jegou@irisa.fr&gt;.
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the <acronym>GNU</acronym> Free
      Documentation License, Version 1.1 or any later version
      published by the Free Software Foundation; with no Invariant
      Sections, no Front-Cover Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>















