dnl Process this file with autoconf to produce a configure script.
AC_INIT(README)

dnl Set various version strings - taken gratefully from the GTk sources
#
# Making releases:
#   MICRO_VERSION += 1;
#   INTERFACE_AGE += 1;
#   BINARY_AGE += 1;
# if any functions have been added, set INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set BINARY_AGE and INTERFACE_AGE to 0.
#
MAJOR_VERSION=0
MINOR_VERSION=2
MICRO_VERSION=3
INTERFACE_AGE=0
BINARY_AGE=0
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(INTERFACE_AGE)
AC_SUBST(BINARY_AGE)
AC_SUBST(VERSION)

# libtool versioning
LT_RELEASE=$MAJOR_VERSION.$MINOR_VERSION
LT_CURRENT=`expr $MICRO_VERSION - $INTERFACE_AGE`
LT_REVISION=$INTERFACE_AGE
LT_AGE=`expr $BINARY_AGE - $INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Detect the canonical host and target build environment
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl Setup for automake
AM_INIT_AUTOMAKE(libit, $VERSION)

dnl Check for tools

AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PROG_CC
AC_C_INLINE
AC_C_CONST
AC_PROG_INSTALL

dnl The alpha architecture needs special flags for binary portability
case "$target" in
    alpha*-*-linux*)
	if test x$ac_cv_prog_gcc = xyes; then
            CFLAGS="$CFLAGS -mcpu=ev4 -Wa,-mall -mieee"
        fi
        ;;
    i386-*-*)
            if test x$ac_cv_prog_gcc = xyes; then
                CFLAGS="$CFLAGS -march=i386"
            fi
            ;;
    i486-*-*)
            if test x$ac_cv_prog_gcc = xyes; then
                CFLAGS="$CFLAGS -march=i486"
            fi
            ;;
    i?86-*-*)
            if test x$ac_cv_prog_gcc = xyes; then
                CFLAGS="$CFLAGS -march=i586"
            fi
            ;;
esac

dnl Set runtime shared library paths as needed 

case "$target" in
    *-*-linux*)
	IT_RLD_FLAGS="-Wl,-rpath,\${exec_prefix}/lib"
	;;
    *-*-freebsd*)
	IT_RLD_FLAGS="-Wl,-rpath,\${exec_prefix}/lib"
	;;
    *-*-solaris*)
	IT_RLD_FLAGS="-R\${exec_prefix}/lib"
	;;
esac

AC_SUBST(IT_RLD_FLAGS)

dnl See if we need to pass -lm for the math library
AC_CHECK_LIB(m, sqrt, LIBS="$LIBS -lm")

dnl Check for debugging support
AC_ARG_ENABLE(debug,
[  --enable-debug          Include debugging support [default=no]],
              , enable_debug=no)
dnl Check for profiling support
AC_ARG_ENABLE(profile,
[  --enable-profile        Include profiling support [default=no]],
              , enable_profile=no)

if test x$enable_profile = xyes; then
   enable_debug=yes
fi

if test x$enable_debug != xyes; then
    if test x$ac_cv_prog_gcc = xyes; then
	CFLAGS="$CFLAGS -Wall -fexpensive-optimizations -funroll-loops -fomit-frame-pointer -DNDEBUG"
    fi
else
    if test x$enable_profile != xyes; then
        dnl See if electric fence is installed
        AC_CHECK_LIB(efence, malloc, LIBS="$LIBS -lefence")
    else
	CFLAGS="$CFLAGS -pg"
    fi

    if test x$ac_cv_prog_gcc = xyes; then
	CFLAGS="$CFLAGS -Wall"
    fi
fi

if test x$enable_profile != xyes; then
    if test x$ac_cv_prog_gcc = xyes; then
	CFLAGS="$CFLAGS -Wall -fexpensive-optimizations -funroll-loops -fomit-frame-pointer"
    fi
else
    if test x$ac_cv_prog_gcc = xyes; then
	CFLAGS="$CFLAGS -Wall"
    fi
 
    dnl See if electric fence is installed
    AC_CHECK_LIB(efence, malloc, LIBS="$LIBS -lefence")
fi

dnl Check compilation works with a C++ compiler
AC_ARG_ENABLE(profile,
[  --enable-cpp           Use a C++ compiler [default=no]],
              , enable_cpp=no)

if test x$enable_cpp = xyes; then
   CC="g++"
fi

dnl Expand the include directories for building libitpptemics
CFLAGS="$CFLAGS -I\$(top_srcdir)/include"

dnl Maximal warning
dnl CFLAGS="$CFLAGS -pedantic"

dnl Finally create all the generated files

AC_OUTPUT([
libit-config
libit.spec
libit.m4
Makefile
src/Makefile
doc/Makefile
doc/man3/Makefile
include/Makefile
include/it/Makefile
])
